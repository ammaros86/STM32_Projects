
Uart_Logger_H732ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa20  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800acf0  0800acf0  0000bcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800adc4  0800adc4  0000bdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800adc8  0800adc8  0000bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800adcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800ae30  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800ae90  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043cc  24000124  0800aef0  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240044f0  0800aef0  0000c4f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020edb  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae4  00000000  00000000  0002d02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00030b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124f  00000000  00000000  00032290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035d6b  00000000  00000000  000334df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebcf  00000000  00000000  0006924a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b93d  00000000  00000000  00087e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ac  00000000  00000000  001e379c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001ea048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000124 	.word	0x24000124
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800acd8 	.word	0x0800acd8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000128 	.word	0x24000128
 800030c:	0800acd8 	.word	0x0800acd8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <vApplicationGetIdleTaskMemory+0x2c>)
 80006c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4a06      	ldr	r2, [pc, #24]	@ (80006e0 <vApplicationGetIdleTaskMemory+0x30>)
 80006c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24000140 	.word	0x24000140
 80006e0:	240001e0 	.word	0x240001e0

080006e4 <HAL_UART_RxCpltCallback>:
uint8_t rxData[PACKET_SIZE];
uint8_t packetCopy[PACKET_SIZE];
int countLastReceive = 0;
int countFullRcv = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	countFullRcv ++;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_UART_RxCpltCallback+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <HAL_UART_RxCpltCallback+0x24>)
 80006f4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rxData, 10);
 80006f6:	220a      	movs	r2, #10
 80006f8:	4904      	ldr	r1, [pc, #16]	@ (800070c <HAL_UART_RxCpltCallback+0x28>)
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f006 ff80 	bl	8007600 <HAL_UART_Receive_DMA>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	240005f4 	.word	0x240005f4
 800070c:	240005d8 	.word	0x240005d8

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fdef 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f82d 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f95b 	bl	80009d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000722:	f000 f939 	bl	8000998 <MX_DMA_Init>
  MX_ETH_Init();
 8000726:	f000 f897 	bl	8000858 <MX_ETH_Init>
  MX_USB_OTG_HS_USB_Init();
 800072a:	f000 f92d 	bl	8000988 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 800072e:	f000 f8df 	bl	80008f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, rxData, 10);
 8000732:	220a      	movs	r2, #10
 8000734:	490c      	ldr	r1, [pc, #48]	@ (8000768 <main+0x58>)
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <main+0x5c>)
 8000738:	f006 ff62 	bl	8007600 <HAL_UART_Receive_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of processReceiveD */
  osThreadDef(processReceiveD, StartDefaultTask, osPriorityNormal, 0, 128);
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <main+0x60>)
 800073e:	1d3c      	adds	r4, r7, #4
 8000740:	461d      	mov	r5, r3
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  processReceiveDHandle = osThreadCreate(osThread(processReceiveD), NULL);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f008 fb49 	bl	8008dea <osThreadCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <main+0x64>)
 800075c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800075e:	f008 fb3d 	bl	8008ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0x52>
 8000766:	bf00      	nop
 8000768:	240005d8 	.word	0x240005d8
 800076c:	240004c8 	.word	0x240004c8
 8000770:	0800ad00 	.word	0x0800ad00
 8000774:	240005d4 	.word	0x240005d4

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	@ 0x70
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	224c      	movs	r2, #76	@ 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f009 fdd0 	bl	800a32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 fdca 	bl	800a32c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000798:	2002      	movs	r0, #2
 800079a:	f003 fdc7 	bl	800432c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <SystemClock_Config+0xdc>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <SystemClock_Config+0xdc>)
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <SystemClock_Config+0xdc>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ba:	bf00      	nop
 80007bc:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <SystemClock_Config+0xdc>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007c8:	d1f8      	bne.n	80007bc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007ca:	2321      	movs	r3, #33	@ 0x21
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ce:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007dc:	2302      	movs	r3, #2
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80007e4:	f240 1313 	movw	r3, #275	@ 0x113
 80007e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007f6:	2304      	movs	r3, #4
 80007f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fdca 	bl	80043a0 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000812:	f000 fa79 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	233f      	movs	r3, #63	@ 0x3f
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000822:	2308      	movs	r3, #8
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000826:	2340      	movs	r3, #64	@ 0x40
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800082e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000834:	2340      	movs	r3, #64	@ 0x40
 8000836:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2103      	movs	r1, #3
 800083c:	4618      	mov	r0, r3
 800083e:	f004 f989 	bl	8004b54 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000848:	f000 fa5e 	bl	8000d08 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3770      	adds	r7, #112	@ 0x70
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024800 	.word	0x58024800

08000858 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_ETH_Init+0x80>)
 800085e:	4a1f      	ldr	r2, [pc, #124]	@ (80008dc <MX_ETH_Init+0x84>)
 8000860:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_ETH_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_ETH_Init+0x88>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_ETH_Init+0x88>)
 8000870:	22e1      	movs	r2, #225	@ 0xe1
 8000872:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_ETH_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_ETH_Init+0x88>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_ETH_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_ETH_Init+0x80>)
 8000888:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_ETH_Init+0x88>)
 800088a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_ETH_Init+0x80>)
 800088e:	2201      	movs	r2, #1
 8000890:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_ETH_Init+0x80>)
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <MX_ETH_Init+0x8c>)
 8000896:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_ETH_Init+0x80>)
 800089a:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_ETH_Init+0x90>)
 800089c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_ETH_Init+0x80>)
 80008a0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008a6:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_ETH_Init+0x80>)
 80008a8:	f002 ff4a 	bl	8003740 <HAL_ETH_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008b2:	f000 fa29 	bl	8000d08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008b6:	2238      	movs	r2, #56	@ 0x38
 80008b8:	2100      	movs	r1, #0
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_ETH_Init+0x94>)
 80008bc:	f009 fd36 	bl	800a32c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_ETH_Init+0x94>)
 80008c2:	2221      	movs	r2, #33	@ 0x21
 80008c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_ETH_Init+0x94>)
 80008c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_ETH_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000418 	.word	0x24000418
 80008dc:	40028000 	.word	0x40028000
 80008e0:	240005f8 	.word	0x240005f8
 80008e4:	240000c4 	.word	0x240000c4
 80008e8:	24000064 	.word	0x24000064
 80008ec:	240003e0 	.word	0x240003e0

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <MX_USART3_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800093a:	f006 fd83 	bl	8007444 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f9e0 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800094c:	f008 f964 	bl	8008c18 <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f9d7 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800095e:	f008 f999 	bl	8008c94 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f9ce 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800096e:	f008 f91a 	bl	8008ba6 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f9c6 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	240004c8 	.word	0x240004c8
 8000984:	40004800 	.word	0x40004800

08000988 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <MX_DMA_Init+0x3c>)
 80009a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009a4:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <MX_DMA_Init+0x3c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_DMA_Init+0x3c>)
 80009b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2105      	movs	r1, #5
 80009c0:	200b      	movs	r0, #11
 80009c2:	f000 fdc1 	bl	8001548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009c6:	200b      	movs	r0, #11
 80009c8:	f000 fdd8 	bl	800157c <HAL_NVIC_EnableIRQ>

}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	58024400 	.word	0x58024400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b71      	ldr	r3, [pc, #452]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	4a6f      	ldr	r2, [pc, #444]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fe:	4b6d      	ldr	r3, [pc, #436]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	4b69      	ldr	r3, [pc, #420]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	4a68      	ldr	r2, [pc, #416]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1c:	4b65      	ldr	r3, [pc, #404]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b62      	ldr	r3, [pc, #392]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	4a60      	ldr	r2, [pc, #384]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a59      	ldr	r2, [pc, #356]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b56      	ldr	r3, [pc, #344]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b53      	ldr	r3, [pc, #332]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	4a51      	ldr	r2, [pc, #324]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a76:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a84:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	4a4a      	ldr	r2, [pc, #296]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a94:	4b47      	ldr	r3, [pc, #284]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b44      	ldr	r3, [pc, #272]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a42      	ldr	r2, [pc, #264]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b40      	ldr	r3, [pc, #256]	@ (8000bb4 <MX_GPIO_Init+0x1dc>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ac6:	483c      	ldr	r0, [pc, #240]	@ (8000bb8 <MX_GPIO_Init+0x1e0>)
 8000ac8:	f003 fc16 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad2:	483a      	ldr	r0, [pc, #232]	@ (8000bbc <MX_GPIO_Init+0x1e4>)
 8000ad4:	f003 fc10 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	4838      	ldr	r0, [pc, #224]	@ (8000bc0 <MX_GPIO_Init+0x1e8>)
 8000ade:	f003 fc0b 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4833      	ldr	r0, [pc, #204]	@ (8000bc4 <MX_GPIO_Init+0x1ec>)
 8000af8:	f003 fa56 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000afc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4828      	ldr	r0, [pc, #160]	@ (8000bb8 <MX_GPIO_Init+0x1e0>)
 8000b16:	f003 fa47 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4822      	ldr	r0, [pc, #136]	@ (8000bbc <MX_GPIO_Init+0x1e4>)
 8000b34:	f003 fa38 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481e      	ldr	r0, [pc, #120]	@ (8000bc8 <MX_GPIO_Init+0x1f0>)
 8000b4e:	f003 fa2b 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4819      	ldr	r0, [pc, #100]	@ (8000bcc <MX_GPIO_Init+0x1f4>)
 8000b68:	f003 fa1e 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b7e:	230a      	movs	r3, #10
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <MX_GPIO_Init+0x1f4>)
 8000b8a:	f003 fa0d 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <MX_GPIO_Init+0x1e8>)
 8000ba6:	f003 f9ff 	bl	8003fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	3730      	adds	r7, #48	@ 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020400 	.word	0x58020400
 8000bbc:	58020c00 	.word	0x58020c00
 8000bc0:	58021000 	.word	0x58021000
 8000bc4:	58020800 	.word	0x58020800
 8000bc8:	58021800 	.word	0x58021800
 8000bcc:	58020000 	.word	0x58020000

08000bd0 <isPacketValide>:

/* USER CODE BEGIN 4 */

int isPacketValide(){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
	uint8_t checksum = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
	int data_length = 5;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	607b      	str	r3, [r7, #4]
	if (countFullRcv != 0 && countFullRcv != countLastReceive){
 8000bde:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <isPacketValide+0x7c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d02a      	beq.n	8000c3c <isPacketValide+0x6c>
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <isPacketValide+0x7c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <isPacketValide+0x80>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d024      	beq.n	8000c3c <isPacketValide+0x6c>
		countLastReceive = countFullRcv;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <isPacketValide+0x7c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a16      	ldr	r2, [pc, #88]	@ (8000c50 <isPacketValide+0x80>)
 8000bf8:	6013      	str	r3, [r2, #0]
		memcpy(packetCopy, rxData, PACKET_SIZE);
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <isPacketValide+0x84>)
 8000bfc:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <isPacketValide+0x88>)
 8000bfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c00:	c303      	stmia	r3!, {r0, r1}
 8000c02:	801a      	strh	r2, [r3, #0]
		for(int i=0; i< data_length; i++){
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	e009      	b.n	8000c1e <isPacketValide+0x4e>
			checksum ^= packetCopy[i];
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <isPacketValide+0x84>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4053      	eors	r3, r2
 8000c16:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i< data_length; i++){
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbf1      	blt.n	8000c0a <isPacketValide+0x3a>
		}
		if (checksum == packetCopy[data_length]){
 8000c26:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <isPacketValide+0x84>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d101      	bne.n	8000c38 <isPacketValide+0x68>
			return 1; // Valid packet
 8000c34:	2301      	movs	r3, #1
 8000c36:	e003      	b.n	8000c40 <isPacketValide+0x70>
		}
		return 0; // Invalid packet
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e001      	b.n	8000c40 <isPacketValide+0x70>
	}else{
		return -1; // No new data received
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	240005f4 	.word	0x240005f4
 8000c50:	240005f0 	.word	0x240005f0
 8000c54:	240005e4 	.word	0x240005e4
 8000c58:	240005d8 	.word	0x240005d8

08000c5c <send_ack>:

void send_ack(int ack){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b090      	sub	sp, #64	@ 0x40
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	char ackPacket[50];
	if (ack){
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d008      	beq.n	8000c7c <send_ack+0x20>
		snprintf(ackPacket, sizeof(ackPacket), "recevied: %d \r\n", countLastReceive);
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <send_ack+0x54>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f107 000c 	add.w	r0, r7, #12
 8000c72:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <send_ack+0x58>)
 8000c74:	2132      	movs	r1, #50	@ 0x32
 8000c76:	f009 fb25 	bl	800a2c4 <sniprintf>
 8000c7a:	e007      	b.n	8000c8c <send_ack+0x30>
	}else{
		snprintf(ackPacket, sizeof(ackPacket), "invalid data: %d \r\n", countLastReceive);
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <send_ack+0x54>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f107 000c 	add.w	r0, r7, #12
 8000c84:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb8 <send_ack+0x5c>)
 8000c86:	2132      	movs	r1, #50	@ 0x32
 8000c88:	f009 fb1c 	bl	800a2c4 <sniprintf>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)ackPacket, strlen(ackPacket), HAL_MAX_DELAY);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fb3d 	bl	8000310 <strlen>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f107 010c 	add.w	r1, r7, #12
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	4806      	ldr	r0, [pc, #24]	@ (8000cbc <send_ack+0x60>)
 8000ca4:	f006 fc1e 	bl	80074e4 <HAL_UART_Transmit>

}
 8000ca8:	bf00      	nop
 8000caa:	3740      	adds	r7, #64	@ 0x40
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240005f0 	.word	0x240005f0
 8000cb4:	0800ad1c 	.word	0x0800ad1c
 8000cb8:	0800ad2c 	.word	0x0800ad2c
 8000cbc:	240004c8 	.word	0x240004c8

08000cc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  int packet_validation = isPacketValide();
 8000cc8:	f7ff ff82 	bl	8000bd0 <isPacketValide>
 8000ccc:	60f8      	str	r0, [r7, #12]
	  if (packet_validation >= 0){
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db02      	blt.n	8000cda <StartDefaultTask+0x1a>
		  send_ack(packet_validation);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff ffc1 	bl	8000c5c <send_ack>
	  }
    osDelay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f008 f8d1 	bl	8008e82 <osDelay>
  {
 8000ce0:	e7f2      	b.n	8000cc8 <StartDefaultTask+0x8>
	...

08000ce4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf6:	f000 fb3b 	bl	8001370 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010000 	.word	0x40010000

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <Error_Handler+0x8>

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <HAL_MspInit+0x38>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_MspInit+0x38>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_MspInit+0x38>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f06f 0001 	mvn.w	r0, #1
 8000d40:	f000 fc02 	bl	8001548 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	58024400 	.word	0x58024400

08000d50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a59      	ldr	r2, [pc, #356]	@ (8000ed4 <HAL_ETH_MspInit+0x184>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f040 80ab 	bne.w	8000eca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d74:	4b58      	ldr	r3, [pc, #352]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7a:	4a57      	ldr	r2, [pc, #348]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d84:	4b54      	ldr	r3, [pc, #336]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d92:	4b51      	ldr	r3, [pc, #324]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d98:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000da2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000db0:	4b49      	ldr	r3, [pc, #292]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db6:	4a48      	ldr	r2, [pc, #288]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dc0:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a40      	ldr	r2, [pc, #256]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a39      	ldr	r2, [pc, #228]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a31      	ldr	r2, [pc, #196]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e46:	2332      	movs	r3, #50	@ 0x32
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481e      	ldr	r0, [pc, #120]	@ (8000edc <HAL_ETH_MspInit+0x18c>)
 8000e62:	f003 f8a1 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e66:	2386      	movs	r3, #134	@ 0x86
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	@ (8000ee0 <HAL_ETH_MspInit+0x190>)
 8000e82:	f003 f891 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4810      	ldr	r0, [pc, #64]	@ (8000ee4 <HAL_ETH_MspInit+0x194>)
 8000ea4:	f003 f880 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ea8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <HAL_ETH_MspInit+0x198>)
 8000ec6:	f003 f86f 	bl	8003fa8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	@ 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40028000 	.word	0x40028000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020800 	.word	0x58020800
 8000ee0:	58020000 	.word	0x58020000
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58021800 	.word	0x58021800

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b8      	sub	sp, #224	@ 0xe0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	22b8      	movs	r2, #184	@ 0xb8
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f009 fa0d 	bl	800a32c <memset>
  if(huart->Instance==USART3)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a3e      	ldr	r2, [pc, #248]	@ (8001010 <HAL_UART_MspInit+0x124>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d174      	bne.n	8001006 <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f1c:	f04f 0202 	mov.w	r2, #2
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 f9dc 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f3e:	f7ff fee3 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f42:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <HAL_UART_MspInit+0x128>)
 8000f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f48:	4a32      	ldr	r2, [pc, #200]	@ (8001014 <HAL_UART_MspInit+0x128>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f52:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <HAL_UART_MspInit+0x128>)
 8000f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <HAL_UART_MspInit+0x128>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	4a2b      	ldr	r2, [pc, #172]	@ (8001014 <HAL_UART_MspInit+0x128>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <HAL_UART_MspInit+0x128>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481c      	ldr	r0, [pc, #112]	@ (8001018 <HAL_UART_MspInit+0x12c>)
 8000fa6:	f002 ffff 	bl	8003fa8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fac:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <HAL_UART_MspInit+0x134>)
 8000fae:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fb2:	222d      	movs	r2, #45	@ 0x2d
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000fea:	f000 fad5 	bl	8001598 <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000ff4:	f7ff fe88 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_UART_MspInit+0x130>)
 8000ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_UART_MspInit+0x130>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001006:	bf00      	nop
 8001008:	37e0      	adds	r7, #224	@ 0xe0
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40004800 	.word	0x40004800
 8001014:	58024400 	.word	0x58024400
 8001018:	58020c00 	.word	0x58020c00
 800101c:	2400055c 	.word	0x2400055c
 8001020:	40020010 	.word	0x40020010

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	@ 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d844      	bhi.n	80010bc <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001032:	2200      	movs	r2, #0
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	2019      	movs	r0, #25
 8001038:	f000 fa86 	bl	8001548 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800103c:	2019      	movs	r0, #25
 800103e:	f000 fa9d 	bl	800157c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001042:	4a24      	ldr	r2, [pc, #144]	@ (80010d4 <HAL_InitTick+0xb0>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001048:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <HAL_InitTick+0xb4>)
 800104a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800104e:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <HAL_InitTick+0xb4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <HAL_InitTick+0xb4>)
 800105a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f004 f8fb 	bl	800526c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001076:	f004 f8e3 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 800107a:	4603      	mov	r3, r0
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001082:	4a16      	ldr	r2, [pc, #88]	@ (80010dc <HAL_InitTick+0xb8>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3b01      	subs	r3, #1
 800108c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_InitTick+0xbc>)
 8001090:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <HAL_InitTick+0xc0>)
 8001092:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0xbc>)
 8001096:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800109c:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_InitTick+0xbc>)
 800109e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_InitTick+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_InitTick+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010ae:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <HAL_InitTick+0xbc>)
 80010b0:	f005 fee0 	bl	8006e74 <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d107      	bne.n	80010ca <HAL_InitTick+0xa6>
 80010ba:	e001      	b.n	80010c0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e005      	b.n	80010cc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <HAL_InitTick+0xbc>)
 80010c2:	f005 ff39 	bl	8006f38 <HAL_TIM_Base_Start_IT>
 80010c6:	4603      	mov	r3, r0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3738      	adds	r7, #56	@ 0x38
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	24000008 	.word	0x24000008
 80010d8:	58024400 	.word	0x58024400
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	24000600 	.word	0x24000600
 80010e4:	40010000 	.word	0x40010000

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <DMA1_Stream0_IRQHandler+0x10>)
 8001126:	f000 fff9 	bl	800211c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2400055c 	.word	0x2400055c

08001134 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <TIM1_UP_IRQHandler+0x10>)
 800113a:	f005 ff83 	bl	8007044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000600 	.word	0x24000600

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f009 f936 	bl	800a3e8 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24050000 	.word	0x24050000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	2400064c 	.word	0x2400064c
 80011b0:	240044f0 	.word	0x240044f0

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <SystemInit+0xd0>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011be:	4a31      	ldr	r2, [pc, #196]	@ (8001284 <SystemInit+0xd0>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <SystemInit+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d807      	bhi.n	80011e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <SystemInit+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 030f 	bic.w	r3, r3, #15
 80011dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <SystemInit+0xd4>)
 80011de:	f043 0307 	orr.w	r3, r3, #7
 80011e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <SystemInit+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a28      	ldr	r2, [pc, #160]	@ (800128c <SystemInit+0xd8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <SystemInit+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f6:	4b25      	ldr	r3, [pc, #148]	@ (800128c <SystemInit+0xd8>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4924      	ldr	r1, [pc, #144]	@ (800128c <SystemInit+0xd8>)
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <SystemInit+0xdc>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <SystemInit+0xd4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <SystemInit+0xd4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 030f 	bic.w	r3, r3, #15
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <SystemInit+0xd4>)
 8001218:	f043 0307 	orr.w	r3, r3, #7
 800121c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <SystemInit+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <SystemInit+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <SystemInit+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <SystemInit+0xd8>)
 8001232:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <SystemInit+0xe0>)
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <SystemInit+0xd8>)
 8001238:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <SystemInit+0xe4>)
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <SystemInit+0xd8>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <SystemInit+0xe8>)
 8001240:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <SystemInit+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <SystemInit+0xd8>)
 800124a:	4a14      	ldr	r2, [pc, #80]	@ (800129c <SystemInit+0xe8>)
 800124c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <SystemInit+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <SystemInit+0xd8>)
 8001256:	4a11      	ldr	r2, [pc, #68]	@ (800129c <SystemInit+0xe8>)
 8001258:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <SystemInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <SystemInit+0xd8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	@ (800128c <SystemInit+0xd8>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800126a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <SystemInit+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <SystemInit+0xec>)
 8001274:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001278:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00
 8001288:	52002000 	.word	0x52002000
 800128c:	58024400 	.word	0x58024400
 8001290:	eaf6ed7f 	.word	0xeaf6ed7f
 8001294:	02020200 	.word	0x02020200
 8001298:	01ff0000 	.word	0x01ff0000
 800129c:	01010280 	.word	0x01010280
 80012a0:	52004000 	.word	0x52004000

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a8:	f7ff ff84 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	@ (80012e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	@ (80012f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f009 f88f 	bl	800a3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fa1b 	bl	8000710 <main>
  bx  lr
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80012e8:	0800adcc 	.word	0x0800adcc
  ldr r2, =_sbss
 80012ec:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80012f0:	240044f0 	.word	0x240044f0

080012f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC3_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
 8001300:	f000 f917 	bl	8001532 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001304:	f003 fddc 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_Init+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	4913      	ldr	r1, [pc, #76]	@ (8001364 <HAL_Init+0x6c>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a0e      	ldr	r2, [pc, #56]	@ (8001364 <HAL_Init+0x6c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <HAL_Init+0x70>)
 800133a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800133c:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <HAL_Init+0x74>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001342:	200f      	movs	r0, #15
 8001344:	f7ff fe6e 	bl	8001024 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e002      	b.n	8001358 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001352:	f7ff fcdf 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58024400 	.word	0x58024400
 8001364:	0800ad48 	.word	0x0800ad48
 8001368:	24000004 	.word	0x24000004
 800136c:	24000000 	.word	0x24000000

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	2400000c 	.word	0x2400000c
 8001394:	24000650 	.word	0x24000650

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	24000650 	.word	0x24000650

080013b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013c0:	4904      	ldr	r1, [pc, #16]	@ (80013d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58000400 	.word	0x58000400

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <__NVIC_SetPriorityGrouping+0x40>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	4313      	orrs	r3, r2
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <__NVIC_SetPriorityGrouping+0x40>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	05fa0000 	.word	0x05fa0000

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	@ (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	@ (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	@ (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	@ 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	@ 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ff4c 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001556:	f7ff ff63 	bl	8001420 <__NVIC_GetPriorityGrouping>
 800155a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7ff ffb3 	bl	80014cc <NVIC_EncodePriority>
 8001566:	4602      	mov	r2, r0
 8001568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff82 	bl	8001478 <__NVIC_SetPriority>
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff56 	bl	800143c <__NVIC_EnableIRQ>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fefa 	bl	8001398 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e312      	b.n	8001bd6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a66      	ldr	r2, [pc, #408]	@ (8001750 <HAL_DMA_Init+0x1b8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d04a      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a65      	ldr	r2, [pc, #404]	@ (8001754 <HAL_DMA_Init+0x1bc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d045      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a63      	ldr	r2, [pc, #396]	@ (8001758 <HAL_DMA_Init+0x1c0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d040      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a62      	ldr	r2, [pc, #392]	@ (800175c <HAL_DMA_Init+0x1c4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d03b      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a60      	ldr	r2, [pc, #384]	@ (8001760 <HAL_DMA_Init+0x1c8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d036      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001764 <HAL_DMA_Init+0x1cc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d031      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001768 <HAL_DMA_Init+0x1d0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d02c      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a5c      	ldr	r2, [pc, #368]	@ (800176c <HAL_DMA_Init+0x1d4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d027      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a5a      	ldr	r2, [pc, #360]	@ (8001770 <HAL_DMA_Init+0x1d8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d022      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a59      	ldr	r2, [pc, #356]	@ (8001774 <HAL_DMA_Init+0x1dc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d01d      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a57      	ldr	r2, [pc, #348]	@ (8001778 <HAL_DMA_Init+0x1e0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d018      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a56      	ldr	r2, [pc, #344]	@ (800177c <HAL_DMA_Init+0x1e4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a54      	ldr	r2, [pc, #336]	@ (8001780 <HAL_DMA_Init+0x1e8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00e      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a53      	ldr	r2, [pc, #332]	@ (8001784 <HAL_DMA_Init+0x1ec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d009      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a51      	ldr	r2, [pc, #324]	@ (8001788 <HAL_DMA_Init+0x1f0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d004      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a50      	ldr	r2, [pc, #320]	@ (800178c <HAL_DMA_Init+0x1f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Init+0xbc>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_DMA_Init+0xbe>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 813c 	beq.w	80018d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a37      	ldr	r2, [pc, #220]	@ (8001750 <HAL_DMA_Init+0x1b8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d04a      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a36      	ldr	r2, [pc, #216]	@ (8001754 <HAL_DMA_Init+0x1bc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d045      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a34      	ldr	r2, [pc, #208]	@ (8001758 <HAL_DMA_Init+0x1c0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d040      	beq.n	800170c <HAL_DMA_Init+0x174>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a33      	ldr	r2, [pc, #204]	@ (800175c <HAL_DMA_Init+0x1c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d03b      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a31      	ldr	r2, [pc, #196]	@ (8001760 <HAL_DMA_Init+0x1c8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d036      	beq.n	800170c <HAL_DMA_Init+0x174>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a30      	ldr	r2, [pc, #192]	@ (8001764 <HAL_DMA_Init+0x1cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d031      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001768 <HAL_DMA_Init+0x1d0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02c      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a2d      	ldr	r2, [pc, #180]	@ (800176c <HAL_DMA_Init+0x1d4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d027      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001770 <HAL_DMA_Init+0x1d8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d022      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001774 <HAL_DMA_Init+0x1dc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d01d      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a28      	ldr	r2, [pc, #160]	@ (8001778 <HAL_DMA_Init+0x1e0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a27      	ldr	r2, [pc, #156]	@ (800177c <HAL_DMA_Init+0x1e4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <HAL_DMA_Init+0x1e8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00e      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <HAL_DMA_Init+0x1ec>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a22      	ldr	r2, [pc, #136]	@ (8001788 <HAL_DMA_Init+0x1f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_DMA_Init+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d108      	bne.n	800171e <HAL_DMA_Init+0x186>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e007      	b.n	800172e <HAL_DMA_Init+0x196>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800172e:	e02f      	b.n	8001790 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001730:	f7ff fe32 	bl	8001398 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b05      	cmp	r3, #5
 800173c:	d928      	bls.n	8001790 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2220      	movs	r2, #32
 8001742:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e242      	b.n	8001bd6 <HAL_DMA_Init+0x63e>
 8001750:	40020010 	.word	0x40020010
 8001754:	40020028 	.word	0x40020028
 8001758:	40020040 	.word	0x40020040
 800175c:	40020058 	.word	0x40020058
 8001760:	40020070 	.word	0x40020070
 8001764:	40020088 	.word	0x40020088
 8001768:	400200a0 	.word	0x400200a0
 800176c:	400200b8 	.word	0x400200b8
 8001770:	40020410 	.word	0x40020410
 8001774:	40020428 	.word	0x40020428
 8001778:	40020440 	.word	0x40020440
 800177c:	40020458 	.word	0x40020458
 8001780:	40020470 	.word	0x40020470
 8001784:	40020488 	.word	0x40020488
 8001788:	400204a0 	.word	0x400204a0
 800178c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1c8      	bne.n	8001730 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4b83      	ldr	r3, [pc, #524]	@ (80019b8 <HAL_DMA_Init+0x420>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80017b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	4313      	orrs	r3, r2
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b28      	cmp	r3, #40	@ 0x28
 80017fa:	d903      	bls.n	8001804 <HAL_DMA_Init+0x26c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b2e      	cmp	r3, #46	@ 0x2e
 8001802:	d91f      	bls.n	8001844 <HAL_DMA_Init+0x2ac>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b3e      	cmp	r3, #62	@ 0x3e
 800180a:	d903      	bls.n	8001814 <HAL_DMA_Init+0x27c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b42      	cmp	r3, #66	@ 0x42
 8001812:	d917      	bls.n	8001844 <HAL_DMA_Init+0x2ac>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b46      	cmp	r3, #70	@ 0x46
 800181a:	d903      	bls.n	8001824 <HAL_DMA_Init+0x28c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b48      	cmp	r3, #72	@ 0x48
 8001822:	d90f      	bls.n	8001844 <HAL_DMA_Init+0x2ac>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b4e      	cmp	r3, #78	@ 0x4e
 800182a:	d903      	bls.n	8001834 <HAL_DMA_Init+0x29c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b52      	cmp	r3, #82	@ 0x52
 8001832:	d907      	bls.n	8001844 <HAL_DMA_Init+0x2ac>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b73      	cmp	r3, #115	@ 0x73
 800183a:	d905      	bls.n	8001848 <HAL_DMA_Init+0x2b0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b77      	cmp	r3, #119	@ 0x77
 8001842:	d801      	bhi.n	8001848 <HAL_DMA_Init+0x2b0>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_DMA_Init+0x2b2>
 8001848:	2300      	movs	r3, #0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001854:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f023 0307 	bic.w	r3, r3, #7
 800186c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	2b04      	cmp	r3, #4
 800187e:	d117      	bne.n	80018b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00e      	beq.n	80018b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f001 fdca 	bl	800342c <DMA_CheckFifoParam>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2240      	movs	r2, #64	@ 0x40
 80018a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e192      	b.n	8001bd6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f001 fd05 	bl	80032c8 <DMA_CalcBaseAndBitshift>
 80018be:	4603      	mov	r3, r0
 80018c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	223f      	movs	r2, #63	@ 0x3f
 80018cc:	409a      	lsls	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	e0c8      	b.n	8001a66 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a38      	ldr	r2, [pc, #224]	@ (80019bc <HAL_DMA_Init+0x424>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d022      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a37      	ldr	r2, [pc, #220]	@ (80019c0 <HAL_DMA_Init+0x428>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d01d      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a35      	ldr	r2, [pc, #212]	@ (80019c4 <HAL_DMA_Init+0x42c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d018      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <HAL_DMA_Init+0x430>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a32      	ldr	r2, [pc, #200]	@ (80019cc <HAL_DMA_Init+0x434>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00e      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <HAL_DMA_Init+0x438>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d009      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_DMA_Init+0x43c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d004      	beq.n	8001924 <HAL_DMA_Init+0x38c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2e      	ldr	r2, [pc, #184]	@ (80019d8 <HAL_DMA_Init+0x440>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_DMA_Init+0x390>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_DMA_Init+0x392>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8092 	beq.w	8001a54 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_DMA_Init+0x424>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d021      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a20      	ldr	r2, [pc, #128]	@ (80019c0 <HAL_DMA_Init+0x428>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d01c      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_DMA_Init+0x42c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d017      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <HAL_DMA_Init+0x430>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d012      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_DMA_Init+0x434>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1a      	ldr	r2, [pc, #104]	@ (80019d0 <HAL_DMA_Init+0x438>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d008      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a18      	ldr	r2, [pc, #96]	@ (80019d4 <HAL_DMA_Init+0x43c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d003      	beq.n	800197e <HAL_DMA_Init+0x3e6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a17      	ldr	r2, [pc, #92]	@ (80019d8 <HAL_DMA_Init+0x440>)
 800197c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2202      	movs	r2, #2
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <HAL_DMA_Init+0x444>)
 800199a:	4013      	ands	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b40      	cmp	r3, #64	@ 0x40
 80019a4:	d01c      	beq.n	80019e0 <HAL_DMA_Init+0x448>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b80      	cmp	r3, #128	@ 0x80
 80019ac:	d102      	bne.n	80019b4 <HAL_DMA_Init+0x41c>
 80019ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019b2:	e016      	b.n	80019e2 <HAL_DMA_Init+0x44a>
 80019b4:	2300      	movs	r3, #0
 80019b6:	e014      	b.n	80019e2 <HAL_DMA_Init+0x44a>
 80019b8:	fe10803f 	.word	0xfe10803f
 80019bc:	58025408 	.word	0x58025408
 80019c0:	5802541c 	.word	0x5802541c
 80019c4:	58025430 	.word	0x58025430
 80019c8:	58025444 	.word	0x58025444
 80019cc:	58025458 	.word	0x58025458
 80019d0:	5802546c 	.word	0x5802546c
 80019d4:	58025480 	.word	0x58025480
 80019d8:	58025494 	.word	0x58025494
 80019dc:	fffe000f 	.word	0xfffe000f
 80019e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68d2      	ldr	r2, [r2, #12]
 80019e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <HAL_DMA_Init+0x648>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <HAL_DMA_Init+0x64c>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f001 fc45 	bl	80032c8 <DMA_CalcBaseAndBitshift>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	e008      	b.n	8001a66 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2240      	movs	r2, #64	@ 0x40
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0b7      	b.n	8001bd6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001be8 <HAL_DMA_Init+0x650>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d072      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a5d      	ldr	r2, [pc, #372]	@ (8001bec <HAL_DMA_Init+0x654>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d06d      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf0 <HAL_DMA_Init+0x658>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d068      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf4 <HAL_DMA_Init+0x65c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d063      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a59      	ldr	r2, [pc, #356]	@ (8001bf8 <HAL_DMA_Init+0x660>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d05e      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a57      	ldr	r2, [pc, #348]	@ (8001bfc <HAL_DMA_Init+0x664>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d059      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a56      	ldr	r2, [pc, #344]	@ (8001c00 <HAL_DMA_Init+0x668>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d054      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a54      	ldr	r2, [pc, #336]	@ (8001c04 <HAL_DMA_Init+0x66c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04f      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a53      	ldr	r2, [pc, #332]	@ (8001c08 <HAL_DMA_Init+0x670>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d04a      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a51      	ldr	r2, [pc, #324]	@ (8001c0c <HAL_DMA_Init+0x674>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d045      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a50      	ldr	r2, [pc, #320]	@ (8001c10 <HAL_DMA_Init+0x678>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d040      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c14 <HAL_DMA_Init+0x67c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d03b      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8001c18 <HAL_DMA_Init+0x680>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d036      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	@ (8001c1c <HAL_DMA_Init+0x684>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d031      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <HAL_DMA_Init+0x688>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d02c      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a48      	ldr	r2, [pc, #288]	@ (8001c24 <HAL_DMA_Init+0x68c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d027      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a47      	ldr	r2, [pc, #284]	@ (8001c28 <HAL_DMA_Init+0x690>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d022      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <HAL_DMA_Init+0x694>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01d      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a44      	ldr	r2, [pc, #272]	@ (8001c30 <HAL_DMA_Init+0x698>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d018      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <HAL_DMA_Init+0x69c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a41      	ldr	r2, [pc, #260]	@ (8001c38 <HAL_DMA_Init+0x6a0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00e      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8001c3c <HAL_DMA_Init+0x6a4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a3e      	ldr	r2, [pc, #248]	@ (8001c40 <HAL_DMA_Init+0x6a8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_DMA_Init+0x5be>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3c      	ldr	r2, [pc, #240]	@ (8001c44 <HAL_DMA_Init+0x6ac>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_DMA_Init+0x5c2>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_DMA_Init+0x5c4>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d032      	beq.n	8001bc6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f001 fcdf 	bl	8003524 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b80      	cmp	r3, #128	@ 0x80
 8001b6c:	d102      	bne.n	8001b74 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_DMA_Init+0x61c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d80c      	bhi.n	8001bb4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f001 fd5c 	bl	8003658 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	e008      	b.n	8001bc6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	a7fdabf8 	.word	0xa7fdabf8
 8001be4:	cccccccd 	.word	0xcccccccd
 8001be8:	40020010 	.word	0x40020010
 8001bec:	40020028 	.word	0x40020028
 8001bf0:	40020040 	.word	0x40020040
 8001bf4:	40020058 	.word	0x40020058
 8001bf8:	40020070 	.word	0x40020070
 8001bfc:	40020088 	.word	0x40020088
 8001c00:	400200a0 	.word	0x400200a0
 8001c04:	400200b8 	.word	0x400200b8
 8001c08:	40020410 	.word	0x40020410
 8001c0c:	40020428 	.word	0x40020428
 8001c10:	40020440 	.word	0x40020440
 8001c14:	40020458 	.word	0x40020458
 8001c18:	40020470 	.word	0x40020470
 8001c1c:	40020488 	.word	0x40020488
 8001c20:	400204a0 	.word	0x400204a0
 8001c24:	400204b8 	.word	0x400204b8
 8001c28:	58025408 	.word	0x58025408
 8001c2c:	5802541c 	.word	0x5802541c
 8001c30:	58025430 	.word	0x58025430
 8001c34:	58025444 	.word	0x58025444
 8001c38:	58025458 	.word	0x58025458
 8001c3c:	5802546c 	.word	0x5802546c
 8001c40:	58025480 	.word	0x58025480
 8001c44:	58025494 	.word	0x58025494

08001c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e226      	b.n	80020b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Start_IT+0x2a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e21f      	b.n	80020b2 <HAL_DMA_Start_IT+0x46a>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	f040 820a 	bne.w	800209c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a68      	ldr	r2, [pc, #416]	@ (8001e3c <HAL_DMA_Start_IT+0x1f4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04a      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a66      	ldr	r2, [pc, #408]	@ (8001e40 <HAL_DMA_Start_IT+0x1f8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d045      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a65      	ldr	r2, [pc, #404]	@ (8001e44 <HAL_DMA_Start_IT+0x1fc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d040      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a63      	ldr	r2, [pc, #396]	@ (8001e48 <HAL_DMA_Start_IT+0x200>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d03b      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a62      	ldr	r2, [pc, #392]	@ (8001e4c <HAL_DMA_Start_IT+0x204>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d036      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a60      	ldr	r2, [pc, #384]	@ (8001e50 <HAL_DMA_Start_IT+0x208>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d031      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8001e54 <HAL_DMA_Start_IT+0x20c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d02c      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e58 <HAL_DMA_Start_IT+0x210>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d027      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5c      	ldr	r2, [pc, #368]	@ (8001e5c <HAL_DMA_Start_IT+0x214>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d022      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e60 <HAL_DMA_Start_IT+0x218>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a59      	ldr	r2, [pc, #356]	@ (8001e64 <HAL_DMA_Start_IT+0x21c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d018      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a57      	ldr	r2, [pc, #348]	@ (8001e68 <HAL_DMA_Start_IT+0x220>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a56      	ldr	r2, [pc, #344]	@ (8001e6c <HAL_DMA_Start_IT+0x224>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	@ (8001e70 <HAL_DMA_Start_IT+0x228>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a53      	ldr	r2, [pc, #332]	@ (8001e74 <HAL_DMA_Start_IT+0x22c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_DMA_Start_IT+0xee>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a51      	ldr	r2, [pc, #324]	@ (8001e78 <HAL_DMA_Start_IT+0x230>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d108      	bne.n	8001d48 <HAL_DMA_Start_IT+0x100>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_DMA_Start_IT+0x110>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f001 f906 	bl	8002f70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a34      	ldr	r2, [pc, #208]	@ (8001e3c <HAL_DMA_Start_IT+0x1f4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d04a      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a33      	ldr	r2, [pc, #204]	@ (8001e40 <HAL_DMA_Start_IT+0x1f8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d045      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a31      	ldr	r2, [pc, #196]	@ (8001e44 <HAL_DMA_Start_IT+0x1fc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d040      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a30      	ldr	r2, [pc, #192]	@ (8001e48 <HAL_DMA_Start_IT+0x200>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d03b      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_DMA_Start_IT+0x204>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d036      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <HAL_DMA_Start_IT+0x208>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d031      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e54 <HAL_DMA_Start_IT+0x20c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02c      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2a      	ldr	r2, [pc, #168]	@ (8001e58 <HAL_DMA_Start_IT+0x210>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d027      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a28      	ldr	r2, [pc, #160]	@ (8001e5c <HAL_DMA_Start_IT+0x214>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d022      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_DMA_Start_IT+0x218>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d01d      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	@ (8001e64 <HAL_DMA_Start_IT+0x21c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_DMA_Start_IT+0x220>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a22      	ldr	r2, [pc, #136]	@ (8001e6c <HAL_DMA_Start_IT+0x224>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <HAL_DMA_Start_IT+0x228>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <HAL_DMA_Start_IT+0x22c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_Start_IT+0x1bc>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_DMA_Start_IT+0x230>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Start_IT+0x1c0>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_DMA_Start_IT+0x1c2>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 021e 	bic.w	r2, r3, #30
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0216 	orr.w	r2, r2, #22
 8001e20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03e      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0208 	orr.w	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e035      	b.n	8001ea8 <HAL_DMA_Start_IT+0x260>
 8001e3c:	40020010 	.word	0x40020010
 8001e40:	40020028 	.word	0x40020028
 8001e44:	40020040 	.word	0x40020040
 8001e48:	40020058 	.word	0x40020058
 8001e4c:	40020070 	.word	0x40020070
 8001e50:	40020088 	.word	0x40020088
 8001e54:	400200a0 	.word	0x400200a0
 8001e58:	400200b8 	.word	0x400200b8
 8001e5c:	40020410 	.word	0x40020410
 8001e60:	40020428 	.word	0x40020428
 8001e64:	40020440 	.word	0x40020440
 8001e68:	40020458 	.word	0x40020458
 8001e6c:	40020470 	.word	0x40020470
 8001e70:	40020488 	.word	0x40020488
 8001e74:	400204a0 	.word	0x400204a0
 8001e78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020e 	bic.w	r2, r3, #14
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 020a 	orr.w	r2, r2, #10
 8001e8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0204 	orr.w	r2, r2, #4
 8001ea6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a83      	ldr	r2, [pc, #524]	@ (80020bc <HAL_DMA_Start_IT+0x474>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d072      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a82      	ldr	r2, [pc, #520]	@ (80020c0 <HAL_DMA_Start_IT+0x478>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d06d      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a80      	ldr	r2, [pc, #512]	@ (80020c4 <HAL_DMA_Start_IT+0x47c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d068      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7f      	ldr	r2, [pc, #508]	@ (80020c8 <HAL_DMA_Start_IT+0x480>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d063      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80020cc <HAL_DMA_Start_IT+0x484>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d05e      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7c      	ldr	r2, [pc, #496]	@ (80020d0 <HAL_DMA_Start_IT+0x488>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d059      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a7a      	ldr	r2, [pc, #488]	@ (80020d4 <HAL_DMA_Start_IT+0x48c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d054      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a79      	ldr	r2, [pc, #484]	@ (80020d8 <HAL_DMA_Start_IT+0x490>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04f      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a77      	ldr	r2, [pc, #476]	@ (80020dc <HAL_DMA_Start_IT+0x494>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04a      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a76      	ldr	r2, [pc, #472]	@ (80020e0 <HAL_DMA_Start_IT+0x498>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d045      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a74      	ldr	r2, [pc, #464]	@ (80020e4 <HAL_DMA_Start_IT+0x49c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a73      	ldr	r2, [pc, #460]	@ (80020e8 <HAL_DMA_Start_IT+0x4a0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03b      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a71      	ldr	r2, [pc, #452]	@ (80020ec <HAL_DMA_Start_IT+0x4a4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a70      	ldr	r2, [pc, #448]	@ (80020f0 <HAL_DMA_Start_IT+0x4a8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6e      	ldr	r2, [pc, #440]	@ (80020f4 <HAL_DMA_Start_IT+0x4ac>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02c      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6d      	ldr	r2, [pc, #436]	@ (80020f8 <HAL_DMA_Start_IT+0x4b0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d027      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80020fc <HAL_DMA_Start_IT+0x4b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6a      	ldr	r2, [pc, #424]	@ (8002100 <HAL_DMA_Start_IT+0x4b8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a68      	ldr	r2, [pc, #416]	@ (8002104 <HAL_DMA_Start_IT+0x4bc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a67      	ldr	r2, [pc, #412]	@ (8002108 <HAL_DMA_Start_IT+0x4c0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a65      	ldr	r2, [pc, #404]	@ (800210c <HAL_DMA_Start_IT+0x4c4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a64      	ldr	r2, [pc, #400]	@ (8002110 <HAL_DMA_Start_IT+0x4c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a62      	ldr	r2, [pc, #392]	@ (8002114 <HAL_DMA_Start_IT+0x4cc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Start_IT+0x350>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a61      	ldr	r2, [pc, #388]	@ (8002118 <HAL_DMA_Start_IT+0x4d0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Start_IT+0x354>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Start_IT+0x356>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01a      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	@ (80020bc <HAL_DMA_Start_IT+0x474>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d04a      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a36      	ldr	r2, [pc, #216]	@ (80020c0 <HAL_DMA_Start_IT+0x478>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d045      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a34      	ldr	r2, [pc, #208]	@ (80020c4 <HAL_DMA_Start_IT+0x47c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d040      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a33      	ldr	r2, [pc, #204]	@ (80020c8 <HAL_DMA_Start_IT+0x480>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d03b      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a31      	ldr	r2, [pc, #196]	@ (80020cc <HAL_DMA_Start_IT+0x484>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d036      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a30      	ldr	r2, [pc, #192]	@ (80020d0 <HAL_DMA_Start_IT+0x488>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d031      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2e      	ldr	r2, [pc, #184]	@ (80020d4 <HAL_DMA_Start_IT+0x48c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02c      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a2d      	ldr	r2, [pc, #180]	@ (80020d8 <HAL_DMA_Start_IT+0x490>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d027      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <HAL_DMA_Start_IT+0x494>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d022      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <HAL_DMA_Start_IT+0x498>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01d      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a28      	ldr	r2, [pc, #160]	@ (80020e4 <HAL_DMA_Start_IT+0x49c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a27      	ldr	r2, [pc, #156]	@ (80020e8 <HAL_DMA_Start_IT+0x4a0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a25      	ldr	r2, [pc, #148]	@ (80020ec <HAL_DMA_Start_IT+0x4a4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a24      	ldr	r2, [pc, #144]	@ (80020f0 <HAL_DMA_Start_IT+0x4a8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <HAL_DMA_Start_IT+0x4ac>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_DMA_Start_IT+0x430>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a21      	ldr	r2, [pc, #132]	@ (80020f8 <HAL_DMA_Start_IT+0x4b0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d108      	bne.n	800208a <HAL_DMA_Start_IT+0x442>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e012      	b.n	80020b0 <HAL_DMA_Start_IT+0x468>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e009      	b.n	80020b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40020010 	.word	0x40020010
 80020c0:	40020028 	.word	0x40020028
 80020c4:	40020040 	.word	0x40020040
 80020c8:	40020058 	.word	0x40020058
 80020cc:	40020070 	.word	0x40020070
 80020d0:	40020088 	.word	0x40020088
 80020d4:	400200a0 	.word	0x400200a0
 80020d8:	400200b8 	.word	0x400200b8
 80020dc:	40020410 	.word	0x40020410
 80020e0:	40020428 	.word	0x40020428
 80020e4:	40020440 	.word	0x40020440
 80020e8:	40020458 	.word	0x40020458
 80020ec:	40020470 	.word	0x40020470
 80020f0:	40020488 	.word	0x40020488
 80020f4:	400204a0 	.word	0x400204a0
 80020f8:	400204b8 	.word	0x400204b8
 80020fc:	58025408 	.word	0x58025408
 8002100:	5802541c 	.word	0x5802541c
 8002104:	58025430 	.word	0x58025430
 8002108:	58025444 	.word	0x58025444
 800210c:	58025458 	.word	0x58025458
 8002110:	5802546c 	.word	0x5802546c
 8002114:	58025480 	.word	0x58025480
 8002118:	58025494 	.word	0x58025494

0800211c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002128:	4b67      	ldr	r3, [pc, #412]	@ (80022c8 <HAL_DMA_IRQHandler+0x1ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a67      	ldr	r2, [pc, #412]	@ (80022cc <HAL_DMA_IRQHandler+0x1b0>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5f      	ldr	r2, [pc, #380]	@ (80022d0 <HAL_DMA_IRQHandler+0x1b4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04a      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5d      	ldr	r2, [pc, #372]	@ (80022d4 <HAL_DMA_IRQHandler+0x1b8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d045      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a5c      	ldr	r2, [pc, #368]	@ (80022d8 <HAL_DMA_IRQHandler+0x1bc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d040      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a5a      	ldr	r2, [pc, #360]	@ (80022dc <HAL_DMA_IRQHandler+0x1c0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d03b      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a59      	ldr	r2, [pc, #356]	@ (80022e0 <HAL_DMA_IRQHandler+0x1c4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d036      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a57      	ldr	r2, [pc, #348]	@ (80022e4 <HAL_DMA_IRQHandler+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d031      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a56      	ldr	r2, [pc, #344]	@ (80022e8 <HAL_DMA_IRQHandler+0x1cc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d02c      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a54      	ldr	r2, [pc, #336]	@ (80022ec <HAL_DMA_IRQHandler+0x1d0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d027      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a53      	ldr	r2, [pc, #332]	@ (80022f0 <HAL_DMA_IRQHandler+0x1d4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a51      	ldr	r2, [pc, #324]	@ (80022f4 <HAL_DMA_IRQHandler+0x1d8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a50      	ldr	r2, [pc, #320]	@ (80022f8 <HAL_DMA_IRQHandler+0x1dc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4e      	ldr	r2, [pc, #312]	@ (80022fc <HAL_DMA_IRQHandler+0x1e0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002300 <HAL_DMA_IRQHandler+0x1e4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00e      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <HAL_DMA_IRQHandler+0x1e8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a4a      	ldr	r2, [pc, #296]	@ (8002308 <HAL_DMA_IRQHandler+0x1ec>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_DMA_IRQHandler+0xd2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a48      	ldr	r2, [pc, #288]	@ (800230c <HAL_DMA_IRQHandler+0x1f0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_IRQHandler+0xd6>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 842b 	beq.w	8002a50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2208      	movs	r2, #8
 8002204:	409a      	lsls	r2, r3
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a2 	beq.w	8002354 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2e      	ldr	r2, [pc, #184]	@ (80022d0 <HAL_DMA_IRQHandler+0x1b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d04a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2d      	ldr	r2, [pc, #180]	@ (80022d4 <HAL_DMA_IRQHandler+0x1b8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d045      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_DMA_IRQHandler+0x1bc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d040      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2a      	ldr	r2, [pc, #168]	@ (80022dc <HAL_DMA_IRQHandler+0x1c0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d03b      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a28      	ldr	r2, [pc, #160]	@ (80022e0 <HAL_DMA_IRQHandler+0x1c4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d036      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <HAL_DMA_IRQHandler+0x1c8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d031      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a25      	ldr	r2, [pc, #148]	@ (80022e8 <HAL_DMA_IRQHandler+0x1cc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02c      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <HAL_DMA_IRQHandler+0x1d0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d027      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a22      	ldr	r2, [pc, #136]	@ (80022f0 <HAL_DMA_IRQHandler+0x1d4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d022      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	@ (80022f4 <HAL_DMA_IRQHandler+0x1d8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d01d      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <HAL_DMA_IRQHandler+0x1dc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d018      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <HAL_DMA_IRQHandler+0x1e0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1c      	ldr	r2, [pc, #112]	@ (8002300 <HAL_DMA_IRQHandler+0x1e4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00e      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1b      	ldr	r2, [pc, #108]	@ (8002304 <HAL_DMA_IRQHandler+0x1e8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_DMA_IRQHandler+0x1ec>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x194>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a18      	ldr	r2, [pc, #96]	@ (800230c <HAL_DMA_IRQHandler+0x1f0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d12f      	bne.n	8002310 <HAL_DMA_IRQHandler+0x1f4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	e02e      	b.n	8002324 <HAL_DMA_IRQHandler+0x208>
 80022c6:	bf00      	nop
 80022c8:	24000000 	.word	0x24000000
 80022cc:	1b4e81b5 	.word	0x1b4e81b5
 80022d0:	40020010 	.word	0x40020010
 80022d4:	40020028 	.word	0x40020028
 80022d8:	40020040 	.word	0x40020040
 80022dc:	40020058 	.word	0x40020058
 80022e0:	40020070 	.word	0x40020070
 80022e4:	40020088 	.word	0x40020088
 80022e8:	400200a0 	.word	0x400200a0
 80022ec:	400200b8 	.word	0x400200b8
 80022f0:	40020410 	.word	0x40020410
 80022f4:	40020428 	.word	0x40020428
 80022f8:	40020440 	.word	0x40020440
 80022fc:	40020458 	.word	0x40020458
 8002300:	40020470 	.word	0x40020470
 8002304:	40020488 	.word	0x40020488
 8002308:	400204a0 	.word	0x400204a0
 800230c:	400204b8 	.word	0x400204b8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2208      	movs	r2, #8
 8002342:	409a      	lsls	r2, r3
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d06e      	beq.n	8002448 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a69      	ldr	r2, [pc, #420]	@ (8002514 <HAL_DMA_IRQHandler+0x3f8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d04a      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a67      	ldr	r2, [pc, #412]	@ (8002518 <HAL_DMA_IRQHandler+0x3fc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d045      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a66      	ldr	r2, [pc, #408]	@ (800251c <HAL_DMA_IRQHandler+0x400>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d040      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a64      	ldr	r2, [pc, #400]	@ (8002520 <HAL_DMA_IRQHandler+0x404>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d03b      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a63      	ldr	r2, [pc, #396]	@ (8002524 <HAL_DMA_IRQHandler+0x408>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d036      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a61      	ldr	r2, [pc, #388]	@ (8002528 <HAL_DMA_IRQHandler+0x40c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a60      	ldr	r2, [pc, #384]	@ (800252c <HAL_DMA_IRQHandler+0x410>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d02c      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002530 <HAL_DMA_IRQHandler+0x414>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d027      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_DMA_IRQHandler+0x418>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d022      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5b      	ldr	r2, [pc, #364]	@ (8002538 <HAL_DMA_IRQHandler+0x41c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01d      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5a      	ldr	r2, [pc, #360]	@ (800253c <HAL_DMA_IRQHandler+0x420>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d018      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a58      	ldr	r2, [pc, #352]	@ (8002540 <HAL_DMA_IRQHandler+0x424>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a57      	ldr	r2, [pc, #348]	@ (8002544 <HAL_DMA_IRQHandler+0x428>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00e      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a55      	ldr	r2, [pc, #340]	@ (8002548 <HAL_DMA_IRQHandler+0x42c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a54      	ldr	r2, [pc, #336]	@ (800254c <HAL_DMA_IRQHandler+0x430>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_DMA_IRQHandler+0x2ee>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a52      	ldr	r2, [pc, #328]	@ (8002550 <HAL_DMA_IRQHandler+0x434>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10a      	bne.n	8002420 <HAL_DMA_IRQHandler+0x304>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e003      	b.n	8002428 <HAL_DMA_IRQHandler+0x30c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2204      	movs	r2, #4
 8002452:	409a      	lsls	r2, r3
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 808f 	beq.w	800257c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2c      	ldr	r2, [pc, #176]	@ (8002514 <HAL_DMA_IRQHandler+0x3f8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04a      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_DMA_IRQHandler+0x3fc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d045      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a29      	ldr	r2, [pc, #164]	@ (800251c <HAL_DMA_IRQHandler+0x400>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d040      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_DMA_IRQHandler+0x404>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d03b      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a26      	ldr	r2, [pc, #152]	@ (8002524 <HAL_DMA_IRQHandler+0x408>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d036      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a24      	ldr	r2, [pc, #144]	@ (8002528 <HAL_DMA_IRQHandler+0x40c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d031      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a23      	ldr	r2, [pc, #140]	@ (800252c <HAL_DMA_IRQHandler+0x410>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d02c      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a21      	ldr	r2, [pc, #132]	@ (8002530 <HAL_DMA_IRQHandler+0x414>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d027      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a20      	ldr	r2, [pc, #128]	@ (8002534 <HAL_DMA_IRQHandler+0x418>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002538 <HAL_DMA_IRQHandler+0x41c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_DMA_IRQHandler+0x420>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_DMA_IRQHandler+0x424>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1a      	ldr	r2, [pc, #104]	@ (8002544 <HAL_DMA_IRQHandler+0x428>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <HAL_DMA_IRQHandler+0x42c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a17      	ldr	r2, [pc, #92]	@ (800254c <HAL_DMA_IRQHandler+0x430>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3e2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a15      	ldr	r2, [pc, #84]	@ (8002550 <HAL_DMA_IRQHandler+0x434>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12a      	bne.n	8002554 <HAL_DMA_IRQHandler+0x438>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e023      	b.n	800255c <HAL_DMA_IRQHandler+0x440>
 8002514:	40020010 	.word	0x40020010
 8002518:	40020028 	.word	0x40020028
 800251c:	40020040 	.word	0x40020040
 8002520:	40020058 	.word	0x40020058
 8002524:	40020070 	.word	0x40020070
 8002528:	40020088 	.word	0x40020088
 800252c:	400200a0 	.word	0x400200a0
 8002530:	400200b8 	.word	0x400200b8
 8002534:	40020410 	.word	0x40020410
 8002538:	40020428 	.word	0x40020428
 800253c:	40020440 	.word	0x40020440
 8002540:	40020458 	.word	0x40020458
 8002544:	40020470 	.word	0x40020470
 8002548:	40020488 	.word	0x40020488
 800254c:	400204a0 	.word	0x400204a0
 8002550:	400204b8 	.word	0x400204b8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2204      	movs	r2, #4
 800256a:	409a      	lsls	r2, r3
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	f043 0204 	orr.w	r2, r3, #4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2210      	movs	r2, #16
 8002586:	409a      	lsls	r2, r3
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a6 	beq.w	80026de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a85      	ldr	r2, [pc, #532]	@ (80027ac <HAL_DMA_IRQHandler+0x690>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d04a      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a83      	ldr	r2, [pc, #524]	@ (80027b0 <HAL_DMA_IRQHandler+0x694>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d045      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a82      	ldr	r2, [pc, #520]	@ (80027b4 <HAL_DMA_IRQHandler+0x698>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d040      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a80      	ldr	r2, [pc, #512]	@ (80027b8 <HAL_DMA_IRQHandler+0x69c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d03b      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7f      	ldr	r2, [pc, #508]	@ (80027bc <HAL_DMA_IRQHandler+0x6a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d036      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7d      	ldr	r2, [pc, #500]	@ (80027c0 <HAL_DMA_IRQHandler+0x6a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d031      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7c      	ldr	r2, [pc, #496]	@ (80027c4 <HAL_DMA_IRQHandler+0x6a8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d02c      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7a      	ldr	r2, [pc, #488]	@ (80027c8 <HAL_DMA_IRQHandler+0x6ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d027      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a79      	ldr	r2, [pc, #484]	@ (80027cc <HAL_DMA_IRQHandler+0x6b0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a77      	ldr	r2, [pc, #476]	@ (80027d0 <HAL_DMA_IRQHandler+0x6b4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01d      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a76      	ldr	r2, [pc, #472]	@ (80027d4 <HAL_DMA_IRQHandler+0x6b8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d018      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a74      	ldr	r2, [pc, #464]	@ (80027d8 <HAL_DMA_IRQHandler+0x6bc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a73      	ldr	r2, [pc, #460]	@ (80027dc <HAL_DMA_IRQHandler+0x6c0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00e      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a71      	ldr	r2, [pc, #452]	@ (80027e0 <HAL_DMA_IRQHandler+0x6c4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a70      	ldr	r2, [pc, #448]	@ (80027e4 <HAL_DMA_IRQHandler+0x6c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_DMA_IRQHandler+0x516>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6e      	ldr	r2, [pc, #440]	@ (80027e8 <HAL_DMA_IRQHandler+0x6cc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10a      	bne.n	8002648 <HAL_DMA_IRQHandler+0x52c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e009      	b.n	800265c <HAL_DMA_IRQHandler+0x540>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d03e      	beq.n	80026de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2210      	movs	r2, #16
 800266a:	409a      	lsls	r2, r3
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d024      	beq.n	80026de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e01f      	b.n	80026de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01b      	beq.n	80026de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e016      	b.n	80026de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0208 	bic.w	r2, r2, #8
 80026cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2220      	movs	r2, #32
 80026e8:	409a      	lsls	r2, r3
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8110 	beq.w	8002914 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2c      	ldr	r2, [pc, #176]	@ (80027ac <HAL_DMA_IRQHandler+0x690>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d04a      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2b      	ldr	r2, [pc, #172]	@ (80027b0 <HAL_DMA_IRQHandler+0x694>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d045      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	@ (80027b4 <HAL_DMA_IRQHandler+0x698>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d040      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a28      	ldr	r2, [pc, #160]	@ (80027b8 <HAL_DMA_IRQHandler+0x69c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d03b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <HAL_DMA_IRQHandler+0x6a0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d036      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a25      	ldr	r2, [pc, #148]	@ (80027c0 <HAL_DMA_IRQHandler+0x6a4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d031      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a23      	ldr	r2, [pc, #140]	@ (80027c4 <HAL_DMA_IRQHandler+0x6a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <HAL_DMA_IRQHandler+0x6ac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d027      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a20      	ldr	r2, [pc, #128]	@ (80027cc <HAL_DMA_IRQHandler+0x6b0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d022      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1f      	ldr	r2, [pc, #124]	@ (80027d0 <HAL_DMA_IRQHandler+0x6b4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01d      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_DMA_IRQHandler+0x6b8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d018      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <HAL_DMA_IRQHandler+0x6bc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_DMA_IRQHandler+0x6c0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00e      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a19      	ldr	r2, [pc, #100]	@ (80027e0 <HAL_DMA_IRQHandler+0x6c4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <HAL_DMA_IRQHandler+0x6c8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_DMA_IRQHandler+0x678>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <HAL_DMA_IRQHandler+0x6cc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d12b      	bne.n	80027ec <HAL_DMA_IRQHandler+0x6d0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e02a      	b.n	8002800 <HAL_DMA_IRQHandler+0x6e4>
 80027aa:	bf00      	nop
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8087 	beq.w	8002914 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2220      	movs	r2, #32
 8002810:	409a      	lsls	r2, r3
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b04      	cmp	r3, #4
 8002820:	d139      	bne.n	8002896 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0216 	bic.w	r2, r2, #22
 8002830:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002840:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_DMA_IRQHandler+0x736>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0208 	bic.w	r2, r2, #8
 8002860:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	223f      	movs	r2, #63	@ 0x3f
 800286c:	409a      	lsls	r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 834a 	beq.w	8002f20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
          }
          return;
 8002894:	e344      	b.n	8002f20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02c      	beq.n	8002914 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e027      	b.n	8002914 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e01e      	b.n	8002914 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10f      	bne.n	8002904 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0210 	bic.w	r2, r2, #16
 80028f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8306 	beq.w	8002f2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8088 	beq.w	8002a3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2204      	movs	r2, #4
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a7a      	ldr	r2, [pc, #488]	@ (8002b24 <HAL_DMA_IRQHandler+0xa08>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d04a      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a79      	ldr	r2, [pc, #484]	@ (8002b28 <HAL_DMA_IRQHandler+0xa0c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d045      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a77      	ldr	r2, [pc, #476]	@ (8002b2c <HAL_DMA_IRQHandler+0xa10>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d040      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a76      	ldr	r2, [pc, #472]	@ (8002b30 <HAL_DMA_IRQHandler+0xa14>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d03b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a74      	ldr	r2, [pc, #464]	@ (8002b34 <HAL_DMA_IRQHandler+0xa18>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d036      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a73      	ldr	r2, [pc, #460]	@ (8002b38 <HAL_DMA_IRQHandler+0xa1c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d031      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a71      	ldr	r2, [pc, #452]	@ (8002b3c <HAL_DMA_IRQHandler+0xa20>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02c      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a70      	ldr	r2, [pc, #448]	@ (8002b40 <HAL_DMA_IRQHandler+0xa24>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d027      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6e      	ldr	r2, [pc, #440]	@ (8002b44 <HAL_DMA_IRQHandler+0xa28>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d022      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6d      	ldr	r2, [pc, #436]	@ (8002b48 <HAL_DMA_IRQHandler+0xa2c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d01d      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b4c <HAL_DMA_IRQHandler+0xa30>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d018      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002b50 <HAL_DMA_IRQHandler+0xa34>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a68      	ldr	r2, [pc, #416]	@ (8002b54 <HAL_DMA_IRQHandler+0xa38>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a67      	ldr	r2, [pc, #412]	@ (8002b58 <HAL_DMA_IRQHandler+0xa3c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <HAL_DMA_IRQHandler+0xa40>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x8b8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a64      	ldr	r2, [pc, #400]	@ (8002b60 <HAL_DMA_IRQHandler+0xa44>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d108      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x8ca>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_DMA_IRQHandler+0x8da>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3301      	adds	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d307      	bcc.n	8002a12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f2      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x8da>
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2203      	movs	r2, #3
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002a2a:	e003      	b.n	8002a34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8272 	beq.w	8002f2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
 8002a4e:	e26c      	b.n	8002f2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a43      	ldr	r2, [pc, #268]	@ (8002b64 <HAL_DMA_IRQHandler+0xa48>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d022      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a42      	ldr	r2, [pc, #264]	@ (8002b68 <HAL_DMA_IRQHandler+0xa4c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d01d      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a40      	ldr	r2, [pc, #256]	@ (8002b6c <HAL_DMA_IRQHandler+0xa50>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d018      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a3f      	ldr	r2, [pc, #252]	@ (8002b70 <HAL_DMA_IRQHandler+0xa54>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b74 <HAL_DMA_IRQHandler+0xa58>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3c      	ldr	r2, [pc, #240]	@ (8002b78 <HAL_DMA_IRQHandler+0xa5c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3a      	ldr	r2, [pc, #232]	@ (8002b7c <HAL_DMA_IRQHandler+0xa60>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x984>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a39      	ldr	r2, [pc, #228]	@ (8002b80 <HAL_DMA_IRQHandler+0xa64>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x988>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_DMA_IRQHandler+0x98a>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 823f 	beq.w	8002f2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2204      	movs	r2, #4
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80cd 	beq.w	8002c64 <HAL_DMA_IRQHandler+0xb48>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80c7 	beq.w	8002c64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2204      	movs	r2, #4
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d049      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8210 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b0c:	e20a      	b.n	8002f24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8206 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b20:	e200      	b.n	8002f24 <HAL_DMA_IRQHandler+0xe08>
 8002b22:	bf00      	nop
 8002b24:	40020010 	.word	0x40020010
 8002b28:	40020028 	.word	0x40020028
 8002b2c:	40020040 	.word	0x40020040
 8002b30:	40020058 	.word	0x40020058
 8002b34:	40020070 	.word	0x40020070
 8002b38:	40020088 	.word	0x40020088
 8002b3c:	400200a0 	.word	0x400200a0
 8002b40:	400200b8 	.word	0x400200b8
 8002b44:	40020410 	.word	0x40020410
 8002b48:	40020428 	.word	0x40020428
 8002b4c:	40020440 	.word	0x40020440
 8002b50:	40020458 	.word	0x40020458
 8002b54:	40020470 	.word	0x40020470
 8002b58:	40020488 	.word	0x40020488
 8002b5c:	400204a0 	.word	0x400204a0
 8002b60:	400204b8 	.word	0x400204b8
 8002b64:	58025408 	.word	0x58025408
 8002b68:	5802541c 	.word	0x5802541c
 8002b6c:	58025430 	.word	0x58025430
 8002b70:	58025444 	.word	0x58025444
 8002b74:	58025458 	.word	0x58025458
 8002b78:	5802546c 	.word	0x5802546c
 8002b7c:	58025480 	.word	0x58025480
 8002b80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d160      	bne.n	8002c50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7f      	ldr	r2, [pc, #508]	@ (8002d90 <HAL_DMA_IRQHandler+0xc74>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04a      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7d      	ldr	r2, [pc, #500]	@ (8002d94 <HAL_DMA_IRQHandler+0xc78>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d045      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8002d98 <HAL_DMA_IRQHandler+0xc7c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7a      	ldr	r2, [pc, #488]	@ (8002d9c <HAL_DMA_IRQHandler+0xc80>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d03b      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a79      	ldr	r2, [pc, #484]	@ (8002da0 <HAL_DMA_IRQHandler+0xc84>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a77      	ldr	r2, [pc, #476]	@ (8002da4 <HAL_DMA_IRQHandler+0xc88>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a76      	ldr	r2, [pc, #472]	@ (8002da8 <HAL_DMA_IRQHandler+0xc8c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d02c      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a74      	ldr	r2, [pc, #464]	@ (8002dac <HAL_DMA_IRQHandler+0xc90>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a73      	ldr	r2, [pc, #460]	@ (8002db0 <HAL_DMA_IRQHandler+0xc94>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a71      	ldr	r2, [pc, #452]	@ (8002db4 <HAL_DMA_IRQHandler+0xc98>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a70      	ldr	r2, [pc, #448]	@ (8002db8 <HAL_DMA_IRQHandler+0xc9c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	@ (8002dbc <HAL_DMA_IRQHandler+0xca0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8002dc0 <HAL_DMA_IRQHandler+0xca4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6b      	ldr	r2, [pc, #428]	@ (8002dc4 <HAL_DMA_IRQHandler+0xca8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6a      	ldr	r2, [pc, #424]	@ (8002dc8 <HAL_DMA_IRQHandler+0xcac>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb12>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a68      	ldr	r2, [pc, #416]	@ (8002dcc <HAL_DMA_IRQHandler+0xcb0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <HAL_DMA_IRQHandler+0xb24>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e007      	b.n	8002c50 <HAL_DMA_IRQHandler+0xb34>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8165 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c62:	e15f      	b.n	8002f24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80c5 	beq.w	8002e04 <HAL_DMA_IRQHandler+0xce8>
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80bf 	beq.w	8002e04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2202      	movs	r2, #2
 8002c90:	409a      	lsls	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d018      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 813a 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cbc:	e134      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8130 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd0:	e12a      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 8089 	bne.w	8002df0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d90 <HAL_DMA_IRQHandler+0xc74>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04a      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a29      	ldr	r2, [pc, #164]	@ (8002d94 <HAL_DMA_IRQHandler+0xc78>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d045      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a28      	ldr	r2, [pc, #160]	@ (8002d98 <HAL_DMA_IRQHandler+0xc7c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <HAL_DMA_IRQHandler+0xc80>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	@ (8002da0 <HAL_DMA_IRQHandler+0xc84>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a23      	ldr	r2, [pc, #140]	@ (8002da4 <HAL_DMA_IRQHandler+0xc88>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_DMA_IRQHandler+0xc8c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d02c      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a20      	ldr	r2, [pc, #128]	@ (8002dac <HAL_DMA_IRQHandler+0xc90>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <HAL_DMA_IRQHandler+0xc94>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <HAL_DMA_IRQHandler+0xc98>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_DMA_IRQHandler+0xc9c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1a      	ldr	r2, [pc, #104]	@ (8002dbc <HAL_DMA_IRQHandler+0xca0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	@ (8002dc0 <HAL_DMA_IRQHandler+0xca4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <HAL_DMA_IRQHandler+0xca8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <HAL_DMA_IRQHandler+0xcac>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xc62>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <HAL_DMA_IRQHandler+0xcb0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d128      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0xcb4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0214 	bic.w	r2, r2, #20
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e027      	b.n	8002de0 <HAL_DMA_IRQHandler+0xcc4>
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020a 	bic.w	r2, r2, #10
 8002dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e02:	e091      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8088 	beq.w	8002f2a <HAL_DMA_IRQHandler+0xe0e>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8082 	beq.w	8002f2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a41      	ldr	r2, [pc, #260]	@ (8002f30 <HAL_DMA_IRQHandler+0xe14>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d04a      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3f      	ldr	r2, [pc, #252]	@ (8002f34 <HAL_DMA_IRQHandler+0xe18>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d045      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f38 <HAL_DMA_IRQHandler+0xe1c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d040      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3c      	ldr	r2, [pc, #240]	@ (8002f3c <HAL_DMA_IRQHandler+0xe20>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d03b      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a3b      	ldr	r2, [pc, #236]	@ (8002f40 <HAL_DMA_IRQHandler+0xe24>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d036      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a39      	ldr	r2, [pc, #228]	@ (8002f44 <HAL_DMA_IRQHandler+0xe28>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d031      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a38      	ldr	r2, [pc, #224]	@ (8002f48 <HAL_DMA_IRQHandler+0xe2c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d02c      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a36      	ldr	r2, [pc, #216]	@ (8002f4c <HAL_DMA_IRQHandler+0xe30>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d027      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a35      	ldr	r2, [pc, #212]	@ (8002f50 <HAL_DMA_IRQHandler+0xe34>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a33      	ldr	r2, [pc, #204]	@ (8002f54 <HAL_DMA_IRQHandler+0xe38>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01d      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <HAL_DMA_IRQHandler+0xe3c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <HAL_DMA_IRQHandler+0xe40>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f60 <HAL_DMA_IRQHandler+0xe44>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2d      	ldr	r2, [pc, #180]	@ (8002f64 <HAL_DMA_IRQHandler+0xe48>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f68 <HAL_DMA_IRQHandler+0xe4c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xdaa>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <HAL_DMA_IRQHandler+0xe50>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0xdbc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 021c 	bic.w	r2, r2, #28
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e007      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xdcc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 020e 	bic.w	r2, r2, #14
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
 8002f1e:	e004      	b.n	8002f2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f2a:	3728      	adds	r7, #40	@ 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40020010 	.word	0x40020010
 8002f34:	40020028 	.word	0x40020028
 8002f38:	40020040 	.word	0x40020040
 8002f3c:	40020058 	.word	0x40020058
 8002f40:	40020070 	.word	0x40020070
 8002f44:	40020088 	.word	0x40020088
 8002f48:	400200a0 	.word	0x400200a0
 8002f4c:	400200b8 	.word	0x400200b8
 8002f50:	40020410 	.word	0x40020410
 8002f54:	40020428 	.word	0x40020428
 8002f58:	40020440 	.word	0x40020440
 8002f5c:	40020458 	.word	0x40020458
 8002f60:	40020470 	.word	0x40020470
 8002f64:	40020488 	.word	0x40020488
 8002f68:	400204a0 	.word	0x400204a0
 8002f6c:	400204b8 	.word	0x400204b8

08002f70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	@ (800318c <DMA_SetConfig+0x21c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d072      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a7d      	ldr	r2, [pc, #500]	@ (8003190 <DMA_SetConfig+0x220>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d06d      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8003194 <DMA_SetConfig+0x224>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d068      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7a      	ldr	r2, [pc, #488]	@ (8003198 <DMA_SetConfig+0x228>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d063      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	@ (800319c <DMA_SetConfig+0x22c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d05e      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a77      	ldr	r2, [pc, #476]	@ (80031a0 <DMA_SetConfig+0x230>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d059      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a76      	ldr	r2, [pc, #472]	@ (80031a4 <DMA_SetConfig+0x234>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d054      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a74      	ldr	r2, [pc, #464]	@ (80031a8 <DMA_SetConfig+0x238>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04f      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	@ (80031ac <DMA_SetConfig+0x23c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04a      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a71      	ldr	r2, [pc, #452]	@ (80031b0 <DMA_SetConfig+0x240>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d045      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a70      	ldr	r2, [pc, #448]	@ (80031b4 <DMA_SetConfig+0x244>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <DMA_SetConfig+0x10a>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80031b8 <DMA_SetConfig+0x248>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03b      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6d      	ldr	r2, [pc, #436]	@ (80031bc <DMA_SetConfig+0x24c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d036      	beq.n	800307a <DMA_SetConfig+0x10a>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6b      	ldr	r2, [pc, #428]	@ (80031c0 <DMA_SetConfig+0x250>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6a      	ldr	r2, [pc, #424]	@ (80031c4 <DMA_SetConfig+0x254>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d02c      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a68      	ldr	r2, [pc, #416]	@ (80031c8 <DMA_SetConfig+0x258>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <DMA_SetConfig+0x10a>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a67      	ldr	r2, [pc, #412]	@ (80031cc <DMA_SetConfig+0x25c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a65      	ldr	r2, [pc, #404]	@ (80031d0 <DMA_SetConfig+0x260>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <DMA_SetConfig+0x10a>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a64      	ldr	r2, [pc, #400]	@ (80031d4 <DMA_SetConfig+0x264>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a62      	ldr	r2, [pc, #392]	@ (80031d8 <DMA_SetConfig+0x268>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a61      	ldr	r2, [pc, #388]	@ (80031dc <DMA_SetConfig+0x26c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <DMA_SetConfig+0x10a>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5f      	ldr	r2, [pc, #380]	@ (80031e0 <DMA_SetConfig+0x270>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5e      	ldr	r2, [pc, #376]	@ (80031e4 <DMA_SetConfig+0x274>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <DMA_SetConfig+0x10a>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a5c      	ldr	r2, [pc, #368]	@ (80031e8 <DMA_SetConfig+0x278>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <DMA_SetConfig+0x10e>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <DMA_SetConfig+0x110>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800308c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800309e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a39      	ldr	r2, [pc, #228]	@ (800318c <DMA_SetConfig+0x21c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04a      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a38      	ldr	r2, [pc, #224]	@ (8003190 <DMA_SetConfig+0x220>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d045      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a36      	ldr	r2, [pc, #216]	@ (8003194 <DMA_SetConfig+0x224>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d040      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a35      	ldr	r2, [pc, #212]	@ (8003198 <DMA_SetConfig+0x228>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03b      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a33      	ldr	r2, [pc, #204]	@ (800319c <DMA_SetConfig+0x22c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d036      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <DMA_SetConfig+0x230>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d031      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <DMA_SetConfig+0x234>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02c      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2f      	ldr	r2, [pc, #188]	@ (80031a8 <DMA_SetConfig+0x238>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <DMA_SetConfig+0x23c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2c      	ldr	r2, [pc, #176]	@ (80031b0 <DMA_SetConfig+0x240>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2a      	ldr	r2, [pc, #168]	@ (80031b4 <DMA_SetConfig+0x244>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a29      	ldr	r2, [pc, #164]	@ (80031b8 <DMA_SetConfig+0x248>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <DMA_SetConfig+0x24c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <DMA_SetConfig+0x250>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a24      	ldr	r2, [pc, #144]	@ (80031c4 <DMA_SetConfig+0x254>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <DMA_SetConfig+0x1d0>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <DMA_SetConfig+0x258>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <DMA_SetConfig+0x1d4>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <DMA_SetConfig+0x1d6>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d059      	beq.n	80031fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	223f      	movs	r2, #63	@ 0x3f
 8003154:	409a      	lsls	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003168:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b40      	cmp	r3, #64	@ 0x40
 8003178:	d138      	bne.n	80031ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800318a:	e086      	b.n	800329a <DMA_SetConfig+0x32a>
 800318c:	40020010 	.word	0x40020010
 8003190:	40020028 	.word	0x40020028
 8003194:	40020040 	.word	0x40020040
 8003198:	40020058 	.word	0x40020058
 800319c:	40020070 	.word	0x40020070
 80031a0:	40020088 	.word	0x40020088
 80031a4:	400200a0 	.word	0x400200a0
 80031a8:	400200b8 	.word	0x400200b8
 80031ac:	40020410 	.word	0x40020410
 80031b0:	40020428 	.word	0x40020428
 80031b4:	40020440 	.word	0x40020440
 80031b8:	40020458 	.word	0x40020458
 80031bc:	40020470 	.word	0x40020470
 80031c0:	40020488 	.word	0x40020488
 80031c4:	400204a0 	.word	0x400204a0
 80031c8:	400204b8 	.word	0x400204b8
 80031cc:	58025408 	.word	0x58025408
 80031d0:	5802541c 	.word	0x5802541c
 80031d4:	58025430 	.word	0x58025430
 80031d8:	58025444 	.word	0x58025444
 80031dc:	58025458 	.word	0x58025458
 80031e0:	5802546c 	.word	0x5802546c
 80031e4:	58025480 	.word	0x58025480
 80031e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	e04d      	b.n	800329a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a29      	ldr	r2, [pc, #164]	@ (80032a8 <DMA_SetConfig+0x338>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <DMA_SetConfig+0x2de>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a27      	ldr	r2, [pc, #156]	@ (80032ac <DMA_SetConfig+0x33c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <DMA_SetConfig+0x2de>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a26      	ldr	r2, [pc, #152]	@ (80032b0 <DMA_SetConfig+0x340>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <DMA_SetConfig+0x2de>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a24      	ldr	r2, [pc, #144]	@ (80032b4 <DMA_SetConfig+0x344>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <DMA_SetConfig+0x2de>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a23      	ldr	r2, [pc, #140]	@ (80032b8 <DMA_SetConfig+0x348>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <DMA_SetConfig+0x2de>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <DMA_SetConfig+0x34c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <DMA_SetConfig+0x2de>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a20      	ldr	r2, [pc, #128]	@ (80032c0 <DMA_SetConfig+0x350>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <DMA_SetConfig+0x2de>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <DMA_SetConfig+0x354>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <DMA_SetConfig+0x2e2>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <DMA_SetConfig+0x2e4>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d108      	bne.n	800328a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	60da      	str	r2, [r3, #12]
}
 8003288:	e007      	b.n	800329a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	60da      	str	r2, [r3, #12]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	58025408 	.word	0x58025408
 80032ac:	5802541c 	.word	0x5802541c
 80032b0:	58025430 	.word	0x58025430
 80032b4:	58025444 	.word	0x58025444
 80032b8:	58025458 	.word	0x58025458
 80032bc:	5802546c 	.word	0x5802546c
 80032c0:	58025480 	.word	0x58025480
 80032c4:	58025494 	.word	0x58025494

080032c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a42      	ldr	r2, [pc, #264]	@ (80033e0 <DMA_CalcBaseAndBitshift+0x118>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d04a      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a41      	ldr	r2, [pc, #260]	@ (80033e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d045      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3f      	ldr	r2, [pc, #252]	@ (80033e8 <DMA_CalcBaseAndBitshift+0x120>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d040      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3e      	ldr	r2, [pc, #248]	@ (80033ec <DMA_CalcBaseAndBitshift+0x124>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d03b      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a3c      	ldr	r2, [pc, #240]	@ (80033f0 <DMA_CalcBaseAndBitshift+0x128>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d036      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a3b      	ldr	r2, [pc, #236]	@ (80033f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d031      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a39      	ldr	r2, [pc, #228]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02c      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <DMA_CalcBaseAndBitshift+0x134>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d027      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a36      	ldr	r2, [pc, #216]	@ (8003400 <DMA_CalcBaseAndBitshift+0x138>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a35      	ldr	r2, [pc, #212]	@ (8003404 <DMA_CalcBaseAndBitshift+0x13c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01d      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a33      	ldr	r2, [pc, #204]	@ (8003408 <DMA_CalcBaseAndBitshift+0x140>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a32      	ldr	r2, [pc, #200]	@ (800340c <DMA_CalcBaseAndBitshift+0x144>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a30      	ldr	r2, [pc, #192]	@ (8003410 <DMA_CalcBaseAndBitshift+0x148>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2f      	ldr	r2, [pc, #188]	@ (8003414 <DMA_CalcBaseAndBitshift+0x14c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <DMA_CalcBaseAndBitshift+0x150>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <DMA_CalcBaseAndBitshift+0xa8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2c      	ldr	r2, [pc, #176]	@ (800341c <DMA_CalcBaseAndBitshift+0x154>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <DMA_CalcBaseAndBitshift+0xac>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <DMA_CalcBaseAndBitshift+0xae>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d024      	beq.n	80033c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3b10      	subs	r3, #16
 8003382:	4a27      	ldr	r2, [pc, #156]	@ (8003420 <DMA_CalcBaseAndBitshift+0x158>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	4a24      	ldr	r2, [pc, #144]	@ (8003424 <DMA_CalcBaseAndBitshift+0x15c>)
 8003394:	5cd3      	ldrb	r3, [r2, r3]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d908      	bls.n	80033b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003428 <DMA_CalcBaseAndBitshift+0x160>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80033b2:	e00d      	b.n	80033d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <DMA_CalcBaseAndBitshift+0x160>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c2:	e005      	b.n	80033d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
 8003420:	aaaaaaab 	.word	0xaaaaaaab
 8003424:	0800ad58 	.word	0x0800ad58
 8003428:	fffffc00 	.word	0xfffffc00

0800342c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d120      	bne.n	8003482 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	2b03      	cmp	r3, #3
 8003446:	d858      	bhi.n	80034fa <DMA_CheckFifoParam+0xce>
 8003448:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <DMA_CheckFifoParam+0x24>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003461 	.word	0x08003461
 8003454:	08003473 	.word	0x08003473
 8003458:	08003461 	.word	0x08003461
 800345c:	080034fb 	.word	0x080034fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d048      	beq.n	80034fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003470:	e045      	b.n	80034fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800347a:	d142      	bne.n	8003502 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003480:	e03f      	b.n	8003502 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348a:	d123      	bne.n	80034d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	2b03      	cmp	r3, #3
 8003492:	d838      	bhi.n	8003506 <DMA_CheckFifoParam+0xda>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <DMA_CheckFifoParam+0x70>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b3 	.word	0x080034b3
 80034a4:	080034ad 	.word	0x080034ad
 80034a8:	080034c5 	.word	0x080034c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
        break;
 80034b0:	e030      	b.n	8003514 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d025      	beq.n	800350a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034c2:	e022      	b.n	800350a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034cc:	d11f      	bne.n	800350e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034d2:	e01c      	b.n	800350e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d902      	bls.n	80034e2 <DMA_CheckFifoParam+0xb6>
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d003      	beq.n	80034e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80034e0:	e018      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
        break;
 80034e6:	e015      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
    break;
 80034f8:	e00b      	b.n	8003512 <DMA_CheckFifoParam+0xe6>
        break;
 80034fa:	bf00      	nop
 80034fc:	e00a      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        break;
 80034fe:	bf00      	nop
 8003500:	e008      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        break;
 8003502:	bf00      	nop
 8003504:	e006      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        break;
 8003506:	bf00      	nop
 8003508:	e004      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        break;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
        break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
    break;
 8003512:	bf00      	nop
    }
  }

  return status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a38      	ldr	r2, [pc, #224]	@ (8003618 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a36      	ldr	r2, [pc, #216]	@ (800361c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a35      	ldr	r2, [pc, #212]	@ (8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a33      	ldr	r2, [pc, #204]	@ (8003624 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a32      	ldr	r2, [pc, #200]	@ (8003628 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a30      	ldr	r2, [pc, #192]	@ (800362c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2f      	ldr	r2, [pc, #188]	@ (8003630 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2d      	ldr	r2, [pc, #180]	@ (8003634 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01a      	beq.n	80035c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3b08      	subs	r3, #8
 8003594:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4b26      	ldr	r3, [pc, #152]	@ (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a24      	ldr	r2, [pc, #144]	@ (8003640 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80035b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2201      	movs	r2, #1
 80035ba:	409a      	lsls	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80035c0:	e024      	b.n	800360c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3b10      	subs	r3, #16
 80035ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003644 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003648 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d806      	bhi.n	80035ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a1b      	ldr	r2, [pc, #108]	@ (800364c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d902      	bls.n	80035ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3308      	adds	r3, #8
 80035e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4b18      	ldr	r3, [pc, #96]	@ (8003650 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80035fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	58025408 	.word	0x58025408
 800361c:	5802541c 	.word	0x5802541c
 8003620:	58025430 	.word	0x58025430
 8003624:	58025444 	.word	0x58025444
 8003628:	58025458 	.word	0x58025458
 800362c:	5802546c 	.word	0x5802546c
 8003630:	58025480 	.word	0x58025480
 8003634:	58025494 	.word	0x58025494
 8003638:	cccccccd 	.word	0xcccccccd
 800363c:	16009600 	.word	0x16009600
 8003640:	58025880 	.word	0x58025880
 8003644:	aaaaaaab 	.word	0xaaaaaaab
 8003648:	400204b8 	.word	0x400204b8
 800364c:	4002040f 	.word	0x4002040f
 8003650:	10008200 	.word	0x10008200
 8003654:	40020880 	.word	0x40020880

08003658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d04a      	beq.n	8003704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d847      	bhi.n	8003704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a25      	ldr	r2, [pc, #148]	@ (8003710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d022      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01d      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a21      	ldr	r2, [pc, #132]	@ (800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80036c8:	2300      	movs	r3, #0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4b17      	ldr	r3, [pc, #92]	@ (8003730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80036e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80036e2:	e009      	b.n	80036f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4b14      	ldr	r3, [pc, #80]	@ (8003738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a11      	ldr	r2, [pc, #68]	@ (800373c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80036f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	58025408 	.word	0x58025408
 8003714:	5802541c 	.word	0x5802541c
 8003718:	58025430 	.word	0x58025430
 800371c:	58025444 	.word	0x58025444
 8003720:	58025458 	.word	0x58025458
 8003724:	5802546c 	.word	0x5802546c
 8003728:	58025480 	.word	0x58025480
 800372c:	58025494 	.word	0x58025494
 8003730:	1600963f 	.word	0x1600963f
 8003734:	58025940 	.word	0x58025940
 8003738:	1000823f 	.word	0x1000823f
 800373c:	40020940 	.word	0x40020940

08003740 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0e3      	b.n	800391a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2223      	movs	r2, #35	@ 0x23
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fd faf3 	bl	8000d50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	4b6e      	ldr	r3, [pc, #440]	@ (8003924 <HAL_ETH_Init+0x1e4>)
 800376c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003770:	4a6c      	ldr	r2, [pc, #432]	@ (8003924 <HAL_ETH_Init+0x1e4>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800377a:	4b6a      	ldr	r3, [pc, #424]	@ (8003924 <HAL_ETH_Init+0x1e4>)
 800377c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7a1b      	ldrb	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd fe0d 	bl	80013b0 <HAL_SYSCFG_ETHInterfaceSelect>
 8003796:	e003      	b.n	80037a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003798:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800379c:	f7fd fe08 	bl	80013b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80037a0:	4b61      	ldr	r3, [pc, #388]	@ (8003928 <HAL_ETH_Init+0x1e8>)
 80037a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037bc:	f7fd fdec 	bl	8001398 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80037c2:	e011      	b.n	80037e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80037c4:	f7fd fde8 	bl	8001398 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037d2:	d909      	bls.n	80037e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	22e0      	movs	r2, #224	@ 0xe0
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e098      	b.n	800391a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e4      	bne.n	80037c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f89e 	bl	800393c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003800:	f001 fcd8 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8003804:	4603      	mov	r3, r0
 8003806:	4a49      	ldr	r2, [pc, #292]	@ (800392c <HAL_ETH_Init+0x1ec>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	0c9a      	lsrs	r2, r3, #18
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3a01      	subs	r2, #1
 8003814:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fa81 	bl	8003d20 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003826:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800382a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003836:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800383a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	22e0      	movs	r2, #224	@ 0xe0
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e05d      	b.n	800391a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003866:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_ETH_Init+0x1f0>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6952      	ldr	r2, [r2, #20]
 8003872:	0051      	lsls	r1, r2, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800387e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fae9 	bl	8003e5a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fb2f 	bl	8003eec <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	3305      	adds	r3, #5
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	3303      	adds	r3, #3
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	061a      	lsls	r2, r3, #24
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	3302      	adds	r3, #2
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80038da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038dc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <HAL_ETH_Init+0x1f4>)
 80038ee:	430b      	orrs	r3, r1
 80038f0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <HAL_ETH_Init+0x1f8>)
 8003902:	430b      	orrs	r3, r1
 8003904:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2210      	movs	r2, #16
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	58024400 	.word	0x58024400
 8003928:	58000400 	.word	0x58000400
 800392c:	431bde83 	.word	0x431bde83
 8003930:	ffff8001 	.word	0xffff8001
 8003934:	0c020060 	.word	0x0c020060
 8003938:	0c20c000 	.word	0x0c20c000

0800393c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800394c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003954:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003956:	f001 fc2d 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 800395a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d804      	bhi.n	800396e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e022      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <HAL_ETH_SetMDIOClockRange+0x90>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d204      	bcs.n	8003980 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	e019      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d915      	bls.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d804      	bhi.n	800399a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e00c      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4a0e      	ldr	r2, [pc, #56]	@ (80039d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d804      	bhi.n	80039ac <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e003      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	02160ebf 	.word	0x02160ebf
 80039cc:	03938700 	.word	0x03938700
 80039d0:	05f5e0ff 	.word	0x05f5e0ff
 80039d4:	08f0d17f 	.word	0x08f0d17f
 80039d8:	0ee6b27f 	.word	0x0ee6b27f

080039dc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80039ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	791b      	ldrb	r3, [r3, #4]
 80039f4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80039f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	7b1b      	ldrb	r3, [r3, #12]
 80039fc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	7b5b      	ldrb	r3, [r3, #13]
 8003a04:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	7b9b      	ldrb	r3, [r3, #14]
 8003a0c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	7bdb      	ldrb	r3, [r3, #15]
 8003a14:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	7c12      	ldrb	r2, [r2, #16]
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	d102      	bne.n	8003a26 <ETH_SetMACConfig+0x4a>
 8003a20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003a24:	e000      	b.n	8003a28 <ETH_SetMACConfig+0x4c>
 8003a26:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003a28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	7c52      	ldrb	r2, [r2, #17]
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d102      	bne.n	8003a38 <ETH_SetMACConfig+0x5c>
 8003a32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a36:	e000      	b.n	8003a3a <ETH_SetMACConfig+0x5e>
 8003a38:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	7c9b      	ldrb	r3, [r3, #18]
 8003a40:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a42:	431a      	orrs	r2, r3
               macconf->Speed |
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003a48:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	7f1b      	ldrb	r3, [r3, #28]
 8003a54:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	7f5b      	ldrb	r3, [r3, #29]
 8003a5c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	7f92      	ldrb	r2, [r2, #30]
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d102      	bne.n	8003a6e <ETH_SetMACConfig+0x92>
 8003a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a6c:	e000      	b.n	8003a70 <ETH_SetMACConfig+0x94>
 8003a6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a70:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	7fdb      	ldrb	r3, [r3, #31]
 8003a76:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a80:	2a00      	cmp	r2, #0
 8003a82:	d102      	bne.n	8003a8a <ETH_SetMACConfig+0xae>
 8003a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a88:	e000      	b.n	8003a8c <ETH_SetMACConfig+0xb0>
 8003a8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a8c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a9a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003a9c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b56      	ldr	r3, [pc, #344]	@ (8003c08 <ETH_SetMACConfig+0x22c>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	68f9      	ldr	r1, [r7, #12]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ac6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ac8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ad0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003ad2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ada:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003adc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d102      	bne.n	8003aee <ETH_SetMACConfig+0x112>
 8003ae8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003aec:	e000      	b.n	8003af0 <ETH_SetMACConfig+0x114>
 8003aee:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003af0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	4b42      	ldr	r3, [pc, #264]	@ (8003c0c <ETH_SetMACConfig+0x230>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b14:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	4b3a      	ldr	r3, [pc, #232]	@ (8003c10 <ETH_SetMACConfig+0x234>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b38:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	d101      	bne.n	8003b4e <ETH_SetMACConfig+0x172>
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	e000      	b.n	8003b50 <ETH_SetMACConfig+0x174>
 8003b4e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003b50:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b56:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b62:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003b66:	4013      	ands	r3, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	68f9      	ldr	r1, [r7, #12]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003b78:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003b80:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	f023 0103 	bic.w	r1, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003ba6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d101      	bne.n	8003bca <ETH_SetMACConfig+0x1ee>
 8003bc6:	2240      	movs	r2, #64	@ 0x40
 8003bc8:	e000      	b.n	8003bcc <ETH_SetMACConfig+0x1f0>
 8003bca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003bcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003bd4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003bde:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003bec:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	00048083 	.word	0x00048083
 8003c0c:	c0f88000 	.word	0xc0f88000
 8003c10:	fffffef0 	.word	0xfffffef0

08003c14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b38      	ldr	r3, [pc, #224]	@ (8003d0c <ETH_SetDMAConfig+0xf8>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c3a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	791b      	ldrb	r3, [r3, #4]
 8003c40:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7b1b      	ldrb	r3, [r3, #12]
 8003c4c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <ETH_SetDMAConfig+0xfc>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	430b      	orrs	r3, r1
 8003c68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c6c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	7b5b      	ldrb	r3, [r3, #13]
 8003c72:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c84:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003c88:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <ETH_SetDMAConfig+0x100>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c98:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	7d1b      	ldrb	r3, [r3, #20]
 8003ca4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ca6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	7f5b      	ldrb	r3, [r3, #29]
 8003cac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cba:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003cbe:	4b16      	ldr	r3, [pc, #88]	@ (8003d18 <ETH_SetDMAConfig+0x104>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cce:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	7f1b      	ldrb	r3, [r3, #28]
 8003cd6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003cec:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <ETH_SetDMAConfig+0x108>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cfc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	ffff87fd 	.word	0xffff87fd
 8003d10:	ffff2ffe 	.word	0xffff2ffe
 8003d14:	fffec000 	.word	0xfffec000
 8003d18:	ffc0efef 	.word	0xffc0efef
 8003d1c:	7fc0ffff 	.word	0x7fc0ffff

08003d20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b0a4      	sub	sp, #144	@ 0x90
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d60:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003d78:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003d7c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003d84:	2300      	movs	r3, #0
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003da2:	2300      	movs	r3, #0
 8003da4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003db8:	2320      	movs	r3, #32
 8003dba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003dca:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003dd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fde6 	bl	80039dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e14:	2301      	movs	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e2a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003e40:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003e44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fee1 	bl	8003c14 <ETH_SetDMAConfig>
}
 8003e52:	bf00      	nop
 8003e54:	3790      	adds	r7, #144	@ 0x90
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e01d      	b.n	8003ea4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	3206      	adds	r2, #6
 8003e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d9de      	bls.n	8003e68 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2303      	movs	r3, #3
 8003ebc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ecc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003edc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e023      	b.n	8003f42 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6919      	ldr	r1, [r3, #16]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	3212      	adds	r2, #18
 8003f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d9d8      	bls.n	8003efa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2303      	movs	r3, #3
 8003f72:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f82:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f96:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	@ 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fb6:	4b86      	ldr	r3, [pc, #536]	@ (80041d0 <HAL_GPIO_Init+0x228>)
 8003fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fba:	e18c      	b.n	80042d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 817e 	beq.w	80042d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d005      	beq.n	8003fec <HAL_GPIO_Init+0x44>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d130      	bne.n	800404e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004022:	2201      	movs	r2, #1
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 0201 	and.w	r2, r3, #1
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b03      	cmp	r3, #3
 8004058:	d017      	beq.n	800408a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d123      	bne.n	80040de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	220f      	movs	r2, #15
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0203 	and.w	r2, r3, #3
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80d8 	beq.w	80042d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004120:	4b2c      	ldr	r3, [pc, #176]	@ (80041d4 <HAL_GPIO_Init+0x22c>)
 8004122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004126:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <HAL_GPIO_Init+0x22c>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004130:	4b28      	ldr	r3, [pc, #160]	@ (80041d4 <HAL_GPIO_Init+0x22c>)
 8004132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800413e:	4a26      	ldr	r2, [pc, #152]	@ (80041d8 <HAL_GPIO_Init+0x230>)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	3302      	adds	r3, #2
 8004146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	220f      	movs	r2, #15
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <HAL_GPIO_Init+0x234>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d04a      	beq.n	8004200 <HAL_GPIO_Init+0x258>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1c      	ldr	r2, [pc, #112]	@ (80041e0 <HAL_GPIO_Init+0x238>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d02b      	beq.n	80041ca <HAL_GPIO_Init+0x222>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1b      	ldr	r2, [pc, #108]	@ (80041e4 <HAL_GPIO_Init+0x23c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d025      	beq.n	80041c6 <HAL_GPIO_Init+0x21e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1a      	ldr	r2, [pc, #104]	@ (80041e8 <HAL_GPIO_Init+0x240>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01f      	beq.n	80041c2 <HAL_GPIO_Init+0x21a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a19      	ldr	r2, [pc, #100]	@ (80041ec <HAL_GPIO_Init+0x244>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d019      	beq.n	80041be <HAL_GPIO_Init+0x216>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a18      	ldr	r2, [pc, #96]	@ (80041f0 <HAL_GPIO_Init+0x248>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_GPIO_Init+0x212>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a17      	ldr	r2, [pc, #92]	@ (80041f4 <HAL_GPIO_Init+0x24c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00d      	beq.n	80041b6 <HAL_GPIO_Init+0x20e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a16      	ldr	r2, [pc, #88]	@ (80041f8 <HAL_GPIO_Init+0x250>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <HAL_GPIO_Init+0x20a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a15      	ldr	r2, [pc, #84]	@ (80041fc <HAL_GPIO_Init+0x254>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_GPIO_Init+0x206>
 80041aa:	2309      	movs	r3, #9
 80041ac:	e029      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041ae:	230a      	movs	r3, #10
 80041b0:	e027      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041b2:	2307      	movs	r3, #7
 80041b4:	e025      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041b6:	2306      	movs	r3, #6
 80041b8:	e023      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041ba:	2305      	movs	r3, #5
 80041bc:	e021      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041be:	2304      	movs	r3, #4
 80041c0:	e01f      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041c2:	2303      	movs	r3, #3
 80041c4:	e01d      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e01b      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e019      	b.n	8004202 <HAL_GPIO_Init+0x25a>
 80041ce:	bf00      	nop
 80041d0:	58000080 	.word	0x58000080
 80041d4:	58024400 	.word	0x58024400
 80041d8:	58000400 	.word	0x58000400
 80041dc:	58020000 	.word	0x58020000
 80041e0:	58020400 	.word	0x58020400
 80041e4:	58020800 	.word	0x58020800
 80041e8:	58020c00 	.word	0x58020c00
 80041ec:	58021000 	.word	0x58021000
 80041f0:	58021400 	.word	0x58021400
 80041f4:	58021800 	.word	0x58021800
 80041f8:	58021c00 	.word	0x58021c00
 80041fc:	58022400 	.word	0x58022400
 8004200:	2300      	movs	r3, #0
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	f002 0203 	and.w	r2, r2, #3
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	4093      	lsls	r3, r2
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004212:	4938      	ldr	r1, [pc, #224]	@ (80042f4 <HAL_GPIO_Init+0x34c>)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	3302      	adds	r3, #2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004246:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f ae6b 	bne.w	8003fbc <HAL_GPIO_Init+0x14>
  }
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3724      	adds	r7, #36	@ 0x24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	58000400 	.word	0x58000400

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004334:	4b19      	ldr	r3, [pc, #100]	@ (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d00a      	beq.n	8004356 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004340:	4b16      	ldr	r3, [pc, #88]	@ (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e01f      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e01d      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	490f      	ldr	r1, [pc, #60]	@ (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4313      	orrs	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004366:	f7fd f817 	bl	8001398 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800436c:	e009      	b.n	8004382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800436e:	f7fd f813 	bl	8001398 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800437c:	d901      	bls.n	8004382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438e:	d1ee      	bne.n	800436e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58024800 	.word	0x58024800

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	@ 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e3c8      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8087 	beq.w	80044ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c0:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ca:	4b86      	ldr	r3, [pc, #536]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d007      	beq.n	80043e6 <HAL_RCC_OscConfig+0x46>
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	2b18      	cmp	r3, #24
 80043da:	d110      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e>
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d10b      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e6:	4b7f      	ldr	r3, [pc, #508]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06c      	beq.n	80044cc <HAL_RCC_OscConfig+0x12c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d168      	bne.n	80044cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e3a2      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x76>
 8004408:	4b76      	ldr	r3, [pc, #472]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a75      	ldr	r2, [pc, #468]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e02e      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x98>
 800441e:	4b71      	ldr	r3, [pc, #452]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a70      	ldr	r2, [pc, #448]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b6e      	ldr	r3, [pc, #440]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6d      	ldr	r2, [pc, #436]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0xbc>
 8004442:	4b68      	ldr	r3, [pc, #416]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a67      	ldr	r2, [pc, #412]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b65      	ldr	r3, [pc, #404]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a64      	ldr	r2, [pc, #400]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 800445c:	4b61      	ldr	r3, [pc, #388]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a60      	ldr	r2, [pc, #384]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b5e      	ldr	r3, [pc, #376]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a5d      	ldr	r2, [pc, #372]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fc ff8c 	bl	8001398 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004484:	f7fc ff88 	bl	8001398 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	@ 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e356      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004496:	4b53      	ldr	r3, [pc, #332]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0xe4>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fc ff78 	bl	8001398 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fc ff74 	bl	8001398 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	@ 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e342      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044be:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x10c>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 808c 	beq.w	80045f4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044dc:	4b41      	ldr	r3, [pc, #260]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e6:	4b3f      	ldr	r3, [pc, #252]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_RCC_OscConfig+0x162>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	d137      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c8>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d132      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004502:	4b38      	ldr	r3, [pc, #224]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_RCC_OscConfig+0x17a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e314      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800451a:	4b32      	ldr	r3, [pc, #200]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0219 	bic.w	r2, r3, #25
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	492f      	ldr	r1, [pc, #188]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc ff34 	bl	8001398 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004534:	f7fc ff30 	bl	8001398 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e2fe      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004546:	4b27      	ldr	r3, [pc, #156]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b24      	ldr	r3, [pc, #144]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	061b      	lsls	r3, r3, #24
 8004560:	4920      	ldr	r1, [pc, #128]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004566:	e045      	b.n	80045f4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d026      	beq.n	80045be <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004570:	4b1c      	ldr	r3, [pc, #112]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 0219 	bic.w	r2, r3, #25
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4919      	ldr	r1, [pc, #100]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fc ff09 	bl	8001398 <HAL_GetTick>
 8004586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458a:	f7fc ff05 	bl	8001398 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e2d3      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	490b      	ldr	r1, [pc, #44]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	e01a      	b.n	80045f4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a08      	ldr	r2, [pc, #32]	@ (80045e4 <HAL_RCC_OscConfig+0x244>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ca:	f7fc fee5 	bl	8001398 <HAL_GetTick>
 80045ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fc fee1 	bl	8001398 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d903      	bls.n	80045e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e2af      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
 80045e4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e8:	4b96      	ldr	r3, [pc, #600]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ee      	bne.n	80045d2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d06a      	beq.n	80046d6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004600:	4b90      	ldr	r3, [pc, #576]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004608:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800460a:	4b8e      	ldr	r3, [pc, #568]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b08      	cmp	r3, #8
 8004614:	d007      	beq.n	8004626 <HAL_RCC_OscConfig+0x286>
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b18      	cmp	r3, #24
 800461a:	d11b      	bne.n	8004654 <HAL_RCC_OscConfig+0x2b4>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d116      	bne.n	8004654 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004626:	4b87      	ldr	r3, [pc, #540]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_RCC_OscConfig+0x29e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b80      	cmp	r3, #128	@ 0x80
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e282      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800463e:	4b81      	ldr	r3, [pc, #516]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	497d      	ldr	r1, [pc, #500]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004652:	e040      	b.n	80046d6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d023      	beq.n	80046a4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800465c:	4b79      	ldr	r3, [pc, #484]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a78      	ldr	r2, [pc, #480]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc fe96 	bl	8001398 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004670:	f7fc fe92 	bl	8001398 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e260      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004682:	4b70      	ldr	r3, [pc, #448]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800468e:	4b6d      	ldr	r3, [pc, #436]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	4969      	ldr	r1, [pc, #420]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	60cb      	str	r3, [r1, #12]
 80046a2:	e018      	b.n	80046d6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046a4:	4b67      	ldr	r3, [pc, #412]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a66      	ldr	r2, [pc, #408]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80046aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fc fe72 	bl	8001398 <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046b8:	f7fc fe6e 	bl	8001398 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e23c      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046ca:	4b5e      	ldr	r3, [pc, #376]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d036      	beq.n	8004750 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d019      	beq.n	800471e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ea:	4b56      	ldr	r3, [pc, #344]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ee:	4a55      	ldr	r2, [pc, #340]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fc fe4f 	bl	8001398 <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fe:	f7fc fe4b 	bl	8001398 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e219      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004710:	4b4c      	ldr	r3, [pc, #304]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x35e>
 800471c:	e018      	b.n	8004750 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471e:	4b49      	ldr	r3, [pc, #292]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004722:	4a48      	ldr	r2, [pc, #288]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472a:	f7fc fe35 	bl	8001398 <HAL_GetTick>
 800472e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004732:	f7fc fe31 	bl	8001398 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1ff      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004744:	4b3f      	ldr	r3, [pc, #252]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d036      	beq.n	80047ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d019      	beq.n	8004798 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004764:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a36      	ldr	r2, [pc, #216]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800476a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800476e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004770:	f7fc fe12 	bl	8001398 <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004778:	f7fc fe0e 	bl	8001398 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1dc      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800478a:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x3d8>
 8004796:	e018      	b.n	80047ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004798:	4b2a      	ldr	r3, [pc, #168]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a29      	ldr	r2, [pc, #164]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800479e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047a4:	f7fc fdf8 	bl	8001398 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ac:	f7fc fdf4 	bl	8001398 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1c2      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047be:	4b21      	ldr	r3, [pc, #132]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8086 	beq.w	80048e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <HAL_RCC_OscConfig+0x4a8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004848 <HAL_RCC_OscConfig+0x4a8>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e4:	f7fc fdd8 	bl	8001398 <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fc fdd4 	bl	8001398 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1a2      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fe:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <HAL_RCC_OscConfig+0x4a8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d106      	bne.n	8004820 <HAL_RCC_OscConfig+0x480>
 8004812:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	@ 0x70
 800481e:	e032      	b.n	8004886 <HAL_RCC_OscConfig+0x4e6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x4ac>
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	@ 0x70
 8004834:	4b03      	ldr	r3, [pc, #12]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004838:	4a02      	ldr	r2, [pc, #8]	@ (8004844 <HAL_RCC_OscConfig+0x4a4>)
 800483a:	f023 0304 	bic.w	r3, r3, #4
 800483e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004840:	e021      	b.n	8004886 <HAL_RCC_OscConfig+0x4e6>
 8004842:	bf00      	nop
 8004844:	58024400 	.word	0x58024400
 8004848:	58024800 	.word	0x58024800
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b05      	cmp	r3, #5
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x4ce>
 8004854:	4b83      	ldr	r3, [pc, #524]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004858:	4a82      	ldr	r2, [pc, #520]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004860:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	4a7f      	ldr	r2, [pc, #508]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	@ 0x70
 800486c:	e00b      	b.n	8004886 <HAL_RCC_OscConfig+0x4e6>
 800486e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	4a7c      	ldr	r2, [pc, #496]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	6713      	str	r3, [r2, #112]	@ 0x70
 800487a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	4a79      	ldr	r2, [pc, #484]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d015      	beq.n	80048ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fc fd83 	bl	8001398 <HAL_GetTick>
 8004892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fc fd7f 	bl	8001398 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e14b      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ee      	beq.n	8004896 <HAL_RCC_OscConfig+0x4f6>
 80048b8:	e014      	b.n	80048e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ba:	f7fc fd6d 	bl	8001398 <HAL_GetTick>
 80048be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048c0:	e00a      	b.n	80048d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c2:	f7fc fd69 	bl	8001398 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e135      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048d8:	4b62      	ldr	r3, [pc, #392]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ee      	bne.n	80048c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 812a 	beq.w	8004b42 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f6:	2b18      	cmp	r3, #24
 80048f8:	f000 80ba 	beq.w	8004a70 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	2b02      	cmp	r3, #2
 8004902:	f040 8095 	bne.w	8004a30 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b57      	ldr	r3, [pc, #348]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a56      	ldr	r2, [pc, #344]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800490c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fc fd41 	bl	8001398 <HAL_GetTick>
 8004916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fc fd3d 	bl	8001398 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e10b      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800492c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004938:	4b4a      	ldr	r3, [pc, #296]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800493a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a68 <HAL_RCC_OscConfig+0x6c8>)
 800493e:	4013      	ands	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	430a      	orrs	r2, r1
 800494c:	4945      	ldr	r1, [pc, #276]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	628b      	str	r3, [r1, #40]	@ 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	3b01      	subs	r3, #1
 8004958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004960:	3b01      	subs	r3, #1
 8004962:	025b      	lsls	r3, r3, #9
 8004964:	b29b      	uxth	r3, r3
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	3b01      	subs	r3, #1
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497a:	3b01      	subs	r3, #1
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004982:	4938      	ldr	r1, [pc, #224]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004988:	4b36      	ldr	r3, [pc, #216]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	4a35      	ldr	r2, [pc, #212]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004994:	4b33      	ldr	r3, [pc, #204]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004998:	4b34      	ldr	r3, [pc, #208]	@ (8004a6c <HAL_RCC_OscConfig+0x6cc>)
 800499a:	4013      	ands	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049a0:	00d2      	lsls	r2, r2, #3
 80049a2:	4930      	ldr	r1, [pc, #192]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	f023 020c 	bic.w	r2, r3, #12
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	492b      	ldr	r1, [pc, #172]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	f023 0202 	bic.w	r2, r3, #2
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c6:	4927      	ldr	r1, [pc, #156]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	4a24      	ldr	r2, [pc, #144]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d8:	4b22      	ldr	r3, [pc, #136]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	4a21      	ldr	r2, [pc, #132]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fc fcc6 	bl	8001398 <HAL_GetTick>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fc fcc2 	bl	8001398 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e090      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a22:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x670>
 8004a2e:	e088      	b.n	8004b42 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fc fcac 	bl	8001398 <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fc fca8 	bl	8001398 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e076      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a56:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_RCC_OscConfig+0x6c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x6a4>
 8004a62:	e06e      	b.n	8004b42 <HAL_RCC_OscConfig+0x7a2>
 8004a64:	58024400 	.word	0x58024400
 8004a68:	fffffc0c 	.word	0xfffffc0c
 8004a6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a70:	4b36      	ldr	r3, [pc, #216]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a76:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d031      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f003 0203 	and.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d12a      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d122      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d11a      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	0a5b      	lsrs	r3, r3, #9
 8004ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d108      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e02b      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004aec:	4b17      	ldr	r3, [pc, #92]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	08db      	lsrs	r3, r3, #3
 8004af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d01f      	beq.n	8004b42 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b02:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	4a11      	ldr	r2, [pc, #68]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b0e:	f7fc fc43 	bl	8001398 <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b14:	bf00      	nop
 8004b16:	f7fc fc3f 	bl	8001398 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d0f9      	beq.n	8004b16 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b26:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <HAL_RCC_OscConfig+0x7b0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b2e:	00d2      	lsls	r2, r2, #3
 8004b30:	4906      	ldr	r1, [pc, #24]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b36:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	4a04      	ldr	r2, [pc, #16]	@ (8004b4c <HAL_RCC_OscConfig+0x7ac>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3730      	adds	r7, #48	@ 0x30
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	ffff0007 	.word	0xffff0007

08004b54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e19c      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b68:	4b8a      	ldr	r3, [pc, #552]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d910      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b87      	ldr	r3, [pc, #540]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 020f 	bic.w	r2, r3, #15
 8004b7e:	4985      	ldr	r1, [pc, #532]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b83      	ldr	r3, [pc, #524]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e184      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d010      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d908      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bb4:	4b78      	ldr	r3, [pc, #480]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	4975      	ldr	r1, [pc, #468]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d010      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	4b70      	ldr	r3, [pc, #448]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d908      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004be2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	496a      	ldr	r1, [pc, #424]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	4b64      	ldr	r3, [pc, #400]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d908      	bls.n	8004c22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c10:	4b61      	ldr	r3, [pc, #388]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	495e      	ldr	r1, [pc, #376]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d908      	bls.n	8004c50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c3e:	4b56      	ldr	r3, [pc, #344]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4953      	ldr	r1, [pc, #332]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	4b4d      	ldr	r3, [pc, #308]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d908      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f023 020f 	bic.w	r2, r3, #15
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4947      	ldr	r1, [pc, #284]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d055      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c8a:	4b43      	ldr	r3, [pc, #268]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4940      	ldr	r1, [pc, #256]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d121      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0f6      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cbc:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d115      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0ea      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cd4:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0de      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0d6      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cf4:	4b28      	ldr	r3, [pc, #160]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4925      	ldr	r1, [pc, #148]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d06:	f7fc fb47 	bl	8001398 <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0e:	f7fc fb43 	bl	8001398 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0be      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d24:	4b1c      	ldr	r3, [pc, #112]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d1eb      	bne.n	8004d0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d010      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d208      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d52:	4b11      	ldr	r3, [pc, #68]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f023 020f 	bic.w	r2, r3, #15
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	490e      	ldr	r1, [pc, #56]	@ (8004d98 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d214      	bcs.n	8004d9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 020f 	bic.w	r2, r3, #15
 8004d7a:	4906      	ldr	r1, [pc, #24]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <HAL_RCC_ClockConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e086      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x34e>
 8004d94:	52002000 	.word	0x52002000
 8004d98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	4b3f      	ldr	r3, [pc, #252]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d208      	bcs.n	8004dca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004db8:	4b3c      	ldr	r3, [pc, #240]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	4939      	ldr	r1, [pc, #228]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d208      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	492e      	ldr	r1, [pc, #184]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d208      	bcs.n	8004e26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e14:	4b25      	ldr	r3, [pc, #148]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	4922      	ldr	r1, [pc, #136]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d208      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e42:	4b1a      	ldr	r3, [pc, #104]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	4917      	ldr	r1, [pc, #92]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e54:	f000 f834 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	4912      	ldr	r1, [pc, #72]	@ (8004eb0 <HAL_RCC_ClockConfig+0x35c>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <HAL_RCC_ClockConfig+0x358>)
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb0 <HAL_RCC_ClockConfig+0x35c>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <HAL_RCC_ClockConfig+0x360>)
 8004e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb8 <HAL_RCC_ClockConfig+0x364>)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e92:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <HAL_RCC_ClockConfig+0x368>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc f8c4 	bl	8001024 <HAL_InitTick>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	0800ad48 	.word	0x0800ad48
 8004eb4:	24000004 	.word	0x24000004
 8004eb8:	24000000 	.word	0x24000000
 8004ebc:	24000008 	.word	0x24000008

08004ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	@ 0x24
 8004ec4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec6:	4bb3      	ldr	r3, [pc, #716]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ece:	2b18      	cmp	r3, #24
 8004ed0:	f200 8155 	bhi.w	800517e <HAL_RCC_GetSysClockFreq+0x2be>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f41 	.word	0x08004f41
 8004ee0:	0800517f 	.word	0x0800517f
 8004ee4:	0800517f 	.word	0x0800517f
 8004ee8:	0800517f 	.word	0x0800517f
 8004eec:	0800517f 	.word	0x0800517f
 8004ef0:	0800517f 	.word	0x0800517f
 8004ef4:	0800517f 	.word	0x0800517f
 8004ef8:	0800517f 	.word	0x0800517f
 8004efc:	08004f67 	.word	0x08004f67
 8004f00:	0800517f 	.word	0x0800517f
 8004f04:	0800517f 	.word	0x0800517f
 8004f08:	0800517f 	.word	0x0800517f
 8004f0c:	0800517f 	.word	0x0800517f
 8004f10:	0800517f 	.word	0x0800517f
 8004f14:	0800517f 	.word	0x0800517f
 8004f18:	0800517f 	.word	0x0800517f
 8004f1c:	08004f6d 	.word	0x08004f6d
 8004f20:	0800517f 	.word	0x0800517f
 8004f24:	0800517f 	.word	0x0800517f
 8004f28:	0800517f 	.word	0x0800517f
 8004f2c:	0800517f 	.word	0x0800517f
 8004f30:	0800517f 	.word	0x0800517f
 8004f34:	0800517f 	.word	0x0800517f
 8004f38:	0800517f 	.word	0x0800517f
 8004f3c:	08004f73 	.word	0x08004f73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f40:	4b94      	ldr	r3, [pc, #592]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f4c:	4b91      	ldr	r3, [pc, #580]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a90      	ldr	r2, [pc, #576]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f5e:	e111      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f60:	4b8d      	ldr	r3, [pc, #564]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f62:	61bb      	str	r3, [r7, #24]
      break;
 8004f64:	e10e      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f66:	4b8d      	ldr	r3, [pc, #564]	@ (800519c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f68:	61bb      	str	r3, [r7, #24]
      break;
 8004f6a:	e10b      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f6e:	61bb      	str	r3, [r7, #24]
      break;
 8004f70:	e108      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f72:	4b88      	ldr	r3, [pc, #544]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f7c:	4b85      	ldr	r3, [pc, #532]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f88:	4b82      	ldr	r3, [pc, #520]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f92:	4b80      	ldr	r3, [pc, #512]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f96:	08db      	lsrs	r3, r3, #3
 8004f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80e1 	beq.w	8005178 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	f000 8083 	beq.w	80050c4 <HAL_RCC_GetSysClockFreq+0x204>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f200 80a1 	bhi.w	8005108 <HAL_RCC_GetSysClockFreq+0x248>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x114>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d056      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fd2:	e099      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d02d      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a6b      	ldr	r2, [pc, #428]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500a:	4b62      	ldr	r3, [pc, #392]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501a:	ed97 6a02 	vldr	s12, [r7, #8]
 800501e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800502e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800503a:	e087      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b51      	ldr	r3, [pc, #324]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005062:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800507e:	e065      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b40      	ldr	r3, [pc, #256]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050c2:	e043      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005106:	e021      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a02 	vldr	s12, [r7, #8]
 800512e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800514a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800514c:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005156:	3301      	adds	r3, #1
 8005158:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	ee07 3a90 	vmov	s15, r3
 8005160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005164:	edd7 6a07 	vldr	s13, [r7, #28]
 8005168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005170:	ee17 3a90 	vmov	r3, s15
 8005174:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005176:	e005      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
      break;
 800517c:	e002      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005180:	61bb      	str	r3, [r7, #24]
      break;
 8005182:	bf00      	nop
  }

  return sysclockfreq;
 8005184:	69bb      	ldr	r3, [r7, #24]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	@ 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	58024400 	.word	0x58024400
 8005198:	03d09000 	.word	0x03d09000
 800519c:	003d0900 	.word	0x003d0900
 80051a0:	007a1200 	.word	0x007a1200
 80051a4:	46000000 	.word	0x46000000
 80051a8:	4c742400 	.word	0x4c742400
 80051ac:	4a742400 	.word	0x4a742400
 80051b0:	4af42400 	.word	0x4af42400

080051b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051ba:	f7ff fe81 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <HAL_RCC_GetHCLKFreq+0x50>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	490f      	ldr	r1, [pc, #60]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x54>)
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	fa22 f303 	lsr.w	r3, r2, r3
 80051d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <HAL_RCC_GetHCLKFreq+0x50>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	4a09      	ldr	r2, [pc, #36]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x54>)
 80051e2:	5cd3      	ldrb	r3, [r2, r3]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a07      	ldr	r2, [pc, #28]	@ (800520c <HAL_RCC_GetHCLKFreq+0x58>)
 80051f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051f2:	4a07      	ldr	r2, [pc, #28]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051f8:	4b04      	ldr	r3, [pc, #16]	@ (800520c <HAL_RCC_GetHCLKFreq+0x58>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	58024400 	.word	0x58024400
 8005208:	0800ad48 	.word	0x0800ad48
 800520c:	24000004 	.word	0x24000004
 8005210:	24000000 	.word	0x24000000

08005214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005218:	f7ff ffcc 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4904      	ldr	r1, [pc, #16]	@ (800523c <HAL_RCC_GetPCLK1Freq+0x28>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	58024400 	.word	0x58024400
 800523c:	0800ad48 	.word	0x0800ad48

08005240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005244:	f7ff ffb6 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b06      	ldr	r3, [pc, #24]	@ (8005264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4904      	ldr	r1, [pc, #16]	@ (8005268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	58024400 	.word	0x58024400
 8005268:	0800ad48 	.word	0x0800ad48

0800526c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	223f      	movs	r2, #63	@ 0x3f
 800527a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800527c:	4b1a      	ldr	r3, [pc, #104]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0207 	and.w	r2, r3, #7
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005288:	4b17      	ldr	r3, [pc, #92]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005294:	4b14      	ldr	r3, [pc, #80]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80052a0:	4b11      	ldr	r3, [pc, #68]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80052ac:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80052c4:	4b08      	ldr	r3, [pc, #32]	@ (80052e8 <HAL_RCC_GetClockConfig+0x7c>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_RCC_GetClockConfig+0x80>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 020f 	and.w	r2, r3, #15
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	58024400 	.word	0x58024400
 80052ec:	52002000 	.word	0x52002000

080052f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f4:	b0c6      	sub	sp, #280	@ 0x118
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005302:	2300      	movs	r3, #0
 8005304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005314:	2500      	movs	r5, #0
 8005316:	ea54 0305 	orrs.w	r3, r4, r5
 800531a:	d049      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005322:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005326:	d02f      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005328:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800532c:	d828      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800532e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005332:	d01a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005334:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005338:	d822      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800533e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005342:	d007      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005344:	e01c      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005346:	4bab      	ldr	r3, [pc, #684]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	4aaa      	ldr	r2, [pc, #680]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800534c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005352:	e01a      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005358:	3308      	adds	r3, #8
 800535a:	2102      	movs	r1, #2
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fc25 	bl	8006bac <RCCEx_PLL2_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005368:	e00f      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	3328      	adds	r3, #40	@ 0x28
 8005370:	2102      	movs	r1, #2
 8005372:	4618      	mov	r0, r3
 8005374:	f001 fccc 	bl	8006d10 <RCCEx_PLL3_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800537e:	e004      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005392:	4b98      	ldr	r3, [pc, #608]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005396:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a0:	4a94      	ldr	r2, [pc, #592]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053a2:	430b      	orrs	r3, r1
 80053a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80053bc:	f04f 0900 	mov.w	r9, #0
 80053c0:	ea58 0309 	orrs.w	r3, r8, r9
 80053c4:	d047      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d82a      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053d0:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053ed 	.word	0x080053ed
 80053dc:	080053fb 	.word	0x080053fb
 80053e0:	08005411 	.word	0x08005411
 80053e4:	0800542f 	.word	0x0800542f
 80053e8:	0800542f 	.word	0x0800542f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	4a80      	ldr	r2, [pc, #512]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053f8:	e01a      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fe:	3308      	adds	r3, #8
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fbd2 	bl	8006bac <RCCEx_PLL2_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800540e:	e00f      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005414:	3328      	adds	r3, #40	@ 0x28
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f001 fc79 	bl	8006d10 <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005424:	e004      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800542c:	e000      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800542e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005438:	4b6e      	ldr	r3, [pc, #440]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800543a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543c:	f023 0107 	bic.w	r1, r3, #7
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	4a6b      	ldr	r2, [pc, #428]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6513      	str	r3, [r2, #80]	@ 0x50
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005452:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005462:	f04f 0b00 	mov.w	fp, #0
 8005466:	ea5a 030b 	orrs.w	r3, sl, fp
 800546a:	d05b      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005474:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005478:	d03b      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800547a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800547e:	d834      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005480:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005484:	d037      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800548a:	d82e      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800548c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005490:	d033      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005492:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005496:	d828      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800549c:	d01a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800549e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a2:	d822      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80054a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ac:	d007      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80054ae:	e01c      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b0:	4b50      	ldr	r3, [pc, #320]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	4a4f      	ldr	r2, [pc, #316]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054bc:	e01e      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	3308      	adds	r3, #8
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fb70 	bl	8006bac <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054d2:	e013      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	3328      	adds	r3, #40	@ 0x28
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fc17 	bl	8006d10 <RCCEx_PLL3_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054f0:	e004      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80054fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005504:	4b3b      	ldr	r3, [pc, #236]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005514:	4a37      	ldr	r2, [pc, #220]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005516:	430b      	orrs	r3, r1
 8005518:	6593      	str	r3, [r2, #88]	@ 0x58
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800553a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d05d      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005548:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800554c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005550:	d03b      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005552:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005556:	d834      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800555c:	d037      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800555e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005562:	d82e      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005564:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005568:	d033      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800556a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800556e:	d828      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005574:	d01a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005576:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800557a:	d822      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005584:	d007      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005586:	e01c      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005588:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	4a19      	ldr	r2, [pc, #100]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800558e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005594:	e01e      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	3308      	adds	r3, #8
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fb04 	bl	8006bac <RCCEx_PLL2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055aa:	e013      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	3328      	adds	r3, #40	@ 0x28
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fbab 	bl	8006d10 <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055c0:	e008      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055c8:	e004      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80055d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055dc:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055ec:	4a01      	ldr	r2, [pc, #4]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055f2:	e005      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80055f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800560c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005610:	2300      	movs	r3, #0
 8005612:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005616:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800561a:	460b      	mov	r3, r1
 800561c:	4313      	orrs	r3, r2
 800561e:	d03a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005626:	2b30      	cmp	r3, #48	@ 0x30
 8005628:	d01f      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800562a:	2b30      	cmp	r3, #48	@ 0x30
 800562c:	d819      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d00c      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d815      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d019      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800563a:	2b10      	cmp	r3, #16
 800563c:	d111      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563e:	4baa      	ldr	r3, [pc, #680]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	4aa9      	ldr	r2, [pc, #676]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800564a:	e011      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	3308      	adds	r3, #8
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f001 faa9 	bl	8006bac <RCCEx_PLL2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005668:	e002      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800566e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005678:	4b9b      	ldr	r3, [pc, #620]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800567a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005686:	4a98      	ldr	r2, [pc, #608]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005688:	430b      	orrs	r3, r1
 800568a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005692:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056a6:	2300      	movs	r3, #0
 80056a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80056b0:	460b      	mov	r3, r1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	d051      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c0:	d035      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80056c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c6:	d82e      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80056c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056cc:	d031      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80056ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056d2:	d828      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80056d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d8:	d01a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80056da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056de:	d822      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e8:	d007      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80056ea:	e01c      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ec:	4b7e      	ldr	r3, [pc, #504]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	4a7d      	ldr	r2, [pc, #500]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056f8:	e01c      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fe:	3308      	adds	r3, #8
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f001 fa52 	bl	8006bac <RCCEx_PLL2_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800570e:	e011      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005714:	3328      	adds	r3, #40	@ 0x28
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f001 faf9 	bl	8006d10 <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800573c:	4b6a      	ldr	r3, [pc, #424]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800573e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005740:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574a:	4a67      	ldr	r2, [pc, #412]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800574c:	430b      	orrs	r3, r1
 800574e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005756:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005766:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005770:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005774:	460b      	mov	r3, r1
 8005776:	4313      	orrs	r3, r2
 8005778:	d053      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800577a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005784:	d033      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005786:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800578a:	d82c      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800578c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005790:	d02f      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005796:	d826      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800579c:	d02b      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800579e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057a2:	d820      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80057a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a8:	d012      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80057aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057ae:	d81a      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d022      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b8:	d115      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057be:	3308      	adds	r3, #8
 80057c0:	2101      	movs	r1, #1
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 f9f2 	bl	8006bac <RCCEx_PLL2_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057ce:	e015      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d4:	3328      	adds	r3, #40	@ 0x28
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 fa99 	bl	8006d10 <RCCEx_PLL3_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057e4:	e00a      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80057ee:	bf00      	nop
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005804:	4b38      	ldr	r3, [pc, #224]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005808:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005812:	4a35      	ldr	r2, [pc, #212]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005814:	430b      	orrs	r3, r1
 8005816:	6513      	str	r3, [r2, #80]	@ 0x50
 8005818:	e003      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800581e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800582e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005832:	2300      	movs	r3, #0
 8005834:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005838:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800583c:	460b      	mov	r3, r1
 800583e:	4313      	orrs	r3, r2
 8005840:	d058      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800584a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584e:	d033      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005854:	d82c      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585a:	d02f      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005860:	d826      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005866:	d02b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005868:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800586c:	d820      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005872:	d012      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005878:	d81a      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d022      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005882:	d115      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005888:	3308      	adds	r3, #8
 800588a:	2101      	movs	r1, #1
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f98d 	bl	8006bac <RCCEx_PLL2_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005898:	e015      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	3328      	adds	r3, #40	@ 0x28
 80058a0:	2101      	movs	r1, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fa34 	bl	8006d10 <RCCEx_PLL3_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058ae:	e00a      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058b6:	e006      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80058b8:	bf00      	nop
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10e      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058ce:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058de:	4a02      	ldr	r2, [pc, #8]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058e4:	e006      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80058e6:	bf00      	nop
 80058e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005904:	2300      	movs	r3, #0
 8005906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800590a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800590e:	460b      	mov	r3, r1
 8005910:	4313      	orrs	r3, r2
 8005912:	d037      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800591e:	d00e      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005924:	d816      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800592a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800592e:	d111      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4bc4      	ldr	r3, [pc, #784]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	4ac3      	ldr	r2, [pc, #780]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800593c:	e00f      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005942:	3308      	adds	r3, #8
 8005944:	2101      	movs	r1, #1
 8005946:	4618      	mov	r0, r3
 8005948:	f001 f930 	bl	8006bac <RCCEx_PLL2_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005952:	e004      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800595a:	e000      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800595c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005966:	4bb7      	ldr	r3, [pc, #732]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005974:	4ab3      	ldr	r2, [pc, #716]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005976:	430b      	orrs	r3, r1
 8005978:	6513      	str	r3, [r2, #80]	@ 0x50
 800597a:	e003      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005980:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800599a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800599e:	460b      	mov	r3, r1
 80059a0:	4313      	orrs	r3, r2
 80059a2:	d039      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d81c      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059f1 	.word	0x080059f1
 80059b8:	080059c5 	.word	0x080059c5
 80059bc:	080059d3 	.word	0x080059d3
 80059c0:	080059f1 	.word	0x080059f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c4:	4b9f      	ldr	r3, [pc, #636]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4a9e      	ldr	r2, [pc, #632]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059d0:	e00f      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d6:	3308      	adds	r3, #8
 80059d8:	2102      	movs	r1, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f8e6 	bl	8006bac <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059fa:	4b92      	ldr	r3, [pc, #584]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fe:	f023 0103 	bic.w	r1, r3, #3
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a08:	4a8e      	ldr	r2, [pc, #568]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a0e:	e003      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f000 8099 	beq.w	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a3a:	4b83      	ldr	r3, [pc, #524]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a82      	ldr	r2, [pc, #520]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a46:	f7fb fca7 	bl	8001398 <HAL_GetTick>
 8005a4a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a50:	f7fb fca2 	bl	8001398 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b64      	cmp	r3, #100	@ 0x64
 8005a5e:	d903      	bls.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a66:	e005      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a68:	4b77      	ldr	r3, [pc, #476]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ed      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d173      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a7c:	4b71      	ldr	r3, [pc, #452]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a88:	4053      	eors	r3, r2
 8005a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d015      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a92:	4b6c      	ldr	r3, [pc, #432]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a9e:	4b69      	ldr	r3, [pc, #420]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	4a68      	ldr	r2, [pc, #416]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005aaa:	4b66      	ldr	r3, [pc, #408]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aae:	4a65      	ldr	r2, [pc, #404]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ab6:	4a63      	ldr	r2, [pc, #396]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aca:	d118      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fb fc64 	bl	8001398 <HAL_GetTick>
 8005ad0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad4:	e00d      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad6:	f7fb fc5f 	bl	8001398 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005ae0:	1ad2      	subs	r2, r2, r3
 8005ae2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d903      	bls.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005af0:	e005      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005af2:	4b54      	ldr	r3, [pc, #336]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0eb      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d129      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b16:	d10e      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005b18:	4b4a      	ldr	r3, [pc, #296]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b28:	091a      	lsrs	r2, r3, #4
 8005b2a:	4b48      	ldr	r3, [pc, #288]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	4a45      	ldr	r2, [pc, #276]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6113      	str	r3, [r2, #16]
 8005b34:	e005      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005b36:	4b43      	ldr	r3, [pc, #268]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	4a42      	ldr	r2, [pc, #264]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b40:	6113      	str	r3, [r2, #16]
 8005b42:	4b40      	ldr	r3, [pc, #256]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b52:	4a3c      	ldr	r2, [pc, #240]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b58:	e008      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005b62:	e003      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f002 0301 	and.w	r3, r2, #1
 8005b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005b86:	460b      	mov	r3, r1
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f000 808f 	beq.w	8005cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b94:	2b28      	cmp	r3, #40	@ 0x28
 8005b96:	d871      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005b98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005c85 	.word	0x08005c85
 8005ba4:	08005c7d 	.word	0x08005c7d
 8005ba8:	08005c7d 	.word	0x08005c7d
 8005bac:	08005c7d 	.word	0x08005c7d
 8005bb0:	08005c7d 	.word	0x08005c7d
 8005bb4:	08005c7d 	.word	0x08005c7d
 8005bb8:	08005c7d 	.word	0x08005c7d
 8005bbc:	08005c7d 	.word	0x08005c7d
 8005bc0:	08005c51 	.word	0x08005c51
 8005bc4:	08005c7d 	.word	0x08005c7d
 8005bc8:	08005c7d 	.word	0x08005c7d
 8005bcc:	08005c7d 	.word	0x08005c7d
 8005bd0:	08005c7d 	.word	0x08005c7d
 8005bd4:	08005c7d 	.word	0x08005c7d
 8005bd8:	08005c7d 	.word	0x08005c7d
 8005bdc:	08005c7d 	.word	0x08005c7d
 8005be0:	08005c67 	.word	0x08005c67
 8005be4:	08005c7d 	.word	0x08005c7d
 8005be8:	08005c7d 	.word	0x08005c7d
 8005bec:	08005c7d 	.word	0x08005c7d
 8005bf0:	08005c7d 	.word	0x08005c7d
 8005bf4:	08005c7d 	.word	0x08005c7d
 8005bf8:	08005c7d 	.word	0x08005c7d
 8005bfc:	08005c7d 	.word	0x08005c7d
 8005c00:	08005c85 	.word	0x08005c85
 8005c04:	08005c7d 	.word	0x08005c7d
 8005c08:	08005c7d 	.word	0x08005c7d
 8005c0c:	08005c7d 	.word	0x08005c7d
 8005c10:	08005c7d 	.word	0x08005c7d
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005c7d 	.word	0x08005c7d
 8005c1c:	08005c7d 	.word	0x08005c7d
 8005c20:	08005c85 	.word	0x08005c85
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005c7d 	.word	0x08005c7d
 8005c30:	08005c7d 	.word	0x08005c7d
 8005c34:	08005c7d 	.word	0x08005c7d
 8005c38:	08005c7d 	.word	0x08005c7d
 8005c3c:	08005c7d 	.word	0x08005c7d
 8005c40:	08005c85 	.word	0x08005c85
 8005c44:	58024400 	.word	0x58024400
 8005c48:	58024800 	.word	0x58024800
 8005c4c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	3308      	adds	r3, #8
 8005c56:	2101      	movs	r1, #1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 ffa7 	bl	8006bac <RCCEx_PLL2_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c64:	e00f      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	3328      	adds	r3, #40	@ 0x28
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 f84e 	bl	8006d10 <RCCEx_PLL3_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c7a:	e004      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c82:	e000      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c8e:	4bbf      	ldr	r3, [pc, #764]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c9c:	4abb      	ldr	r2, [pc, #748]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ca2:	e003      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f002 0302 	and.w	r3, r2, #2
 8005cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	d041      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d824      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005cf5 	.word	0x08005cf5
 8005ce4:	08005d0b 	.word	0x08005d0b
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 ff55 	bl	8006bac <RCCEx_PLL2_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d08:	e00f      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	3328      	adds	r3, #40	@ 0x28
 8005d10:	2101      	movs	r1, #1
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fffc 	bl	8006d10 <RCCEx_PLL3_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d1e:	e004      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d26:	e000      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d32:	4b96      	ldr	r3, [pc, #600]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d36:	f023 0107 	bic.w	r1, r3, #7
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d40:	4a92      	ldr	r2, [pc, #584]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d42:	430b      	orrs	r3, r1
 8005d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d46:	e003      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f002 0304 	and.w	r3, r2, #4
 8005d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d66:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d044      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d825      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005dd1 	.word	0x08005dd1
 8005d88:	08005d9d 	.word	0x08005d9d
 8005d8c:	08005db3 	.word	0x08005db3
 8005d90:	08005dd1 	.word	0x08005dd1
 8005d94:	08005dd1 	.word	0x08005dd1
 8005d98:	08005dd1 	.word	0x08005dd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	3308      	adds	r3, #8
 8005da2:	2101      	movs	r1, #1
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ff01 	bl	8006bac <RCCEx_PLL2_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005db0:	e00f      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db6:	3328      	adds	r3, #40	@ 0x28
 8005db8:	2101      	movs	r1, #1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 ffa8 	bl	8006d10 <RCCEx_PLL3_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dda:	4b6c      	ldr	r3, [pc, #432]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	f023 0107 	bic.w	r1, r3, #7
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dea:	4a68      	ldr	r2, [pc, #416]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f002 0320 	and.w	r3, r2, #32
 8005e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d055      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e26:	d033      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e2c:	d82c      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e32:	d02f      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d826      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e3e:	d02b      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e44:	d820      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e4a:	d012      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e50:	d81a      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d022      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e5a:	d115      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	3308      	adds	r3, #8
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fea1 	bl	8006bac <RCCEx_PLL2_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e70:	e015      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e76:	3328      	adds	r3, #40	@ 0x28
 8005e78:	2102      	movs	r1, #2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 ff48 	bl	8006d10 <RCCEx_PLL3_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e86:	e00a      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e8e:	e006      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005e90:	bf00      	nop
 8005e92:	e004      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005e94:	bf00      	nop
 8005e96:	e002      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005e98:	bf00      	nop
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ea6:	4b39      	ldr	r3, [pc, #228]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eb6:	4a35      	ldr	r2, [pc, #212]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ebc:	e003      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ed2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005edc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	d058      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ef2:	d033      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005ef4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ef8:	d82c      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005efe:	d02f      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f04:	d826      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f0a:	d02b      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f10:	d820      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f16:	d012      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1c:	d81a      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d022      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f26:	d115      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fe3b 	bl	8006bac <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f3c:	e015      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	3328      	adds	r3, #40	@ 0x28
 8005f44:	2102      	movs	r1, #2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fee2 	bl	8006d10 <RCCEx_PLL3_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f52:	e00a      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f5a:	e006      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10e      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f72:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f82:	4a02      	ldr	r2, [pc, #8]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f88:	e006      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005f8a:	bf00      	nop
 8005f8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	d055      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fc0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fc4:	d033      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005fc6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fca:	d82c      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd0:	d02f      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd6:	d826      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fd8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fdc:	d02b      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005fde:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fe2:	d820      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fe8:	d012      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fee:	d81a      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d022      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff8:	d115      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	3308      	adds	r3, #8
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fdd2 	bl	8006bac <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800600e:	e015      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006014:	3328      	adds	r3, #40	@ 0x28
 8006016:	2102      	movs	r1, #2
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fe79 	bl	8006d10 <RCCEx_PLL3_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006024:	e00a      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800602c:	e006      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800602e:	bf00      	nop
 8006030:	e004      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006032:	bf00      	nop
 8006034:	e002      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800603a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006044:	4ba0      	ldr	r3, [pc, #640]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006050:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006054:	4a9c      	ldr	r2, [pc, #624]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006056:	430b      	orrs	r3, r1
 8006058:	6593      	str	r3, [r2, #88]	@ 0x58
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 0308 	and.w	r3, r2, #8
 8006070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800607a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	d01e      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006090:	d10c      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	3328      	adds	r3, #40	@ 0x28
 8006098:	2102      	movs	r1, #2
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fe38 	bl	8006d10 <RCCEx_PLL3_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80060ac:	4b86      	ldr	r3, [pc, #536]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060bc:	4a82      	ldr	r2, [pc, #520]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f002 0310 	and.w	r3, r2, #16
 80060ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d01e      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ee:	d10c      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	3328      	adds	r3, #40	@ 0x28
 80060f6:	2102      	movs	r1, #2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fe09 	bl	8006d10 <RCCEx_PLL3_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800610a:	4b6f      	ldr	r3, [pc, #444]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800610c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800611a:	4a6b      	ldr	r2, [pc, #428]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800611c:	430b      	orrs	r3, r1
 800611e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800612c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800612e:	2300      	movs	r3, #0
 8006130:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006132:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d03e      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006148:	d022      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800614a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614e:	d81b      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006158:	d00b      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800615a:	e015      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	3308      	adds	r3, #8
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fd21 	bl	8006bac <RCCEx_PLL2_Config>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006170:	e00f      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006176:	3328      	adds	r3, #40	@ 0x28
 8006178:	2102      	movs	r1, #2
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fdc8 	bl	8006d10 <RCCEx_PLL3_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006186:	e004      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800618e:	e000      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006192:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800619a:	4b4b      	ldr	r3, [pc, #300]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061aa:	4a47      	ldr	r2, [pc, #284]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80061b0:	e003      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80061c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80061c8:	2300      	movs	r3, #0
 80061ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80061cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80061d0:	460b      	mov	r3, r1
 80061d2:	4313      	orrs	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061e2:	d01f      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80061e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061e8:	d818      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80061ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ee:	d003      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80061f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061f4:	d007      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80061f6:	e011      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f8:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	4a32      	ldr	r2, [pc, #200]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006204:	e00f      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	3328      	adds	r3, #40	@ 0x28
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fd7e 	bl	8006d10 <RCCEx_PLL3_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800621a:	e004      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006222:	e000      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006226:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800622e:	4b26      	ldr	r3, [pc, #152]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006232:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800623e:	4a22      	ldr	r2, [pc, #136]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006240:	430b      	orrs	r3, r1
 8006242:	6553      	str	r3, [r2, #84]	@ 0x54
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800625a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800625c:	2300      	movs	r3, #0
 800625e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006260:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d034      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006278:	d007      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800627a:	e011      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627c:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006288:	e00e      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	3308      	adds	r3, #8
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fc8a 	bl	8006bac <RCCEx_PLL2_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800629e:	e003      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10d      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062b0:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062be:	4a02      	ldr	r2, [pc, #8]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062c0:	430b      	orrs	r3, r1
 80062c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80062e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80062e2:	2300      	movs	r3, #0
 80062e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80062e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d00c      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	3328      	adds	r3, #40	@ 0x28
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fd09 	bl	8006d10 <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006316:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006318:	2300      	movs	r3, #0
 800631a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800631c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d036      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800632c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006330:	d018      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006336:	d811      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800633c:	d014      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800633e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006342:	d80b      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d011      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634c:	d106      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634e:	4bb7      	ldr	r3, [pc, #732]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	4ab6      	ldr	r2, [pc, #728]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800635a:	e008      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006364:	bf00      	nop
 8006366:	e002      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006376:	4bad      	ldr	r3, [pc, #692]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006384:	4aa9      	ldr	r2, [pc, #676]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6553      	str	r3, [r2, #84]	@ 0x54
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80063a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063a2:	2300      	movs	r3, #0
 80063a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80063a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063b0:	4b9e      	ldr	r3, [pc, #632]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063be:	4a9b      	ldr	r2, [pc, #620]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	2300      	movs	r3, #0
 80063d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80063da:	460b      	mov	r3, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063e0:	4b92      	ldr	r3, [pc, #584]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ee:	4a8f      	ldr	r2, [pc, #572]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006400:	643b      	str	r3, [r7, #64]	@ 0x40
 8006402:	2300      	movs	r3, #0
 8006404:	647b      	str	r3, [r7, #68]	@ 0x44
 8006406:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800640a:	460b      	mov	r3, r1
 800640c:	4313      	orrs	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006410:	4b86      	ldr	r3, [pc, #536]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4a85      	ldr	r2, [pc, #532]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006416:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800641a:	6113      	str	r3, [r2, #16]
 800641c:	4b83      	ldr	r3, [pc, #524]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800641e:	6919      	ldr	r1, [r3, #16]
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006428:	4a80      	ldr	r2, [pc, #512]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800643a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800643c:	2300      	movs	r3, #0
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006440:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800644a:	4b78      	ldr	r3, [pc, #480]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800644c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006458:	4a74      	ldr	r2, [pc, #464]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800645a:	430b      	orrs	r3, r1
 800645c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800646a:	633b      	str	r3, [r7, #48]	@ 0x30
 800646c:	2300      	movs	r3, #0
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006470:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006474:	460b      	mov	r3, r1
 8006476:	4313      	orrs	r3, r2
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800647a:	4b6c      	ldr	r3, [pc, #432]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	4a68      	ldr	r2, [pc, #416]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	2100      	movs	r1, #0
 800649a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d011      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b0:	3308      	adds	r3, #8
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fb79 	bl	8006bac <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80064c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	2100      	movs	r1, #0
 80064da:	6239      	str	r1, [r7, #32]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d011      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	3308      	adds	r3, #8
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fb59 	bl	8006bac <RCCEx_PLL2_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800650c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	2100      	movs	r1, #0
 800651a:	61b9      	str	r1, [r7, #24]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d011      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	3308      	adds	r3, #8
 8006532:	2102      	movs	r1, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fb39 	bl	8006bac <RCCEx_PLL2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800654c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	2100      	movs	r1, #0
 800655a:	6139      	str	r1, [r7, #16]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d011      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006570:	3328      	adds	r3, #40	@ 0x28
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fbcb 	bl	8006d10 <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	2100      	movs	r1, #0
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d011      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	3328      	adds	r3, #40	@ 0x28
 80065b2:	2101      	movs	r1, #1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fbab 	bl	8006d10 <RCCEx_PLL3_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80065c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	2100      	movs	r1, #0
 80065da:	6039      	str	r1, [r7, #0]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065e6:	460b      	mov	r3, r1
 80065e8:	4313      	orrs	r3, r2
 80065ea:	d011      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	3328      	adds	r3, #40	@ 0x28
 80065f2:	2102      	movs	r1, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fb8b 	bl	8006d10 <RCCEx_PLL3_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800660c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006610:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
}
 800661e:	4618      	mov	r0, r3
 8006620:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400

08006630 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006634:	f7fe fdbe 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	091b      	lsrs	r3, r3, #4
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4904      	ldr	r1, [pc, #16]	@ (8006658 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006646:	5ccb      	ldrb	r3, [r1, r3]
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006650:	4618      	mov	r0, r3
 8006652:	bd80      	pop	{r7, pc}
 8006654:	58024400 	.word	0x58024400
 8006658:	0800ad48 	.word	0x0800ad48

0800665c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800665c:	b480      	push	{r7}
 800665e:	b089      	sub	sp, #36	@ 0x24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006664:	4ba1      	ldr	r3, [pc, #644]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800666e:	4b9f      	ldr	r3, [pc, #636]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	0b1b      	lsrs	r3, r3, #12
 8006674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006678:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800667a:	4b9c      	ldr	r3, [pc, #624]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006686:	4b99      	ldr	r3, [pc, #612]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668a:	08db      	lsrs	r3, r3, #3
 800668c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8111 	beq.w	80068cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	f000 8083 	beq.w	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	f200 80a1 	bhi.w	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d056      	beq.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066c6:	e099      	b.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c8:	4b88      	ldr	r3, [pc, #544]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02d      	beq.n	8006730 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066d4:	4b85      	ldr	r3, [pc, #532]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	4a84      	ldr	r2, [pc, #528]	@ (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
 80066e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b7b      	ldr	r3, [pc, #492]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006712:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800672e:	e087      	b.n	8006840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b6a      	ldr	r3, [pc, #424]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a03 	vldr	s12, [r7, #12]
 8006756:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006772:	e065      	b.n	8006840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b59      	ldr	r3, [pc, #356]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a03 	vldr	s12, [r7, #12]
 800679a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b6:	e043      	b.n	8006840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ca:	4b48      	ldr	r3, [pc, #288]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067da:	ed97 6a03 	vldr	s12, [r7, #12]
 80067de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067fa:	e021      	b.n	8006840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680e:	4b37      	ldr	r3, [pc, #220]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006822:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800683e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006840:	4b2a      	ldr	r3, [pc, #168]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006844:	0a5b      	lsrs	r3, r3, #9
 8006846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800685a:	edd7 6a07 	vldr	s13, [r7, #28]
 800685e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006866:	ee17 2a90 	vmov	r2, s15
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800686e:	4b1f      	ldr	r3, [pc, #124]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006878:	ee07 3a90 	vmov	s15, r3
 800687c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006888:	edd7 6a07 	vldr	s13, [r7, #28]
 800688c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006894:	ee17 2a90 	vmov	r2, s15
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800689c:	4b13      	ldr	r3, [pc, #76]	@ (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800689e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a0:	0e1b      	lsrs	r3, r3, #24
 80068a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c2:	ee17 2a90 	vmov	r2, s15
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068ca:	e008      	b.n	80068de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	609a      	str	r2, [r3, #8]
}
 80068de:	bf00      	nop
 80068e0:	3724      	adds	r7, #36	@ 0x24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	58024400 	.word	0x58024400
 80068f0:	03d09000 	.word	0x03d09000
 80068f4:	46000000 	.word	0x46000000
 80068f8:	4c742400 	.word	0x4c742400
 80068fc:	4a742400 	.word	0x4a742400
 8006900:	4af42400 	.word	0x4af42400

08006904 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	@ 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800690c:	4ba1      	ldr	r3, [pc, #644]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006916:	4b9f      	ldr	r3, [pc, #636]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	0d1b      	lsrs	r3, r3, #20
 800691c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006920:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006922:	4b9c      	ldr	r3, [pc, #624]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800692e:	4b99      	ldr	r3, [pc, #612]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	08db      	lsrs	r3, r3, #3
 8006934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006946:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8111 	beq.w	8006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b02      	cmp	r3, #2
 8006956:	f000 8083 	beq.w	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b02      	cmp	r3, #2
 800695e:	f200 80a1 	bhi.w	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d056      	beq.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800696e:	e099      	b.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006970:	4b88      	ldr	r3, [pc, #544]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0320 	and.w	r3, r3, #32
 8006978:	2b00      	cmp	r3, #0
 800697a:	d02d      	beq.n	80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800697c:	4b85      	ldr	r3, [pc, #532]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	08db      	lsrs	r3, r3, #3
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	4a84      	ldr	r2, [pc, #528]	@ (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
 800698c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069d6:	e087      	b.n	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1a:	e065      	b.n	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b59      	ldr	r3, [pc, #356]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a5e:	e043      	b.n	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b48      	ldr	r3, [pc, #288]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa2:	e021      	b.n	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b37      	ldr	r3, [pc, #220]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	0a5b      	lsrs	r3, r3, #9
 8006aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b0e:	ee17 2a90 	vmov	r2, s15
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b16:	4b1f      	ldr	r3, [pc, #124]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b3c:	ee17 2a90 	vmov	r2, s15
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b44:	4b13      	ldr	r3, [pc, #76]	@ (8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b48:	0e1b      	lsrs	r3, r3, #24
 8006b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6a:	ee17 2a90 	vmov	r2, s15
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b72:	e008      	b.n	8006b86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]
}
 8006b86:	bf00      	nop
 8006b88:	3724      	adds	r7, #36	@ 0x24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	58024400 	.word	0x58024400
 8006b98:	03d09000 	.word	0x03d09000
 8006b9c:	46000000 	.word	0x46000000
 8006ba0:	4c742400 	.word	0x4c742400
 8006ba4:	4a742400 	.word	0x4a742400
 8006ba8:	4af42400 	.word	0x4af42400

08006bac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bba:	4b53      	ldr	r3, [pc, #332]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d101      	bne.n	8006bca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e099      	b.n	8006cfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bca:	4b4f      	ldr	r3, [pc, #316]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a4e      	ldr	r2, [pc, #312]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006bd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd6:	f7fa fbdf 	bl	8001398 <HAL_GetTick>
 8006bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bdc:	e008      	b.n	8006bf0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bde:	f7fa fbdb 	bl	8001398 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e086      	b.n	8006cfe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf0:	4b45      	ldr	r3, [pc, #276]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f0      	bne.n	8006bde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006bfc:	4b42      	ldr	r3, [pc, #264]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	493f      	ldr	r1, [pc, #252]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	025b      	lsls	r3, r3, #9
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	061b      	lsls	r3, r3, #24
 8006c3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c40:	4931      	ldr	r1, [pc, #196]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c46:	4b30      	ldr	r3, [pc, #192]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	492d      	ldr	r1, [pc, #180]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c58:	4b2b      	ldr	r3, [pc, #172]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	f023 0220 	bic.w	r2, r3, #32
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	4928      	ldr	r1, [pc, #160]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c6a:	4b27      	ldr	r3, [pc, #156]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	4a26      	ldr	r2, [pc, #152]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c76:	4b24      	ldr	r3, [pc, #144]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c7a:	4b24      	ldr	r3, [pc, #144]	@ (8006d0c <RCCEx_PLL2_Config+0x160>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	69d2      	ldr	r2, [r2, #28]
 8006c82:	00d2      	lsls	r2, r2, #3
 8006c84:	4920      	ldr	r1, [pc, #128]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c90:	f043 0310 	orr.w	r3, r3, #16
 8006c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d106      	bne.n	8006caa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	4a19      	ldr	r2, [pc, #100]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006ca2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ca8:	e00f      	b.n	8006cca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d106      	bne.n	8006cbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006cb0:	4b15      	ldr	r3, [pc, #84]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb4:	4a14      	ldr	r2, [pc, #80]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cbc:	e005      	b.n	8006cca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cbe:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	4a11      	ldr	r2, [pc, #68]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cca:	4b0f      	ldr	r3, [pc, #60]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a0e      	ldr	r2, [pc, #56]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006cd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd6:	f7fa fb5f 	bl	8001398 <HAL_GetTick>
 8006cda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cdc:	e008      	b.n	8006cf0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cde:	f7fa fb5b 	bl	8001398 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e006      	b.n	8006cfe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <RCCEx_PLL2_Config+0x15c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	ffff0007 	.word	0xffff0007

08006d10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d1e:	4b53      	ldr	r3, [pc, #332]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d101      	bne.n	8006d2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e099      	b.n	8006e62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a4e      	ldr	r2, [pc, #312]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d3a:	f7fa fb2d 	bl	8001398 <HAL_GetTick>
 8006d3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d40:	e008      	b.n	8006d54 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d42:	f7fa fb29 	bl	8001398 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d901      	bls.n	8006d54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e086      	b.n	8006e62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d54:	4b45      	ldr	r3, [pc, #276]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f0      	bne.n	8006d42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d60:	4b42      	ldr	r3, [pc, #264]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	051b      	lsls	r3, r3, #20
 8006d6e:	493f      	ldr	r1, [pc, #252]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	025b      	lsls	r3, r3, #9
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	041b      	lsls	r3, r3, #16
 8006d92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006da4:	4931      	ldr	r1, [pc, #196]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006daa:	4b30      	ldr	r3, [pc, #192]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	492d      	ldr	r1, [pc, #180]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	4928      	ldr	r1, [pc, #160]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dce:	4b27      	ldr	r3, [pc, #156]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	4a26      	ldr	r2, [pc, #152]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dda:	4b24      	ldr	r3, [pc, #144]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dde:	4b24      	ldr	r3, [pc, #144]	@ (8006e70 <RCCEx_PLL3_Config+0x160>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	69d2      	ldr	r2, [r2, #28]
 8006de6:	00d2      	lsls	r2, r2, #3
 8006de8:	4920      	ldr	r1, [pc, #128]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dee:	4b1f      	ldr	r3, [pc, #124]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e00:	4b1a      	ldr	r3, [pc, #104]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	4a19      	ldr	r2, [pc, #100]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e0c:	e00f      	b.n	8006e2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d106      	bne.n	8006e22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e14:	4b15      	ldr	r3, [pc, #84]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	4a14      	ldr	r2, [pc, #80]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e20:	e005      	b.n	8006e2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e22:	4b12      	ldr	r3, [pc, #72]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	4a11      	ldr	r2, [pc, #68]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a0e      	ldr	r2, [pc, #56]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3a:	f7fa faad 	bl	8001398 <HAL_GetTick>
 8006e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e40:	e008      	b.n	8006e54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e42:	f7fa faa9 	bl	8001398 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e006      	b.n	8006e62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <RCCEx_PLL3_Config+0x15c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0f0      	beq.n	8006e42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	ffff0007 	.word	0xffff0007

08006e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e049      	b.n	8006f1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f841 	bl	8006f22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f000 f9f6 	bl	80072a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d001      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e05e      	b.n	800700e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800701c <HAL_TIM_Base_Start_IT+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02c      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d027      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a27      	ldr	r2, [pc, #156]	@ (8007020 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a26      	ldr	r2, [pc, #152]	@ (8007024 <HAL_TIM_Base_Start_IT+0xec>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d01d      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a24      	ldr	r2, [pc, #144]	@ (8007028 <HAL_TIM_Base_Start_IT+0xf0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d018      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a23      	ldr	r2, [pc, #140]	@ (800702c <HAL_TIM_Base_Start_IT+0xf4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a21      	ldr	r2, [pc, #132]	@ (8007030 <HAL_TIM_Base_Start_IT+0xf8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a20      	ldr	r2, [pc, #128]	@ (8007034 <HAL_TIM_Base_Start_IT+0xfc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <HAL_TIM_Base_Start_IT+0x100>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <HAL_TIM_Base_Start_IT+0x104>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d115      	bne.n	8006ff8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007040 <HAL_TIM_Base_Start_IT+0x108>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b06      	cmp	r3, #6
 8006fdc:	d015      	beq.n	800700a <HAL_TIM_Base_Start_IT+0xd2>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe4:	d011      	beq.n	800700a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	e008      	b.n	800700a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	e000      	b.n	800700c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40010400 	.word	0x40010400
 8007030:	40001800 	.word	0x40001800
 8007034:	40014000 	.word	0x40014000
 8007038:	4000e000 	.word	0x4000e000
 800703c:	4000e400 	.word	0x4000e400
 8007040:	00010007 	.word	0x00010007

08007044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d020      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01b      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0202 	mvn.w	r2, #2
 8007078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8e9 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8db 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8ec 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d020      	beq.n	80070f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01b      	beq.n	80070f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0204 	mvn.w	r2, #4
 80070c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8c3 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 80070e0:	e005      	b.n	80070ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8b5 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8c6 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d020      	beq.n	8007140 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01b      	beq.n	8007140 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0208 	mvn.w	r2, #8
 8007110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2204      	movs	r2, #4
 8007116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f89d 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 800712c:	e005      	b.n	800713a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f88f 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8a0 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b00      	cmp	r3, #0
 8007148:	d020      	beq.n	800718c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01b      	beq.n	800718c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0210 	mvn.w	r2, #16
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2208      	movs	r2, #8
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f877 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f869 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f87a 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0201 	mvn.w	r2, #1
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7f9 fd9a 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f91f 	bl	800741c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00c      	beq.n	8007202 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80071fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f917 	bl	8007430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800721e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f834 	bl	800728e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00c      	beq.n	800724a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f06f 0220 	mvn.w	r2, #32
 8007242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8df 	bl	8007408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a4a      	ldr	r2, [pc, #296]	@ (80073e0 <TIM_Base_SetConfig+0x13c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	d00f      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a47      	ldr	r2, [pc, #284]	@ (80073e4 <TIM_Base_SetConfig+0x140>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a46      	ldr	r2, [pc, #280]	@ (80073e8 <TIM_Base_SetConfig+0x144>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a45      	ldr	r2, [pc, #276]	@ (80073ec <TIM_Base_SetConfig+0x148>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a44      	ldr	r2, [pc, #272]	@ (80073f0 <TIM_Base_SetConfig+0x14c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d108      	bne.n	80072f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a39      	ldr	r2, [pc, #228]	@ (80073e0 <TIM_Base_SetConfig+0x13c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d027      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007304:	d023      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a36      	ldr	r2, [pc, #216]	@ (80073e4 <TIM_Base_SetConfig+0x140>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d01f      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a35      	ldr	r2, [pc, #212]	@ (80073e8 <TIM_Base_SetConfig+0x144>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01b      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a34      	ldr	r2, [pc, #208]	@ (80073ec <TIM_Base_SetConfig+0x148>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d017      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a33      	ldr	r2, [pc, #204]	@ (80073f0 <TIM_Base_SetConfig+0x14c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a32      	ldr	r2, [pc, #200]	@ (80073f4 <TIM_Base_SetConfig+0x150>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00f      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a31      	ldr	r2, [pc, #196]	@ (80073f8 <TIM_Base_SetConfig+0x154>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00b      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a30      	ldr	r2, [pc, #192]	@ (80073fc <TIM_Base_SetConfig+0x158>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2f      	ldr	r2, [pc, #188]	@ (8007400 <TIM_Base_SetConfig+0x15c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2e      	ldr	r2, [pc, #184]	@ (8007404 <TIM_Base_SetConfig+0x160>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d108      	bne.n	8007360 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a16      	ldr	r2, [pc, #88]	@ (80073e0 <TIM_Base_SetConfig+0x13c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00f      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a18      	ldr	r2, [pc, #96]	@ (80073f0 <TIM_Base_SetConfig+0x14c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00b      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a17      	ldr	r2, [pc, #92]	@ (80073f4 <TIM_Base_SetConfig+0x150>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a16      	ldr	r2, [pc, #88]	@ (80073f8 <TIM_Base_SetConfig+0x154>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <TIM_Base_SetConfig+0x158>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d103      	bne.n	80073b4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d105      	bne.n	80073d2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]
  }
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40010400 	.word	0x40010400
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800
 8007400:	4000e000 	.word	0x4000e000
 8007404:	4000e400 	.word	0x4000e400

08007408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e042      	b.n	80074dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7f9 fd3f 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2224      	movs	r2, #36	@ 0x24
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 ff8e 	bl	80083b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f91f 	bl	80076d8 <UART_SetConfig>
 800749a:	4603      	mov	r3, r0
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e01b      	b.n	80074dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 f80d 	bl	80084f4 <UART_CheckIdleState>
 80074da:	4603      	mov	r3, r0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	@ 0x28
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d17b      	bne.n	80075f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <HAL_UART_Transmit+0x26>
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e074      	b.n	80075f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2221      	movs	r2, #33	@ 0x21
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800751e:	f7f9 ff3b 	bl	8001398 <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753c:	d108      	bne.n	8007550 <HAL_UART_Transmit+0x6c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	e003      	b.n	8007558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007558:	e030      	b.n	80075bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2200      	movs	r2, #0
 8007562:	2180      	movs	r1, #128	@ 0x80
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f001 f86f 	bl	8008648 <UART_WaitOnFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e03d      	b.n	80075f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	3302      	adds	r3, #2
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e007      	b.n	80075aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	781a      	ldrb	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1c8      	bne.n	800755a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2200      	movs	r2, #0
 80075d0:	2140      	movs	r1, #64	@ 0x40
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f001 f838 	bl	8008648 <UART_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e006      	b.n	80075f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	e000      	b.n	80075f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
  }
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007614:	2b20      	cmp	r3, #32
 8007616:	d137      	bne.n	8007688 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Receive_DMA+0x24>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e030      	b.n	800768a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <HAL_UART_Receive_DMA+0x94>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01f      	beq.n	8007678 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d018      	beq.n	8007678 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	613b      	str	r3, [r7, #16]
   return(result);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	623b      	str	r3, [r7, #32]
 8007666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69f9      	ldr	r1, [r7, #28]
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	61bb      	str	r3, [r7, #24]
   return(result);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	461a      	mov	r2, r3
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 f850 	bl	8008724 <UART_Start_Receive_DMA>
 8007684:	4603      	mov	r3, r0
 8007686:	e000      	b.n	800768a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  }
}
 800768a:	4618      	mov	r0, r3
 800768c:	3728      	adds	r7, #40	@ 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	58000c00 	.word	0x58000c00

08007698 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076dc:	b092      	sub	sp, #72	@ 0x48
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4bbe      	ldr	r3, [pc, #760]	@ (8007a00 <UART_SetConfig+0x328>)
 8007708:	4013      	ands	r3, r2
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007710:	430b      	orrs	r3, r1
 8007712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4ab3      	ldr	r2, [pc, #716]	@ (8007a04 <UART_SetConfig+0x32c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007740:	4313      	orrs	r3, r2
 8007742:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	4baf      	ldr	r3, [pc, #700]	@ (8007a08 <UART_SetConfig+0x330>)
 800774c:	4013      	ands	r3, r2
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007754:	430b      	orrs	r3, r1
 8007756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775e:	f023 010f 	bic.w	r1, r3, #15
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4aa6      	ldr	r2, [pc, #664]	@ (8007a0c <UART_SetConfig+0x334>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d177      	bne.n	8007868 <UART_SetConfig+0x190>
 8007778:	4ba5      	ldr	r3, [pc, #660]	@ (8007a10 <UART_SetConfig+0x338>)
 800777a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007780:	2b28      	cmp	r3, #40	@ 0x28
 8007782:	d86d      	bhi.n	8007860 <UART_SetConfig+0x188>
 8007784:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <UART_SetConfig+0xb4>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	08007831 	.word	0x08007831
 8007790:	08007861 	.word	0x08007861
 8007794:	08007861 	.word	0x08007861
 8007798:	08007861 	.word	0x08007861
 800779c:	08007861 	.word	0x08007861
 80077a0:	08007861 	.word	0x08007861
 80077a4:	08007861 	.word	0x08007861
 80077a8:	08007861 	.word	0x08007861
 80077ac:	08007839 	.word	0x08007839
 80077b0:	08007861 	.word	0x08007861
 80077b4:	08007861 	.word	0x08007861
 80077b8:	08007861 	.word	0x08007861
 80077bc:	08007861 	.word	0x08007861
 80077c0:	08007861 	.word	0x08007861
 80077c4:	08007861 	.word	0x08007861
 80077c8:	08007861 	.word	0x08007861
 80077cc:	08007841 	.word	0x08007841
 80077d0:	08007861 	.word	0x08007861
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007861 	.word	0x08007861
 80077dc:	08007861 	.word	0x08007861
 80077e0:	08007861 	.word	0x08007861
 80077e4:	08007861 	.word	0x08007861
 80077e8:	08007861 	.word	0x08007861
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007861 	.word	0x08007861
 80077f4:	08007861 	.word	0x08007861
 80077f8:	08007861 	.word	0x08007861
 80077fc:	08007861 	.word	0x08007861
 8007800:	08007861 	.word	0x08007861
 8007804:	08007861 	.word	0x08007861
 8007808:	08007861 	.word	0x08007861
 800780c:	08007851 	.word	0x08007851
 8007810:	08007861 	.word	0x08007861
 8007814:	08007861 	.word	0x08007861
 8007818:	08007861 	.word	0x08007861
 800781c:	08007861 	.word	0x08007861
 8007820:	08007861 	.word	0x08007861
 8007824:	08007861 	.word	0x08007861
 8007828:	08007861 	.word	0x08007861
 800782c:	08007859 	.word	0x08007859
 8007830:	2301      	movs	r3, #1
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e326      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007838:	2304      	movs	r3, #4
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e322      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007840:	2308      	movs	r3, #8
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e31e      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007848:	2310      	movs	r3, #16
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e31a      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007850:	2320      	movs	r3, #32
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e316      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007858:	2340      	movs	r3, #64	@ 0x40
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e312      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007860:	2380      	movs	r3, #128	@ 0x80
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e30e      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a69      	ldr	r2, [pc, #420]	@ (8007a14 <UART_SetConfig+0x33c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d130      	bne.n	80078d4 <UART_SetConfig+0x1fc>
 8007872:	4b67      	ldr	r3, [pc, #412]	@ (8007a10 <UART_SetConfig+0x338>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b05      	cmp	r3, #5
 800787c:	d826      	bhi.n	80078cc <UART_SetConfig+0x1f4>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <UART_SetConfig+0x1ac>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078a5 	.word	0x080078a5
 800788c:	080078ad 	.word	0x080078ad
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e2f0      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e2ec      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e2e8      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e2e4      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078bc:	2320      	movs	r3, #32
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e2e0      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078c4:	2340      	movs	r3, #64	@ 0x40
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e2dc      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078cc:	2380      	movs	r3, #128	@ 0x80
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e2d8      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a4f      	ldr	r2, [pc, #316]	@ (8007a18 <UART_SetConfig+0x340>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d130      	bne.n	8007940 <UART_SetConfig+0x268>
 80078de:	4b4c      	ldr	r3, [pc, #304]	@ (8007a10 <UART_SetConfig+0x338>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b05      	cmp	r3, #5
 80078e8:	d826      	bhi.n	8007938 <UART_SetConfig+0x260>
 80078ea:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <UART_SetConfig+0x218>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007909 	.word	0x08007909
 80078f4:	08007911 	.word	0x08007911
 80078f8:	08007919 	.word	0x08007919
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007929 	.word	0x08007929
 8007904:	08007931 	.word	0x08007931
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e2ba      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e2b6      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e2b2      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e2ae      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007928:	2320      	movs	r3, #32
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e2aa      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007930:	2340      	movs	r3, #64	@ 0x40
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e2a6      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007938:	2380      	movs	r3, #128	@ 0x80
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e2a2      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a35      	ldr	r2, [pc, #212]	@ (8007a1c <UART_SetConfig+0x344>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d130      	bne.n	80079ac <UART_SetConfig+0x2d4>
 800794a:	4b31      	ldr	r3, [pc, #196]	@ (8007a10 <UART_SetConfig+0x338>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b05      	cmp	r3, #5
 8007954:	d826      	bhi.n	80079a4 <UART_SetConfig+0x2cc>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x284>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007975 	.word	0x08007975
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007985 	.word	0x08007985
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007995 	.word	0x08007995
 8007970:	0800799d 	.word	0x0800799d
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e284      	b.n	8007e86 <UART_SetConfig+0x7ae>
 800797c:	2304      	movs	r3, #4
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e280      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007984:	2308      	movs	r3, #8
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e27c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e278      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e274      	b.n	8007e86 <UART_SetConfig+0x7ae>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e270      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e26c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a20 <UART_SetConfig+0x348>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d142      	bne.n	8007a3c <UART_SetConfig+0x364>
 80079b6:	4b16      	ldr	r3, [pc, #88]	@ (8007a10 <UART_SetConfig+0x338>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d838      	bhi.n	8007a34 <UART_SetConfig+0x35c>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x2f0>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a25 	.word	0x08007a25
 80079dc:	08007a2d 	.word	0x08007a2d
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e24e      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e24a      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e246      	b.n	8007e86 <UART_SetConfig+0x7ae>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e242      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007a00:	cfff69f3 	.word	0xcfff69f3
 8007a04:	58000c00 	.word	0x58000c00
 8007a08:	11fff4ff 	.word	0x11fff4ff
 8007a0c:	40011000 	.word	0x40011000
 8007a10:	58024400 	.word	0x58024400
 8007a14:	40004400 	.word	0x40004400
 8007a18:	40004800 	.word	0x40004800
 8007a1c:	40004c00 	.word	0x40004c00
 8007a20:	40005000 	.word	0x40005000
 8007a24:	2320      	movs	r3, #32
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e22c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007a2c:	2340      	movs	r3, #64	@ 0x40
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e228      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007a34:	2380      	movs	r3, #128	@ 0x80
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e224      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4ab1      	ldr	r2, [pc, #708]	@ (8007d08 <UART_SetConfig+0x630>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d176      	bne.n	8007b34 <UART_SetConfig+0x45c>
 8007a46:	4bb1      	ldr	r3, [pc, #708]	@ (8007d0c <UART_SetConfig+0x634>)
 8007a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a4e:	2b28      	cmp	r3, #40	@ 0x28
 8007a50:	d86c      	bhi.n	8007b2c <UART_SetConfig+0x454>
 8007a52:	a201      	add	r2, pc, #4	@ (adr r2, 8007a58 <UART_SetConfig+0x380>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007afd 	.word	0x08007afd
 8007a5c:	08007b2d 	.word	0x08007b2d
 8007a60:	08007b2d 	.word	0x08007b2d
 8007a64:	08007b2d 	.word	0x08007b2d
 8007a68:	08007b2d 	.word	0x08007b2d
 8007a6c:	08007b2d 	.word	0x08007b2d
 8007a70:	08007b2d 	.word	0x08007b2d
 8007a74:	08007b2d 	.word	0x08007b2d
 8007a78:	08007b05 	.word	0x08007b05
 8007a7c:	08007b2d 	.word	0x08007b2d
 8007a80:	08007b2d 	.word	0x08007b2d
 8007a84:	08007b2d 	.word	0x08007b2d
 8007a88:	08007b2d 	.word	0x08007b2d
 8007a8c:	08007b2d 	.word	0x08007b2d
 8007a90:	08007b2d 	.word	0x08007b2d
 8007a94:	08007b2d 	.word	0x08007b2d
 8007a98:	08007b0d 	.word	0x08007b0d
 8007a9c:	08007b2d 	.word	0x08007b2d
 8007aa0:	08007b2d 	.word	0x08007b2d
 8007aa4:	08007b2d 	.word	0x08007b2d
 8007aa8:	08007b2d 	.word	0x08007b2d
 8007aac:	08007b2d 	.word	0x08007b2d
 8007ab0:	08007b2d 	.word	0x08007b2d
 8007ab4:	08007b2d 	.word	0x08007b2d
 8007ab8:	08007b15 	.word	0x08007b15
 8007abc:	08007b2d 	.word	0x08007b2d
 8007ac0:	08007b2d 	.word	0x08007b2d
 8007ac4:	08007b2d 	.word	0x08007b2d
 8007ac8:	08007b2d 	.word	0x08007b2d
 8007acc:	08007b2d 	.word	0x08007b2d
 8007ad0:	08007b2d 	.word	0x08007b2d
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b1d 	.word	0x08007b1d
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007b2d 	.word	0x08007b2d
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b2d 	.word	0x08007b2d
 8007aec:	08007b2d 	.word	0x08007b2d
 8007af0:	08007b2d 	.word	0x08007b2d
 8007af4:	08007b2d 	.word	0x08007b2d
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e1c0      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e1bc      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e1b8      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e1b4      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e1b0      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b24:	2340      	movs	r3, #64	@ 0x40
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e1ac      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b2c:	2380      	movs	r3, #128	@ 0x80
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e1a8      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a75      	ldr	r2, [pc, #468]	@ (8007d10 <UART_SetConfig+0x638>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d130      	bne.n	8007ba0 <UART_SetConfig+0x4c8>
 8007b3e:	4b73      	ldr	r3, [pc, #460]	@ (8007d0c <UART_SetConfig+0x634>)
 8007b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d826      	bhi.n	8007b98 <UART_SetConfig+0x4c0>
 8007b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <UART_SetConfig+0x478>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e18a      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e186      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e182      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e17e      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e17a      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b90:	2340      	movs	r3, #64	@ 0x40
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e176      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007b98:	2380      	movs	r3, #128	@ 0x80
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e172      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a5b      	ldr	r2, [pc, #364]	@ (8007d14 <UART_SetConfig+0x63c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d130      	bne.n	8007c0c <UART_SetConfig+0x534>
 8007baa:	4b58      	ldr	r3, [pc, #352]	@ (8007d0c <UART_SetConfig+0x634>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d826      	bhi.n	8007c04 <UART_SetConfig+0x52c>
 8007bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <UART_SetConfig+0x4e4>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bd5 	.word	0x08007bd5
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007be5 	.word	0x08007be5
 8007bc8:	08007bed 	.word	0x08007bed
 8007bcc:	08007bf5 	.word	0x08007bf5
 8007bd0:	08007bfd 	.word	0x08007bfd
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e154      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e150      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e14c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e148      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e144      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007bfc:	2340      	movs	r3, #64	@ 0x40
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e140      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007c04:	2380      	movs	r3, #128	@ 0x80
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e13c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a41      	ldr	r2, [pc, #260]	@ (8007d18 <UART_SetConfig+0x640>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	f040 8082 	bne.w	8007d1c <UART_SetConfig+0x644>
 8007c18:	4b3c      	ldr	r3, [pc, #240]	@ (8007d0c <UART_SetConfig+0x634>)
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c20:	2b28      	cmp	r3, #40	@ 0x28
 8007c22:	d86d      	bhi.n	8007d00 <UART_SetConfig+0x628>
 8007c24:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <UART_SetConfig+0x554>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007d01 	.word	0x08007d01
 8007c34:	08007d01 	.word	0x08007d01
 8007c38:	08007d01 	.word	0x08007d01
 8007c3c:	08007d01 	.word	0x08007d01
 8007c40:	08007d01 	.word	0x08007d01
 8007c44:	08007d01 	.word	0x08007d01
 8007c48:	08007d01 	.word	0x08007d01
 8007c4c:	08007cd9 	.word	0x08007cd9
 8007c50:	08007d01 	.word	0x08007d01
 8007c54:	08007d01 	.word	0x08007d01
 8007c58:	08007d01 	.word	0x08007d01
 8007c5c:	08007d01 	.word	0x08007d01
 8007c60:	08007d01 	.word	0x08007d01
 8007c64:	08007d01 	.word	0x08007d01
 8007c68:	08007d01 	.word	0x08007d01
 8007c6c:	08007ce1 	.word	0x08007ce1
 8007c70:	08007d01 	.word	0x08007d01
 8007c74:	08007d01 	.word	0x08007d01
 8007c78:	08007d01 	.word	0x08007d01
 8007c7c:	08007d01 	.word	0x08007d01
 8007c80:	08007d01 	.word	0x08007d01
 8007c84:	08007d01 	.word	0x08007d01
 8007c88:	08007d01 	.word	0x08007d01
 8007c8c:	08007ce9 	.word	0x08007ce9
 8007c90:	08007d01 	.word	0x08007d01
 8007c94:	08007d01 	.word	0x08007d01
 8007c98:	08007d01 	.word	0x08007d01
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d01 	.word	0x08007d01
 8007ca4:	08007d01 	.word	0x08007d01
 8007ca8:	08007d01 	.word	0x08007d01
 8007cac:	08007cf1 	.word	0x08007cf1
 8007cb0:	08007d01 	.word	0x08007d01
 8007cb4:	08007d01 	.word	0x08007d01
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d01 	.word	0x08007d01
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	08007d01 	.word	0x08007d01
 8007cc8:	08007d01 	.word	0x08007d01
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e0d6      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007cd8:	2304      	movs	r3, #4
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cde:	e0d2      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce6:	e0ce      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e0ca      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007cf0:	2320      	movs	r3, #32
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf6:	e0c6      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007cf8:	2340      	movs	r3, #64	@ 0x40
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfe:	e0c2      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007d00:	2380      	movs	r3, #128	@ 0x80
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d06:	e0be      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007d08:	40011400 	.word	0x40011400
 8007d0c:	58024400 	.word	0x58024400
 8007d10:	40007800 	.word	0x40007800
 8007d14:	40007c00 	.word	0x40007c00
 8007d18:	40011800 	.word	0x40011800
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4aad      	ldr	r2, [pc, #692]	@ (8007fd8 <UART_SetConfig+0x900>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d176      	bne.n	8007e14 <UART_SetConfig+0x73c>
 8007d26:	4bad      	ldr	r3, [pc, #692]	@ (8007fdc <UART_SetConfig+0x904>)
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d2e:	2b28      	cmp	r3, #40	@ 0x28
 8007d30:	d86c      	bhi.n	8007e0c <UART_SetConfig+0x734>
 8007d32:	a201      	add	r2, pc, #4	@ (adr r2, 8007d38 <UART_SetConfig+0x660>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007ddd 	.word	0x08007ddd
 8007d3c:	08007e0d 	.word	0x08007e0d
 8007d40:	08007e0d 	.word	0x08007e0d
 8007d44:	08007e0d 	.word	0x08007e0d
 8007d48:	08007e0d 	.word	0x08007e0d
 8007d4c:	08007e0d 	.word	0x08007e0d
 8007d50:	08007e0d 	.word	0x08007e0d
 8007d54:	08007e0d 	.word	0x08007e0d
 8007d58:	08007de5 	.word	0x08007de5
 8007d5c:	08007e0d 	.word	0x08007e0d
 8007d60:	08007e0d 	.word	0x08007e0d
 8007d64:	08007e0d 	.word	0x08007e0d
 8007d68:	08007e0d 	.word	0x08007e0d
 8007d6c:	08007e0d 	.word	0x08007e0d
 8007d70:	08007e0d 	.word	0x08007e0d
 8007d74:	08007e0d 	.word	0x08007e0d
 8007d78:	08007ded 	.word	0x08007ded
 8007d7c:	08007e0d 	.word	0x08007e0d
 8007d80:	08007e0d 	.word	0x08007e0d
 8007d84:	08007e0d 	.word	0x08007e0d
 8007d88:	08007e0d 	.word	0x08007e0d
 8007d8c:	08007e0d 	.word	0x08007e0d
 8007d90:	08007e0d 	.word	0x08007e0d
 8007d94:	08007e0d 	.word	0x08007e0d
 8007d98:	08007df5 	.word	0x08007df5
 8007d9c:	08007e0d 	.word	0x08007e0d
 8007da0:	08007e0d 	.word	0x08007e0d
 8007da4:	08007e0d 	.word	0x08007e0d
 8007da8:	08007e0d 	.word	0x08007e0d
 8007dac:	08007e0d 	.word	0x08007e0d
 8007db0:	08007e0d 	.word	0x08007e0d
 8007db4:	08007e0d 	.word	0x08007e0d
 8007db8:	08007dfd 	.word	0x08007dfd
 8007dbc:	08007e0d 	.word	0x08007e0d
 8007dc0:	08007e0d 	.word	0x08007e0d
 8007dc4:	08007e0d 	.word	0x08007e0d
 8007dc8:	08007e0d 	.word	0x08007e0d
 8007dcc:	08007e0d 	.word	0x08007e0d
 8007dd0:	08007e0d 	.word	0x08007e0d
 8007dd4:	08007e0d 	.word	0x08007e0d
 8007dd8:	08007e05 	.word	0x08007e05
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e050      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007de4:	2304      	movs	r3, #4
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e04c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007dec:	2308      	movs	r3, #8
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e048      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e044      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e040      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e04:	2340      	movs	r3, #64	@ 0x40
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e03c      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e0c:	2380      	movs	r3, #128	@ 0x80
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e038      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a71      	ldr	r2, [pc, #452]	@ (8007fe0 <UART_SetConfig+0x908>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d130      	bne.n	8007e80 <UART_SetConfig+0x7a8>
 8007e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8007fdc <UART_SetConfig+0x904>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	d826      	bhi.n	8007e78 <UART_SetConfig+0x7a0>
 8007e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <UART_SetConfig+0x758>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007e51 	.word	0x08007e51
 8007e38:	08007e59 	.word	0x08007e59
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	2302      	movs	r3, #2
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e01a      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e016      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e012      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e60:	2310      	movs	r3, #16
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e00e      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6e:	e00a      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e70:	2340      	movs	r3, #64	@ 0x40
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e76:	e006      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e78:	2380      	movs	r3, #128	@ 0x80
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7e:	e002      	b.n	8007e86 <UART_SetConfig+0x7ae>
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a55      	ldr	r2, [pc, #340]	@ (8007fe0 <UART_SetConfig+0x908>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	f040 80f8 	bne.w	8008082 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	dc46      	bgt.n	8007f28 <UART_SetConfig+0x850>
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	db75      	blt.n	8007f8a <UART_SetConfig+0x8b2>
 8007e9e:	3b02      	subs	r3, #2
 8007ea0:	2b1e      	cmp	r3, #30
 8007ea2:	d872      	bhi.n	8007f8a <UART_SetConfig+0x8b2>
 8007ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <UART_SetConfig+0x7d4>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007f2f 	.word	0x08007f2f
 8007eb0:	08007f8b 	.word	0x08007f8b
 8007eb4:	08007f37 	.word	0x08007f37
 8007eb8:	08007f8b 	.word	0x08007f8b
 8007ebc:	08007f8b 	.word	0x08007f8b
 8007ec0:	08007f8b 	.word	0x08007f8b
 8007ec4:	08007f47 	.word	0x08007f47
 8007ec8:	08007f8b 	.word	0x08007f8b
 8007ecc:	08007f8b 	.word	0x08007f8b
 8007ed0:	08007f8b 	.word	0x08007f8b
 8007ed4:	08007f8b 	.word	0x08007f8b
 8007ed8:	08007f8b 	.word	0x08007f8b
 8007edc:	08007f8b 	.word	0x08007f8b
 8007ee0:	08007f8b 	.word	0x08007f8b
 8007ee4:	08007f57 	.word	0x08007f57
 8007ee8:	08007f8b 	.word	0x08007f8b
 8007eec:	08007f8b 	.word	0x08007f8b
 8007ef0:	08007f8b 	.word	0x08007f8b
 8007ef4:	08007f8b 	.word	0x08007f8b
 8007ef8:	08007f8b 	.word	0x08007f8b
 8007efc:	08007f8b 	.word	0x08007f8b
 8007f00:	08007f8b 	.word	0x08007f8b
 8007f04:	08007f8b 	.word	0x08007f8b
 8007f08:	08007f8b 	.word	0x08007f8b
 8007f0c:	08007f8b 	.word	0x08007f8b
 8007f10:	08007f8b 	.word	0x08007f8b
 8007f14:	08007f8b 	.word	0x08007f8b
 8007f18:	08007f8b 	.word	0x08007f8b
 8007f1c:	08007f8b 	.word	0x08007f8b
 8007f20:	08007f8b 	.word	0x08007f8b
 8007f24:	08007f7d 	.word	0x08007f7d
 8007f28:	2b40      	cmp	r3, #64	@ 0x40
 8007f2a:	d02a      	beq.n	8007f82 <UART_SetConfig+0x8aa>
 8007f2c:	e02d      	b.n	8007f8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f2e:	f7fe fb7f 	bl	8006630 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f34:	e02f      	b.n	8007f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fb8e 	bl	800665c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f44:	e027      	b.n	8007f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fcda 	bl	8006904 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f54:	e01f      	b.n	8007f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f56:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <UART_SetConfig+0x904>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f62:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <UART_SetConfig+0x904>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe4 <UART_SetConfig+0x90c>)
 8007f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f74:	e00f      	b.n	8007f96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f76:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe4 <UART_SetConfig+0x90c>)
 8007f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7a:	e00c      	b.n	8007f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe8 <UART_SetConfig+0x910>)
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f80:	e009      	b.n	8007f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f88:	e005      	b.n	8007f96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 81ee 	beq.w	800837a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa2:	4a12      	ldr	r2, [pc, #72]	@ (8007fec <UART_SetConfig+0x914>)
 8007fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fb0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4413      	add	r3, r2
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d305      	bcc.n	8007fce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d910      	bls.n	8007ff0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fd4:	e1d1      	b.n	800837a <UART_SetConfig+0xca2>
 8007fd6:	bf00      	nop
 8007fd8:	40011c00 	.word	0x40011c00
 8007fdc:	58024400 	.word	0x58024400
 8007fe0:	58000c00 	.word	0x58000c00
 8007fe4:	03d09000 	.word	0x03d09000
 8007fe8:	003d0900 	.word	0x003d0900
 8007fec:	0800ad60 	.word	0x0800ad60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
 8007ff6:	60fa      	str	r2, [r7, #12]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	4ac0      	ldr	r2, [pc, #768]	@ (8008300 <UART_SetConfig+0xc28>)
 8007ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008002:	b29b      	uxth	r3, r3
 8008004:	2200      	movs	r2, #0
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800800e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008012:	f7f8 f9d5 	bl	80003c0 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	f04f 0200 	mov.w	r2, #0
 8008022:	f04f 0300 	mov.w	r3, #0
 8008026:	020b      	lsls	r3, r1, #8
 8008028:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800802c:	0202      	lsls	r2, r0, #8
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	6849      	ldr	r1, [r1, #4]
 8008032:	0849      	lsrs	r1, r1, #1
 8008034:	2000      	movs	r0, #0
 8008036:	460c      	mov	r4, r1
 8008038:	4605      	mov	r5, r0
 800803a:	eb12 0804 	adds.w	r8, r2, r4
 800803e:	eb43 0905 	adc.w	r9, r3, r5
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	469a      	mov	sl, r3
 800804a:	4693      	mov	fp, r2
 800804c:	4652      	mov	r2, sl
 800804e:	465b      	mov	r3, fp
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 f9b4 	bl	80003c0 <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4613      	mov	r3, r2
 800805e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008066:	d308      	bcc.n	800807a <UART_SetConfig+0x9a2>
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806e:	d204      	bcs.n	800807a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008076:	60da      	str	r2, [r3, #12]
 8008078:	e17f      	b.n	800837a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008080:	e17b      	b.n	800837a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800808a:	f040 80bd 	bne.w	8008208 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800808e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008092:	2b20      	cmp	r3, #32
 8008094:	dc48      	bgt.n	8008128 <UART_SetConfig+0xa50>
 8008096:	2b00      	cmp	r3, #0
 8008098:	db7b      	blt.n	8008192 <UART_SetConfig+0xaba>
 800809a:	2b20      	cmp	r3, #32
 800809c:	d879      	bhi.n	8008192 <UART_SetConfig+0xaba>
 800809e:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <UART_SetConfig+0x9cc>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	0800812f 	.word	0x0800812f
 80080a8:	08008137 	.word	0x08008137
 80080ac:	08008193 	.word	0x08008193
 80080b0:	08008193 	.word	0x08008193
 80080b4:	0800813f 	.word	0x0800813f
 80080b8:	08008193 	.word	0x08008193
 80080bc:	08008193 	.word	0x08008193
 80080c0:	08008193 	.word	0x08008193
 80080c4:	0800814f 	.word	0x0800814f
 80080c8:	08008193 	.word	0x08008193
 80080cc:	08008193 	.word	0x08008193
 80080d0:	08008193 	.word	0x08008193
 80080d4:	08008193 	.word	0x08008193
 80080d8:	08008193 	.word	0x08008193
 80080dc:	08008193 	.word	0x08008193
 80080e0:	08008193 	.word	0x08008193
 80080e4:	0800815f 	.word	0x0800815f
 80080e8:	08008193 	.word	0x08008193
 80080ec:	08008193 	.word	0x08008193
 80080f0:	08008193 	.word	0x08008193
 80080f4:	08008193 	.word	0x08008193
 80080f8:	08008193 	.word	0x08008193
 80080fc:	08008193 	.word	0x08008193
 8008100:	08008193 	.word	0x08008193
 8008104:	08008193 	.word	0x08008193
 8008108:	08008193 	.word	0x08008193
 800810c:	08008193 	.word	0x08008193
 8008110:	08008193 	.word	0x08008193
 8008114:	08008193 	.word	0x08008193
 8008118:	08008193 	.word	0x08008193
 800811c:	08008193 	.word	0x08008193
 8008120:	08008193 	.word	0x08008193
 8008124:	08008185 	.word	0x08008185
 8008128:	2b40      	cmp	r3, #64	@ 0x40
 800812a:	d02e      	beq.n	800818a <UART_SetConfig+0xab2>
 800812c:	e031      	b.n	8008192 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800812e:	f7fd f871 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 8008132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008134:	e033      	b.n	800819e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008136:	f7fd f883 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 800813a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800813c:	e02f      	b.n	800819e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fa8a 	bl	800665c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814c:	e027      	b.n	800819e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fbd6 	bl	8006904 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815c:	e01f      	b.n	800819e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815e:	4b69      	ldr	r3, [pc, #420]	@ (8008304 <UART_SetConfig+0xc2c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800816a:	4b66      	ldr	r3, [pc, #408]	@ (8008304 <UART_SetConfig+0xc2c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a64      	ldr	r2, [pc, #400]	@ (8008308 <UART_SetConfig+0xc30>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800817c:	e00f      	b.n	800819e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800817e:	4b62      	ldr	r3, [pc, #392]	@ (8008308 <UART_SetConfig+0xc30>)
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008182:	e00c      	b.n	800819e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008184:	4b61      	ldr	r3, [pc, #388]	@ (800830c <UART_SetConfig+0xc34>)
 8008186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008188:	e009      	b.n	800819e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008190:	e005      	b.n	800819e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800819c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800819e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 80ea 	beq.w	800837a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081aa:	4a55      	ldr	r2, [pc, #340]	@ (8008300 <UART_SetConfig+0xc28>)
 80081ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b8:	005a      	lsls	r2, r3, #1
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	441a      	add	r2, r3
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	d916      	bls.n	8008200 <UART_SetConfig+0xb28>
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d8:	d212      	bcs.n	8008200 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f023 030f 	bic.w	r3, r3, #15
 80081e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081f2:	4313      	orrs	r3, r2
 80081f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081fc:	60da      	str	r2, [r3, #12]
 80081fe:	e0bc      	b.n	800837a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008206:	e0b8      	b.n	800837a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008208:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800820c:	2b20      	cmp	r3, #32
 800820e:	dc4b      	bgt.n	80082a8 <UART_SetConfig+0xbd0>
 8008210:	2b00      	cmp	r3, #0
 8008212:	f2c0 8087 	blt.w	8008324 <UART_SetConfig+0xc4c>
 8008216:	2b20      	cmp	r3, #32
 8008218:	f200 8084 	bhi.w	8008324 <UART_SetConfig+0xc4c>
 800821c:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <UART_SetConfig+0xb4c>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	080082af 	.word	0x080082af
 8008228:	080082b7 	.word	0x080082b7
 800822c:	08008325 	.word	0x08008325
 8008230:	08008325 	.word	0x08008325
 8008234:	080082bf 	.word	0x080082bf
 8008238:	08008325 	.word	0x08008325
 800823c:	08008325 	.word	0x08008325
 8008240:	08008325 	.word	0x08008325
 8008244:	080082cf 	.word	0x080082cf
 8008248:	08008325 	.word	0x08008325
 800824c:	08008325 	.word	0x08008325
 8008250:	08008325 	.word	0x08008325
 8008254:	08008325 	.word	0x08008325
 8008258:	08008325 	.word	0x08008325
 800825c:	08008325 	.word	0x08008325
 8008260:	08008325 	.word	0x08008325
 8008264:	080082df 	.word	0x080082df
 8008268:	08008325 	.word	0x08008325
 800826c:	08008325 	.word	0x08008325
 8008270:	08008325 	.word	0x08008325
 8008274:	08008325 	.word	0x08008325
 8008278:	08008325 	.word	0x08008325
 800827c:	08008325 	.word	0x08008325
 8008280:	08008325 	.word	0x08008325
 8008284:	08008325 	.word	0x08008325
 8008288:	08008325 	.word	0x08008325
 800828c:	08008325 	.word	0x08008325
 8008290:	08008325 	.word	0x08008325
 8008294:	08008325 	.word	0x08008325
 8008298:	08008325 	.word	0x08008325
 800829c:	08008325 	.word	0x08008325
 80082a0:	08008325 	.word	0x08008325
 80082a4:	08008317 	.word	0x08008317
 80082a8:	2b40      	cmp	r3, #64	@ 0x40
 80082aa:	d037      	beq.n	800831c <UART_SetConfig+0xc44>
 80082ac:	e03a      	b.n	8008324 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ae:	f7fc ffb1 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 80082b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082b4:	e03c      	b.n	8008330 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082b6:	f7fc ffc3 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 80082ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082bc:	e038      	b.n	8008330 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe f9ca 	bl	800665c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082cc:	e030      	b.n	8008330 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ce:	f107 0318 	add.w	r3, r7, #24
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fb16 	bl	8006904 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082dc:	e028      	b.n	8008330 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <UART_SetConfig+0xc2c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d012      	beq.n	8008310 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <UART_SetConfig+0xc2c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	08db      	lsrs	r3, r3, #3
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	4a04      	ldr	r2, [pc, #16]	@ (8008308 <UART_SetConfig+0xc30>)
 80082f6:	fa22 f303 	lsr.w	r3, r2, r3
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082fc:	e018      	b.n	8008330 <UART_SetConfig+0xc58>
 80082fe:	bf00      	nop
 8008300:	0800ad60 	.word	0x0800ad60
 8008304:	58024400 	.word	0x58024400
 8008308:	03d09000 	.word	0x03d09000
 800830c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008310:	4b24      	ldr	r3, [pc, #144]	@ (80083a4 <UART_SetConfig+0xccc>)
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008314:	e00c      	b.n	8008330 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008316:	4b24      	ldr	r3, [pc, #144]	@ (80083a8 <UART_SetConfig+0xcd0>)
 8008318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800831a:	e009      	b.n	8008330 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800831c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008322:	e005      	b.n	8008330 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800832e:	bf00      	nop
    }

    if (pclk != 0U)
 8008330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d021      	beq.n	800837a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833a:	4a1c      	ldr	r2, [pc, #112]	@ (80083ac <UART_SetConfig+0xcd4>)
 800833c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008340:	461a      	mov	r2, r3
 8008342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008344:	fbb3 f2f2 	udiv	r2, r3, r2
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	441a      	add	r2, r3
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d909      	bls.n	8008374 <UART_SetConfig+0xc9c>
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008366:	d205      	bcs.n	8008374 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	b29a      	uxth	r2, r3
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	e002      	b.n	800837a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2201      	movs	r2, #1
 800837e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2201      	movs	r2, #1
 8008386:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2200      	movs	r2, #0
 800838e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2200      	movs	r2, #0
 8008394:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008396:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800839a:	4618      	mov	r0, r3
 800839c:	3748      	adds	r7, #72	@ 0x48
 800839e:	46bd      	mov	sp, r7
 80083a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a4:	03d09000 	.word	0x03d09000
 80083a8:	003d0900 	.word	0x003d0900
 80083ac:	0800ad60 	.word	0x0800ad60

080083b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01a      	beq.n	80084c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ae:	d10a      	bne.n	80084c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b098      	sub	sp, #96	@ 0x60
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008504:	f7f8 ff48 	bl	8001398 <HAL_GetTick>
 8008508:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b08      	cmp	r3, #8
 8008516:	d12f      	bne.n	8008578 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008518:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008520:	2200      	movs	r2, #0
 8008522:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f88e 	bl	8008648 <UART_WaitOnFlagUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d022      	beq.n	8008578 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008546:	653b      	str	r3, [r7, #80]	@ 0x50
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008550:	647b      	str	r3, [r7, #68]	@ 0x44
 8008552:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800855e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e6      	bne.n	8008532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e063      	b.n	8008640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b04      	cmp	r3, #4
 8008584:	d149      	bne.n	800861a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008586:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800858e:	2200      	movs	r2, #0
 8008590:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f857 	bl	8008648 <UART_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d03c      	beq.n	800861a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	623b      	str	r3, [r7, #32]
   return(result);
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085be:	633b      	str	r3, [r7, #48]	@ 0x30
 80085c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e6      	bne.n	80085a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085f2:	61fa      	str	r2, [r7, #28]
 80085f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	69b9      	ldr	r1, [r7, #24]
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e012      	b.n	8008640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3758      	adds	r7, #88	@ 0x58
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	4613      	mov	r3, r2
 8008656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008658:	e04f      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d04b      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008662:	f7f8 fe99 	bl	8001398 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	429a      	cmp	r2, r3
 8008670:	d302      	bcc.n	8008678 <UART_WaitOnFlagUntilTimeout+0x30>
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e04e      	b.n	800871a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0304 	and.w	r3, r3, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	d037      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b80      	cmp	r3, #128	@ 0x80
 800868e:	d034      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d031      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d110      	bne.n	80086c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2208      	movs	r2, #8
 80086aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f921 	bl	80088f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2208      	movs	r2, #8
 80086b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e029      	b.n	800871a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086d4:	d111      	bne.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f907 	bl	80088f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e00f      	b.n	800871a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4013      	ands	r3, r2
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	bf0c      	ite	eq
 800870a:	2301      	moveq	r3, #1
 800870c:	2300      	movne	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	429a      	cmp	r2, r3
 8008716:	d0a0      	beq.n	800865a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b096      	sub	sp, #88	@ 0x58
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2222      	movs	r2, #34	@ 0x22
 800874c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008756:	2b00      	cmp	r3, #0
 8008758:	d02d      	beq.n	80087b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008760:	4a40      	ldr	r2, [pc, #256]	@ (8008864 <UART_Start_Receive_DMA+0x140>)
 8008762:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876a:	4a3f      	ldr	r2, [pc, #252]	@ (8008868 <UART_Start_Receive_DMA+0x144>)
 800876c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008774:	4a3d      	ldr	r2, [pc, #244]	@ (800886c <UART_Start_Receive_DMA+0x148>)
 8008776:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877e:	2200      	movs	r2, #0
 8008780:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3324      	adds	r3, #36	@ 0x24
 800878e:	4619      	mov	r1, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008794:	461a      	mov	r2, r3
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	f7f9 fa56 	bl	8001c48 <HAL_DMA_Start_IT>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2210      	movs	r2, #16
 80087a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e051      	b.n	800885a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d018      	beq.n	80087f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80087ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	653b      	str	r3, [r7, #80]	@ 0x50
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008810:	637a      	str	r2, [r7, #52]	@ 0x34
 8008812:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800881e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3308      	adds	r3, #8
 800882a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	613b      	str	r3, [r7, #16]
   return(result);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800883a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008844:	623a      	str	r2, [r7, #32]
 8008846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	69f9      	ldr	r1, [r7, #28]
 800884a:	6a3a      	ldr	r2, [r7, #32]
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	61bb      	str	r3, [r7, #24]
   return(result);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e5      	bne.n	8008824 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3758      	adds	r7, #88	@ 0x58
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	080089c1 	.word	0x080089c1
 8008868:	08008ae9 	.word	0x08008ae9
 800886c:	08008b27 	.word	0x08008b27

08008870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b08f      	sub	sp, #60	@ 0x3c
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	61fb      	str	r3, [r7, #28]
   return(result);
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800888c:	637b      	str	r3, [r7, #52]	@ 0x34
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008898:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800889c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e6      	bne.n	8008878 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3308      	adds	r3, #8
 80088b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80088c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ca:	61ba      	str	r2, [r7, #24]
 80088cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6979      	ldr	r1, [r7, #20]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	613b      	str	r3, [r7, #16]
   return(result);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e5      	bne.n	80088aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80088e6:	bf00      	nop
 80088e8:	373c      	adds	r7, #60	@ 0x3c
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
	...

080088f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b095      	sub	sp, #84	@ 0x54
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891a:	643b      	str	r3, [r7, #64]	@ 0x40
 800891c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e6      	bne.n	80088fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	61fb      	str	r3, [r7, #28]
   return(result);
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	4b1e      	ldr	r3, [pc, #120]	@ (80089bc <UART_EndRxTransfer+0xc8>)
 8008942:	4013      	ands	r3, r2
 8008944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3308      	adds	r3, #8
 800894c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800894e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e5      	bne.n	800892e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d118      	bne.n	800899c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	60bb      	str	r3, [r7, #8]
   return(result);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f023 0310 	bic.w	r3, r3, #16
 800897e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6979      	ldr	r1, [r7, #20]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	613b      	str	r3, [r7, #16]
   return(result);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e6      	bne.n	800896a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089b0:	bf00      	nop
 80089b2:	3754      	adds	r7, #84	@ 0x54
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	effffffe 	.word	0xeffffffe

080089c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b09c      	sub	sp, #112	@ 0x70
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	d071      	beq.n	8008abc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80089d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089da:	2200      	movs	r2, #0
 80089dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e6      	bne.n	80089e0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3308      	adds	r3, #8
 8008a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a32:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	623b      	str	r3, [r7, #32]
   return(result);
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a66:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d118      	bne.n	8008abc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0310 	bic.w	r3, r3, #16
 8008a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aa8:	61fb      	str	r3, [r7, #28]
 8008aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	69b9      	ldr	r1, [r7, #24]
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e6      	bne.n	8008a8a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008abe:	2200      	movs	r2, #0
 8008ac0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d107      	bne.n	8008ada <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ad4:	f7fe fdf4 	bl	80076c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ad8:	e002      	b.n	8008ae0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008ada:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008adc:	f7f7 fe02 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 8008ae0:	bf00      	nop
 8008ae2:	3770      	adds	r7, #112	@ 0x70
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d109      	bne.n	8008b18 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b0a:	085b      	lsrs	r3, r3, #1
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7fe fdd5 	bl	80076c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b16:	e002      	b.n	8008b1e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7fe fdbd 	bl	8007698 <HAL_UART_RxHalfCpltCallback>
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b4e:	2b80      	cmp	r3, #128	@ 0x80
 8008b50:	d109      	bne.n	8008b66 <UART_DMAError+0x40>
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b21      	cmp	r3, #33	@ 0x21
 8008b56:	d106      	bne.n	8008b66 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008b60:	6978      	ldr	r0, [r7, #20]
 8008b62:	f7ff fe85 	bl	8008870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b70:	2b40      	cmp	r3, #64	@ 0x40
 8008b72:	d109      	bne.n	8008b88 <UART_DMAError+0x62>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b22      	cmp	r3, #34	@ 0x22
 8008b78:	d106      	bne.n	8008b88 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008b82:	6978      	ldr	r0, [r7, #20]
 8008b84:	f7ff feb6 	bl	80088f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8e:	f043 0210 	orr.w	r2, r3, #16
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b98:	6978      	ldr	r0, [r7, #20]
 8008b9a:	f7fe fd87 	bl	80076ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9e:	bf00      	nop
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_UARTEx_DisableFifoMode+0x16>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e027      	b.n	8008c0c <HAL_UARTEx_DisableFifoMode+0x66>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2224      	movs	r2, #36	@ 0x24
 8008bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0201 	bic.w	r2, r2, #1
 8008be2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e02d      	b.n	8008c8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2224      	movs	r2, #36	@ 0x24
 8008c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0201 	bic.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f84f 	bl	8008d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e02d      	b.n	8008d08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2224      	movs	r2, #36	@ 0x24
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f811 	bl	8008d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d108      	bne.n	8008d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d30:	e031      	b.n	8008d96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d32:	2310      	movs	r3, #16
 8008d34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d36:	2310      	movs	r3, #16
 8008d38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	0e5b      	lsrs	r3, r3, #25
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	0f5b      	lsrs	r3, r3, #29
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	7b3a      	ldrb	r2, [r7, #12]
 8008d5e:	4911      	ldr	r1, [pc, #68]	@ (8008da4 <UARTEx_SetNbDataToProcess+0x94>)
 8008d60:	5c8a      	ldrb	r2, [r1, r2]
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d66:	7b3a      	ldrb	r2, [r7, #12]
 8008d68:	490f      	ldr	r1, [pc, #60]	@ (8008da8 <UARTEx_SetNbDataToProcess+0x98>)
 8008d6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	7b7a      	ldrb	r2, [r7, #13]
 8008d7c:	4909      	ldr	r1, [pc, #36]	@ (8008da4 <UARTEx_SetNbDataToProcess+0x94>)
 8008d7e:	5c8a      	ldrb	r2, [r1, r2]
 8008d80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d84:	7b7a      	ldrb	r2, [r7, #13]
 8008d86:	4908      	ldr	r1, [pc, #32]	@ (8008da8 <UARTEx_SetNbDataToProcess+0x98>)
 8008d88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	0800ad78 	.word	0x0800ad78
 8008da8:	0800ad80 	.word	0x0800ad80

08008dac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dbe:	2b84      	cmp	r3, #132	@ 0x84
 8008dc0:	d005      	beq.n	8008dce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008dc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	3303      	adds	r3, #3
 8008dcc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008de0:	f000 fafc 	bl	80093dc <vTaskStartScheduler>
  
  return osOK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	bd80      	pop	{r7, pc}

08008dea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dec:	b089      	sub	sp, #36	@ 0x24
 8008dee:	af04      	add	r7, sp, #16
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d020      	beq.n	8008e3e <osThreadCreate+0x54>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01c      	beq.n	8008e3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685c      	ldr	r4, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691e      	ldr	r6, [r3, #16]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff ffc8 	bl	8008dac <makeFreeRtosPriority>
 8008e1c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e26:	9202      	str	r2, [sp, #8]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	9100      	str	r1, [sp, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	4632      	mov	r2, r6
 8008e30:	4629      	mov	r1, r5
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 f8ed 	bl	8009012 <xTaskCreateStatic>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	e01c      	b.n	8008e78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685c      	ldr	r4, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e4a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff ffaa 	bl	8008dac <makeFreeRtosPriority>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	f107 030c 	add.w	r3, r7, #12
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	9200      	str	r2, [sp, #0]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	4632      	mov	r2, r6
 8008e66:	4629      	mov	r1, r5
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 f932 	bl	80090d2 <xTaskCreate>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d001      	beq.n	8008e78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e000      	b.n	8008e7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e78:	68fb      	ldr	r3, [r7, #12]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <osDelay+0x16>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	e000      	b.n	8008e9a <osDelay+0x18>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fa68 	bl	8009370 <vTaskDelay>
  
  return osOK;
 8008ea0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f103 0208 	add.w	r2, r3, #8
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f103 0208 	add.w	r2, r3, #8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 0208 	add.w	r2, r3, #8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f62:	d103      	bne.n	8008f6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e00c      	b.n	8008f86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	e002      	b.n	8008f7a <vListInsert+0x2e>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d2f6      	bcs.n	8008f74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6892      	ldr	r2, [r2, #8]
 8008fd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6852      	ldr	r2, [r2, #4]
 8008fde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d103      	bne.n	8008ff2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	1e5a      	subs	r2, r3, #1
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009012:	b580      	push	{r7, lr}
 8009014:	b08e      	sub	sp, #56	@ 0x38
 8009016:	af04      	add	r7, sp, #16
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800903e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10b      	bne.n	800905c <xTaskCreateStatic+0x4a>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	61fb      	str	r3, [r7, #28]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800905c:	23a0      	movs	r3, #160	@ 0xa0
 800905e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2ba0      	cmp	r3, #160	@ 0xa0
 8009064:	d00b      	beq.n	800907e <xTaskCreateStatic+0x6c>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	61bb      	str	r3, [r7, #24]
}
 8009078:	bf00      	nop
 800907a:	bf00      	nop
 800907c:	e7fd      	b.n	800907a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800907e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01e      	beq.n	80090c4 <xTaskCreateStatic+0xb2>
 8009086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01b      	beq.n	80090c4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800908c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009094:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	2202      	movs	r2, #2
 800909a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800909e:	2300      	movs	r3, #0
 80090a0:	9303      	str	r3, [sp, #12]
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	f107 0314 	add.w	r3, r7, #20
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f850 	bl	800915c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090be:	f000 f8ed 	bl	800929c <prvAddNewTaskToReadyList>
 80090c2:	e001      	b.n	80090c8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090c8:	697b      	ldr	r3, [r7, #20]
	}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3728      	adds	r7, #40	@ 0x28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b08c      	sub	sp, #48	@ 0x30
 80090d6:	af04      	add	r7, sp, #16
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	603b      	str	r3, [r7, #0]
 80090de:	4613      	mov	r3, r2
 80090e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fefe 	bl	8009ee8 <pvPortMalloc>
 80090ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00e      	beq.n	8009112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090f4:	20a0      	movs	r0, #160	@ 0xa0
 80090f6:	f000 fef7 	bl	8009ee8 <pvPortMalloc>
 80090fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	631a      	str	r2, [r3, #48]	@ 0x30
 8009108:	e005      	b.n	8009116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800910a:	6978      	ldr	r0, [r7, #20]
 800910c:	f000 ffba 	bl	800a084 <vPortFree>
 8009110:	e001      	b.n	8009116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d017      	beq.n	800914c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009124:	88fa      	ldrh	r2, [r7, #6]
 8009126:	2300      	movs	r3, #0
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f80e 	bl	800915c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009140:	69f8      	ldr	r0, [r7, #28]
 8009142:	f000 f8ab 	bl	800929c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009146:	2301      	movs	r3, #1
 8009148:	61bb      	str	r3, [r7, #24]
 800914a:	e002      	b.n	8009152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800914c:	f04f 33ff 	mov.w	r3, #4294967295
 8009150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009152:	69bb      	ldr	r3, [r7, #24]
	}
 8009154:	4618      	mov	r0, r3
 8009156:	3720      	adds	r7, #32
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009174:	440b      	add	r3, r1
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f023 0307 	bic.w	r3, r3, #7
 8009182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	617b      	str	r3, [r7, #20]
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	e7fd      	b.n	80091a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01f      	beq.n	80091ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091ac:	2300      	movs	r3, #0
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e012      	b.n	80091d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	4413      	add	r3, r2
 80091b8:	7819      	ldrb	r1, [r3, #0]
 80091ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	4413      	add	r3, r2
 80091c0:	3334      	adds	r3, #52	@ 0x34
 80091c2:	460a      	mov	r2, r1
 80091c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4413      	add	r3, r2
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d006      	beq.n	80091e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	3301      	adds	r3, #1
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2b0f      	cmp	r3, #15
 80091dc:	d9e9      	bls.n	80091b2 <prvInitialiseNewTask+0x56>
 80091de:	e000      	b.n	80091e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80091e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091ea:	e003      	b.n	80091f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	2b06      	cmp	r3, #6
 80091f8:	d901      	bls.n	80091fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091fa:	2306      	movs	r3, #6
 80091fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009202:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009208:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800920a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920c:	2200      	movs	r2, #0
 800920e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	3304      	adds	r3, #4
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff fe68 	bl	8008eea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	3318      	adds	r3, #24
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff fe63 	bl	8008eea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009228:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	f1c3 0207 	rsb	r2, r3, #7
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009238:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	2200      	movs	r2, #0
 8009246:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	334c      	adds	r3, #76	@ 0x4c
 800924e:	224c      	movs	r2, #76	@ 0x4c
 8009250:	2100      	movs	r1, #0
 8009252:	4618      	mov	r0, r3
 8009254:	f001 f86a 	bl	800a32c <memset>
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	4a0d      	ldr	r2, [pc, #52]	@ (8009290 <prvInitialiseNewTask+0x134>)
 800925c:	651a      	str	r2, [r3, #80]	@ 0x50
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	4a0c      	ldr	r2, [pc, #48]	@ (8009294 <prvInitialiseNewTask+0x138>)
 8009262:	655a      	str	r2, [r3, #84]	@ 0x54
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	4a0c      	ldr	r2, [pc, #48]	@ (8009298 <prvInitialiseNewTask+0x13c>)
 8009268:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	68f9      	ldr	r1, [r7, #12]
 800926e:	69b8      	ldr	r0, [r7, #24]
 8009270:	f000 fc2a 	bl	8009ac8 <pxPortInitialiseStack>
 8009274:	4602      	mov	r2, r0
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009286:	bf00      	nop
 8009288:	3720      	adds	r7, #32
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	240043a8 	.word	0x240043a8
 8009294:	24004410 	.word	0x24004410
 8009298:	24004478 	.word	0x24004478

0800929c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092a4:	f000 fd40 	bl	8009d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092a8:	4b2a      	ldr	r3, [pc, #168]	@ (8009354 <prvAddNewTaskToReadyList+0xb8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	4a29      	ldr	r2, [pc, #164]	@ (8009354 <prvAddNewTaskToReadyList+0xb8>)
 80092b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092b2:	4b29      	ldr	r3, [pc, #164]	@ (8009358 <prvAddNewTaskToReadyList+0xbc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092ba:	4a27      	ldr	r2, [pc, #156]	@ (8009358 <prvAddNewTaskToReadyList+0xbc>)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092c0:	4b24      	ldr	r3, [pc, #144]	@ (8009354 <prvAddNewTaskToReadyList+0xb8>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d110      	bne.n	80092ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092c8:	f000 fad4 	bl	8009874 <prvInitialiseTaskLists>
 80092cc:	e00d      	b.n	80092ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092ce:	4b23      	ldr	r3, [pc, #140]	@ (800935c <prvAddNewTaskToReadyList+0xc0>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092d6:	4b20      	ldr	r3, [pc, #128]	@ (8009358 <prvAddNewTaskToReadyList+0xbc>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d802      	bhi.n	80092ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009358 <prvAddNewTaskToReadyList+0xbc>)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009360 <prvAddNewTaskToReadyList+0xc4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009360 <prvAddNewTaskToReadyList+0xc4>)
 80092f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f8:	2201      	movs	r2, #1
 80092fa:	409a      	lsls	r2, r3
 80092fc:	4b19      	ldr	r3, [pc, #100]	@ (8009364 <prvAddNewTaskToReadyList+0xc8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4313      	orrs	r3, r2
 8009302:	4a18      	ldr	r2, [pc, #96]	@ (8009364 <prvAddNewTaskToReadyList+0xc8>)
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800930a:	4613      	mov	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4a15      	ldr	r2, [pc, #84]	@ (8009368 <prvAddNewTaskToReadyList+0xcc>)
 8009314:	441a      	add	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3304      	adds	r3, #4
 800931a:	4619      	mov	r1, r3
 800931c:	4610      	mov	r0, r2
 800931e:	f7ff fdf1 	bl	8008f04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009322:	f000 fd33 	bl	8009d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009326:	4b0d      	ldr	r3, [pc, #52]	@ (800935c <prvAddNewTaskToReadyList+0xc0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00e      	beq.n	800934c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800932e:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <prvAddNewTaskToReadyList+0xbc>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	429a      	cmp	r2, r3
 800933a:	d207      	bcs.n	800934c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800933c:	4b0b      	ldr	r3, [pc, #44]	@ (800936c <prvAddNewTaskToReadyList+0xd0>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	24000754 	.word	0x24000754
 8009358:	24000654 	.word	0x24000654
 800935c:	24000760 	.word	0x24000760
 8009360:	24000770 	.word	0x24000770
 8009364:	2400075c 	.word	0x2400075c
 8009368:	24000658 	.word	0x24000658
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d018      	beq.n	80093b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009382:	4b14      	ldr	r3, [pc, #80]	@ (80093d4 <vTaskDelay+0x64>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00b      	beq.n	80093a2 <vTaskDelay+0x32>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	60bb      	str	r3, [r7, #8]
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	e7fd      	b.n	800939e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093a2:	f000 f885 	bl	80094b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fb27 	bl	80099fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093ae:	f000 f88d 	bl	80094cc <xTaskResumeAll>
 80093b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d107      	bne.n	80093ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80093ba:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <vTaskDelay+0x68>)
 80093bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	2400077c 	.word	0x2400077c
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08a      	sub	sp, #40	@ 0x28
 80093e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093ea:	463a      	mov	r2, r7
 80093ec:	1d39      	adds	r1, r7, #4
 80093ee:	f107 0308 	add.w	r3, r7, #8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f7 f95c 	bl	80006b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	9202      	str	r2, [sp, #8]
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2300      	movs	r3, #0
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	2300      	movs	r3, #0
 8009408:	460a      	mov	r2, r1
 800940a:	4921      	ldr	r1, [pc, #132]	@ (8009490 <vTaskStartScheduler+0xb4>)
 800940c:	4821      	ldr	r0, [pc, #132]	@ (8009494 <vTaskStartScheduler+0xb8>)
 800940e:	f7ff fe00 	bl	8009012 <xTaskCreateStatic>
 8009412:	4603      	mov	r3, r0
 8009414:	4a20      	ldr	r2, [pc, #128]	@ (8009498 <vTaskStartScheduler+0xbc>)
 8009416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009418:	4b1f      	ldr	r3, [pc, #124]	@ (8009498 <vTaskStartScheduler+0xbc>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	e001      	b.n	800942a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d11b      	bne.n	8009468 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	613b      	str	r3, [r7, #16]
}
 8009442:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009444:	4b15      	ldr	r3, [pc, #84]	@ (800949c <vTaskStartScheduler+0xc0>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	334c      	adds	r3, #76	@ 0x4c
 800944a:	4a15      	ldr	r2, [pc, #84]	@ (80094a0 <vTaskStartScheduler+0xc4>)
 800944c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800944e:	4b15      	ldr	r3, [pc, #84]	@ (80094a4 <vTaskStartScheduler+0xc8>)
 8009450:	f04f 32ff 	mov.w	r2, #4294967295
 8009454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009456:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <vTaskStartScheduler+0xcc>)
 8009458:	2201      	movs	r2, #1
 800945a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800945c:	4b13      	ldr	r3, [pc, #76]	@ (80094ac <vTaskStartScheduler+0xd0>)
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009462:	f000 fbbd 	bl	8009be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009466:	e00f      	b.n	8009488 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946e:	d10b      	bne.n	8009488 <vTaskStartScheduler+0xac>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60fb      	str	r3, [r7, #12]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <vTaskStartScheduler+0xa8>
}
 8009488:	bf00      	nop
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	0800ad40 	.word	0x0800ad40
 8009494:	08009845 	.word	0x08009845
 8009498:	24000778 	.word	0x24000778
 800949c:	24000654 	.word	0x24000654
 80094a0:	24000014 	.word	0x24000014
 80094a4:	24000774 	.word	0x24000774
 80094a8:	24000760 	.word	0x24000760
 80094ac:	24000758 	.word	0x24000758

080094b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094b4:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <vTaskSuspendAll+0x18>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	4a03      	ldr	r2, [pc, #12]	@ (80094c8 <vTaskSuspendAll+0x18>)
 80094bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094be:	bf00      	nop
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	2400077c 	.word	0x2400077c

080094cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094da:	4b42      	ldr	r3, [pc, #264]	@ (80095e4 <xTaskResumeAll+0x118>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10b      	bne.n	80094fa <xTaskResumeAll+0x2e>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	603b      	str	r3, [r7, #0]
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
 80094f8:	e7fd      	b.n	80094f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094fa:	f000 fc15 	bl	8009d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094fe:	4b39      	ldr	r3, [pc, #228]	@ (80095e4 <xTaskResumeAll+0x118>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3b01      	subs	r3, #1
 8009504:	4a37      	ldr	r2, [pc, #220]	@ (80095e4 <xTaskResumeAll+0x118>)
 8009506:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009508:	4b36      	ldr	r3, [pc, #216]	@ (80095e4 <xTaskResumeAll+0x118>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d161      	bne.n	80095d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009510:	4b35      	ldr	r3, [pc, #212]	@ (80095e8 <xTaskResumeAll+0x11c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05d      	beq.n	80095d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009518:	e02e      	b.n	8009578 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951a:	4b34      	ldr	r3, [pc, #208]	@ (80095ec <xTaskResumeAll+0x120>)
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3318      	adds	r3, #24
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fd49 	bl	8008fbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3304      	adds	r3, #4
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fd44 	bl	8008fbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953a:	2201      	movs	r2, #1
 800953c:	409a      	lsls	r2, r3
 800953e:	4b2c      	ldr	r3, [pc, #176]	@ (80095f0 <xTaskResumeAll+0x124>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4313      	orrs	r3, r2
 8009544:	4a2a      	ldr	r2, [pc, #168]	@ (80095f0 <xTaskResumeAll+0x124>)
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4a27      	ldr	r2, [pc, #156]	@ (80095f4 <xTaskResumeAll+0x128>)
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f7ff fcd0 	bl	8008f04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009568:	4b23      	ldr	r3, [pc, #140]	@ (80095f8 <xTaskResumeAll+0x12c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956e:	429a      	cmp	r2, r3
 8009570:	d302      	bcc.n	8009578 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009572:	4b22      	ldr	r3, [pc, #136]	@ (80095fc <xTaskResumeAll+0x130>)
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009578:	4b1c      	ldr	r3, [pc, #112]	@ (80095ec <xTaskResumeAll+0x120>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1cc      	bne.n	800951a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009586:	f000 fa19 	bl	80099bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800958a:	4b1d      	ldr	r3, [pc, #116]	@ (8009600 <xTaskResumeAll+0x134>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d010      	beq.n	80095b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009596:	f000 f837 	bl	8009608 <xTaskIncrementTick>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095a0:	4b16      	ldr	r3, [pc, #88]	@ (80095fc <xTaskResumeAll+0x130>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f1      	bne.n	8009596 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80095b2:	4b13      	ldr	r3, [pc, #76]	@ (8009600 <xTaskResumeAll+0x134>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095b8:	4b10      	ldr	r3, [pc, #64]	@ (80095fc <xTaskResumeAll+0x130>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095c0:	2301      	movs	r3, #1
 80095c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009604 <xTaskResumeAll+0x138>)
 80095c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095d4:	f000 fbda 	bl	8009d8c <vPortExitCritical>

	return xAlreadyYielded;
 80095d8:	68bb      	ldr	r3, [r7, #8]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	2400077c 	.word	0x2400077c
 80095e8:	24000754 	.word	0x24000754
 80095ec:	24000714 	.word	0x24000714
 80095f0:	2400075c 	.word	0x2400075c
 80095f4:	24000658 	.word	0x24000658
 80095f8:	24000654 	.word	0x24000654
 80095fc:	24000768 	.word	0x24000768
 8009600:	24000764 	.word	0x24000764
 8009604:	e000ed04 	.word	0xe000ed04

08009608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009612:	4b4f      	ldr	r3, [pc, #316]	@ (8009750 <xTaskIncrementTick+0x148>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 808f 	bne.w	800973a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800961c:	4b4d      	ldr	r3, [pc, #308]	@ (8009754 <xTaskIncrementTick+0x14c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009624:	4a4b      	ldr	r2, [pc, #300]	@ (8009754 <xTaskIncrementTick+0x14c>)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d121      	bne.n	8009674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009630:	4b49      	ldr	r3, [pc, #292]	@ (8009758 <xTaskIncrementTick+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <xTaskIncrementTick+0x4a>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <xTaskIncrementTick+0x46>
 8009652:	4b41      	ldr	r3, [pc, #260]	@ (8009758 <xTaskIncrementTick+0x150>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	4b40      	ldr	r3, [pc, #256]	@ (800975c <xTaskIncrementTick+0x154>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a3e      	ldr	r2, [pc, #248]	@ (8009758 <xTaskIncrementTick+0x150>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	4a3e      	ldr	r2, [pc, #248]	@ (800975c <xTaskIncrementTick+0x154>)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	4b3e      	ldr	r3, [pc, #248]	@ (8009760 <xTaskIncrementTick+0x158>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	4a3c      	ldr	r2, [pc, #240]	@ (8009760 <xTaskIncrementTick+0x158>)
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	f000 f9a4 	bl	80099bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009674:	4b3b      	ldr	r3, [pc, #236]	@ (8009764 <xTaskIncrementTick+0x15c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	429a      	cmp	r2, r3
 800967c:	d348      	bcc.n	8009710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967e:	4b36      	ldr	r3, [pc, #216]	@ (8009758 <xTaskIncrementTick+0x150>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009688:	4b36      	ldr	r3, [pc, #216]	@ (8009764 <xTaskIncrementTick+0x15c>)
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	601a      	str	r2, [r3, #0]
					break;
 8009690:	e03e      	b.n	8009710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009692:	4b31      	ldr	r3, [pc, #196]	@ (8009758 <xTaskIncrementTick+0x150>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d203      	bcs.n	80096b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009764 <xTaskIncrementTick+0x15c>)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096b0:	e02e      	b.n	8009710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fc81 	bl	8008fbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	3318      	adds	r3, #24
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fc78 	bl	8008fbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	2201      	movs	r2, #1
 80096d4:	409a      	lsls	r2, r3
 80096d6:	4b24      	ldr	r3, [pc, #144]	@ (8009768 <xTaskIncrementTick+0x160>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4313      	orrs	r3, r2
 80096dc:	4a22      	ldr	r2, [pc, #136]	@ (8009768 <xTaskIncrementTick+0x160>)
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4a1f      	ldr	r2, [pc, #124]	@ (800976c <xTaskIncrementTick+0x164>)
 80096ee:	441a      	add	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f7ff fc04 	bl	8008f04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009700:	4b1b      	ldr	r3, [pc, #108]	@ (8009770 <xTaskIncrementTick+0x168>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009706:	429a      	cmp	r2, r3
 8009708:	d3b9      	bcc.n	800967e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800970a:	2301      	movs	r3, #1
 800970c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970e:	e7b6      	b.n	800967e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009710:	4b17      	ldr	r3, [pc, #92]	@ (8009770 <xTaskIncrementTick+0x168>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009716:	4915      	ldr	r1, [pc, #84]	@ (800976c <xTaskIncrementTick+0x164>)
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d901      	bls.n	800972c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800972c:	4b11      	ldr	r3, [pc, #68]	@ (8009774 <xTaskIncrementTick+0x16c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e004      	b.n	8009744 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800973a:	4b0f      	ldr	r3, [pc, #60]	@ (8009778 <xTaskIncrementTick+0x170>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3301      	adds	r3, #1
 8009740:	4a0d      	ldr	r2, [pc, #52]	@ (8009778 <xTaskIncrementTick+0x170>)
 8009742:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009744:	697b      	ldr	r3, [r7, #20]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	2400077c 	.word	0x2400077c
 8009754:	24000758 	.word	0x24000758
 8009758:	2400070c 	.word	0x2400070c
 800975c:	24000710 	.word	0x24000710
 8009760:	2400076c 	.word	0x2400076c
 8009764:	24000774 	.word	0x24000774
 8009768:	2400075c 	.word	0x2400075c
 800976c:	24000658 	.word	0x24000658
 8009770:	24000654 	.word	0x24000654
 8009774:	24000768 	.word	0x24000768
 8009778:	24000764 	.word	0x24000764

0800977c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009782:	4b2a      	ldr	r3, [pc, #168]	@ (800982c <vTaskSwitchContext+0xb0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800978a:	4b29      	ldr	r3, [pc, #164]	@ (8009830 <vTaskSwitchContext+0xb4>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009790:	e045      	b.n	800981e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009792:	4b27      	ldr	r3, [pc, #156]	@ (8009830 <vTaskSwitchContext+0xb4>)
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009798:	4b26      	ldr	r3, [pc, #152]	@ (8009834 <vTaskSwitchContext+0xb8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	fab3 f383 	clz	r3, r3
 80097a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	f1c3 031f 	rsb	r3, r3, #31
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	4922      	ldr	r1, [pc, #136]	@ (8009838 <vTaskSwitchContext+0xbc>)
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10b      	bne.n	80097da <vTaskSwitchContext+0x5e>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <vTaskSwitchContext+0x5a>
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4a14      	ldr	r2, [pc, #80]	@ (8009838 <vTaskSwitchContext+0xbc>)
 80097e6:	4413      	add	r3, r2
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	605a      	str	r2, [r3, #4]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	3308      	adds	r3, #8
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d104      	bne.n	800980a <vTaskSwitchContext+0x8e>
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	605a      	str	r2, [r3, #4]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	4a0a      	ldr	r2, [pc, #40]	@ (800983c <vTaskSwitchContext+0xc0>)
 8009812:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009814:	4b09      	ldr	r3, [pc, #36]	@ (800983c <vTaskSwitchContext+0xc0>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	334c      	adds	r3, #76	@ 0x4c
 800981a:	4a09      	ldr	r2, [pc, #36]	@ (8009840 <vTaskSwitchContext+0xc4>)
 800981c:	6013      	str	r3, [r2, #0]
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	2400077c 	.word	0x2400077c
 8009830:	24000768 	.word	0x24000768
 8009834:	2400075c 	.word	0x2400075c
 8009838:	24000658 	.word	0x24000658
 800983c:	24000654 	.word	0x24000654
 8009840:	24000014 	.word	0x24000014

08009844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800984c:	f000 f852 	bl	80098f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009850:	4b06      	ldr	r3, [pc, #24]	@ (800986c <prvIdleTask+0x28>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d9f9      	bls.n	800984c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009858:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <prvIdleTask+0x2c>)
 800985a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009868:	e7f0      	b.n	800984c <prvIdleTask+0x8>
 800986a:	bf00      	nop
 800986c:	24000658 	.word	0x24000658
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800987a:	2300      	movs	r3, #0
 800987c:	607b      	str	r3, [r7, #4]
 800987e:	e00c      	b.n	800989a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4a12      	ldr	r2, [pc, #72]	@ (80098d4 <prvInitialiseTaskLists+0x60>)
 800988c:	4413      	add	r3, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fb0b 	bl	8008eaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3301      	adds	r3, #1
 8009898:	607b      	str	r3, [r7, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b06      	cmp	r3, #6
 800989e:	d9ef      	bls.n	8009880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098a0:	480d      	ldr	r0, [pc, #52]	@ (80098d8 <prvInitialiseTaskLists+0x64>)
 80098a2:	f7ff fb02 	bl	8008eaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098a6:	480d      	ldr	r0, [pc, #52]	@ (80098dc <prvInitialiseTaskLists+0x68>)
 80098a8:	f7ff faff 	bl	8008eaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098ac:	480c      	ldr	r0, [pc, #48]	@ (80098e0 <prvInitialiseTaskLists+0x6c>)
 80098ae:	f7ff fafc 	bl	8008eaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098b2:	480c      	ldr	r0, [pc, #48]	@ (80098e4 <prvInitialiseTaskLists+0x70>)
 80098b4:	f7ff faf9 	bl	8008eaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098b8:	480b      	ldr	r0, [pc, #44]	@ (80098e8 <prvInitialiseTaskLists+0x74>)
 80098ba:	f7ff faf6 	bl	8008eaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098be:	4b0b      	ldr	r3, [pc, #44]	@ (80098ec <prvInitialiseTaskLists+0x78>)
 80098c0:	4a05      	ldr	r2, [pc, #20]	@ (80098d8 <prvInitialiseTaskLists+0x64>)
 80098c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098c4:	4b0a      	ldr	r3, [pc, #40]	@ (80098f0 <prvInitialiseTaskLists+0x7c>)
 80098c6:	4a05      	ldr	r2, [pc, #20]	@ (80098dc <prvInitialiseTaskLists+0x68>)
 80098c8:	601a      	str	r2, [r3, #0]
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	24000658 	.word	0x24000658
 80098d8:	240006e4 	.word	0x240006e4
 80098dc:	240006f8 	.word	0x240006f8
 80098e0:	24000714 	.word	0x24000714
 80098e4:	24000728 	.word	0x24000728
 80098e8:	24000740 	.word	0x24000740
 80098ec:	2400070c 	.word	0x2400070c
 80098f0:	24000710 	.word	0x24000710

080098f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098fa:	e019      	b.n	8009930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098fc:	f000 fa14 	bl	8009d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009900:	4b10      	ldr	r3, [pc, #64]	@ (8009944 <prvCheckTasksWaitingTermination+0x50>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3304      	adds	r3, #4
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff fb56 	bl	8008fbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <prvCheckTasksWaitingTermination+0x54>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3b01      	subs	r3, #1
 8009918:	4a0b      	ldr	r2, [pc, #44]	@ (8009948 <prvCheckTasksWaitingTermination+0x54>)
 800991a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800991c:	4b0b      	ldr	r3, [pc, #44]	@ (800994c <prvCheckTasksWaitingTermination+0x58>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3b01      	subs	r3, #1
 8009922:	4a0a      	ldr	r2, [pc, #40]	@ (800994c <prvCheckTasksWaitingTermination+0x58>)
 8009924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009926:	f000 fa31 	bl	8009d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f810 	bl	8009950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009930:	4b06      	ldr	r3, [pc, #24]	@ (800994c <prvCheckTasksWaitingTermination+0x58>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e1      	bne.n	80098fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	24000728 	.word	0x24000728
 8009948:	24000754 	.word	0x24000754
 800994c:	2400073c 	.word	0x2400073c

08009950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	334c      	adds	r3, #76	@ 0x4c
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fced 	bl	800a33c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009968:	2b00      	cmp	r3, #0
 800996a:	d108      	bne.n	800997e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fb87 	bl	800a084 <vPortFree>
				vPortFree( pxTCB );
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fb84 	bl	800a084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800997c:	e019      	b.n	80099b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009984:	2b01      	cmp	r3, #1
 8009986:	d103      	bne.n	8009990 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fb7b 	bl	800a084 <vPortFree>
	}
 800998e:	e010      	b.n	80099b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009996:	2b02      	cmp	r3, #2
 8009998:	d00b      	beq.n	80099b2 <prvDeleteTCB+0x62>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	60fb      	str	r3, [r7, #12]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <prvDeleteTCB+0x5e>
	}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099c2:	4b0c      	ldr	r3, [pc, #48]	@ (80099f4 <prvResetNextTaskUnblockTime+0x38>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	@ (80099f8 <prvResetNextTaskUnblockTime+0x3c>)
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099d4:	e008      	b.n	80099e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d6:	4b07      	ldr	r3, [pc, #28]	@ (80099f4 <prvResetNextTaskUnblockTime+0x38>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	4a04      	ldr	r2, [pc, #16]	@ (80099f8 <prvResetNextTaskUnblockTime+0x3c>)
 80099e6:	6013      	str	r3, [r2, #0]
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	2400070c 	.word	0x2400070c
 80099f8:	24000774 	.word	0x24000774

080099fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a06:	4b29      	ldr	r3, [pc, #164]	@ (8009aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a0c:	4b28      	ldr	r3, [pc, #160]	@ (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fad3 	bl	8008fbe <uxListRemove>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10b      	bne.n	8009a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a1e:	4b24      	ldr	r3, [pc, #144]	@ (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	2201      	movs	r2, #1
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	43da      	mvns	r2, r3
 8009a2c:	4b21      	ldr	r3, [pc, #132]	@ (8009ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4013      	ands	r3, r2
 8009a32:	4a20      	ldr	r2, [pc, #128]	@ (8009ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d10a      	bne.n	8009a54 <prvAddCurrentTaskToDelayedList+0x58>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d007      	beq.n	8009a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a44:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	481a      	ldr	r0, [pc, #104]	@ (8009ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a4e:	f7ff fa59 	bl	8008f04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a52:	e026      	b.n	8009aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a5c:	4b14      	ldr	r3, [pc, #80]	@ (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d209      	bcs.n	8009a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a6c:	4b13      	ldr	r3, [pc, #76]	@ (8009abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3304      	adds	r3, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7ff fa67 	bl	8008f4c <vListInsert>
}
 8009a7e:	e010      	b.n	8009aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a80:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7ff fa5d 	bl	8008f4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d202      	bcs.n	8009aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a9c:	4a09      	ldr	r2, [pc, #36]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6013      	str	r3, [r2, #0]
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	24000758 	.word	0x24000758
 8009ab0:	24000654 	.word	0x24000654
 8009ab4:	2400075c 	.word	0x2400075c
 8009ab8:	24000740 	.word	0x24000740
 8009abc:	24000710 	.word	0x24000710
 8009ac0:	2400070c 	.word	0x2400070c
 8009ac4:	24000774 	.word	0x24000774

08009ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3b04      	subs	r3, #4
 8009ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3b04      	subs	r3, #4
 8009ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f023 0201 	bic.w	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3b04      	subs	r3, #4
 8009af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009af8:	4a0c      	ldr	r2, [pc, #48]	@ (8009b2c <pxPortInitialiseStack+0x64>)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3b14      	subs	r3, #20
 8009b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f06f 0202 	mvn.w	r2, #2
 8009b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3b20      	subs	r3, #32
 8009b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	08009b31 	.word	0x08009b31

08009b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b3a:	4b13      	ldr	r3, [pc, #76]	@ (8009b88 <prvTaskExitError+0x58>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d00b      	beq.n	8009b5c <prvTaskExitError+0x2c>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	60fb      	str	r3, [r7, #12]
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <prvTaskExitError+0x28>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	60bb      	str	r3, [r7, #8]
}
 8009b6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b70:	bf00      	nop
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0fc      	beq.n	8009b72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	24000010 	.word	0x24000010
 8009b8c:	00000000 	.word	0x00000000

08009b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b90:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <pxCurrentTCBConst2>)
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	6808      	ldr	r0, [r1, #0]
 8009b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9a:	f380 8809 	msr	PSP, r0
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f380 8811 	msr	BASEPRI, r0
 8009baa:	4770      	bx	lr
 8009bac:	f3af 8000 	nop.w

08009bb0 <pxCurrentTCBConst2>:
 8009bb0:	24000654 	.word	0x24000654
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop

08009bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bb8:	4808      	ldr	r0, [pc, #32]	@ (8009bdc <prvPortStartFirstTask+0x24>)
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	6800      	ldr	r0, [r0, #0]
 8009bbe:	f380 8808 	msr	MSP, r0
 8009bc2:	f04f 0000 	mov.w	r0, #0
 8009bc6:	f380 8814 	msr	CONTROL, r0
 8009bca:	b662      	cpsie	i
 8009bcc:	b661      	cpsie	f
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	df00      	svc	0
 8009bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bda:	bf00      	nop
 8009bdc:	e000ed08 	.word	0xe000ed08

08009be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009be6:	4b47      	ldr	r3, [pc, #284]	@ (8009d04 <xPortStartScheduler+0x124>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a47      	ldr	r2, [pc, #284]	@ (8009d08 <xPortStartScheduler+0x128>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d10b      	bne.n	8009c08 <xPortStartScheduler+0x28>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	613b      	str	r3, [r7, #16]
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	e7fd      	b.n	8009c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c08:	4b3e      	ldr	r3, [pc, #248]	@ (8009d04 <xPortStartScheduler+0x124>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d0c <xPortStartScheduler+0x12c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d10b      	bne.n	8009c2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	60fb      	str	r3, [r7, #12]
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	e7fd      	b.n	8009c26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c2a:	4b39      	ldr	r3, [pc, #228]	@ (8009d10 <xPortStartScheduler+0x130>)
 8009c2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	22ff      	movs	r2, #255	@ 0xff
 8009c3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	4b31      	ldr	r3, [pc, #196]	@ (8009d14 <xPortStartScheduler+0x134>)
 8009c50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c52:	4b31      	ldr	r3, [pc, #196]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009c54:	2207      	movs	r2, #7
 8009c56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c58:	e009      	b.n	8009c6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	4a2d      	ldr	r2, [pc, #180]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c6e:	78fb      	ldrb	r3, [r7, #3]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c76:	2b80      	cmp	r3, #128	@ 0x80
 8009c78:	d0ef      	beq.n	8009c5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c7a:	4b27      	ldr	r3, [pc, #156]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f1c3 0307 	rsb	r3, r3, #7
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d00b      	beq.n	8009c9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60bb      	str	r3, [r7, #8]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009ca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009cb0:	4a19      	ldr	r2, [pc, #100]	@ (8009d18 <xPortStartScheduler+0x138>)
 8009cb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cbc:	4b17      	ldr	r3, [pc, #92]	@ (8009d1c <xPortStartScheduler+0x13c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a16      	ldr	r2, [pc, #88]	@ (8009d1c <xPortStartScheduler+0x13c>)
 8009cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cc8:	4b14      	ldr	r3, [pc, #80]	@ (8009d1c <xPortStartScheduler+0x13c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a13      	ldr	r2, [pc, #76]	@ (8009d1c <xPortStartScheduler+0x13c>)
 8009cce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009cd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cd4:	f000 f8da 	bl	8009e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cd8:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <xPortStartScheduler+0x140>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009cde:	f000 f8f9 	bl	8009ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ce2:	4b10      	ldr	r3, [pc, #64]	@ (8009d24 <xPortStartScheduler+0x144>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8009d24 <xPortStartScheduler+0x144>)
 8009ce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009cec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cee:	f7ff ff63 	bl	8009bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cf2:	f7ff fd43 	bl	800977c <vTaskSwitchContext>
	prvTaskExitError();
 8009cf6:	f7ff ff1b 	bl	8009b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	e000ed00 	.word	0xe000ed00
 8009d08:	410fc271 	.word	0x410fc271
 8009d0c:	410fc270 	.word	0x410fc270
 8009d10:	e000e400 	.word	0xe000e400
 8009d14:	24000780 	.word	0x24000780
 8009d18:	24000784 	.word	0x24000784
 8009d1c:	e000ed20 	.word	0xe000ed20
 8009d20:	24000010 	.word	0x24000010
 8009d24:	e000ef34 	.word	0xe000ef34

08009d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	607b      	str	r3, [r7, #4]
}
 8009d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d42:	4b10      	ldr	r3, [pc, #64]	@ (8009d84 <vPortEnterCritical+0x5c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	4a0e      	ldr	r2, [pc, #56]	@ (8009d84 <vPortEnterCritical+0x5c>)
 8009d4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d84 <vPortEnterCritical+0x5c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d110      	bne.n	8009d76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d54:	4b0c      	ldr	r3, [pc, #48]	@ (8009d88 <vPortEnterCritical+0x60>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	603b      	str	r3, [r7, #0]
}
 8009d70:	bf00      	nop
 8009d72:	bf00      	nop
 8009d74:	e7fd      	b.n	8009d72 <vPortEnterCritical+0x4a>
	}
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	24000010 	.word	0x24000010
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d92:	4b12      	ldr	r3, [pc, #72]	@ (8009ddc <vPortExitCritical+0x50>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10b      	bne.n	8009db2 <vPortExitCritical+0x26>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	607b      	str	r3, [r7, #4]
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	e7fd      	b.n	8009dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009db2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ddc <vPortExitCritical+0x50>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	4a08      	ldr	r2, [pc, #32]	@ (8009ddc <vPortExitCritical+0x50>)
 8009dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dbc:	4b07      	ldr	r3, [pc, #28]	@ (8009ddc <vPortExitCritical+0x50>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <vPortExitCritical+0x44>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009dce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	24000010 	.word	0x24000010

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b15      	ldr	r3, [pc, #84]	@ (8009e40 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f01e 0f10 	tst.w	lr, #16
 8009df0:	bf08      	it	eq
 8009df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	6010      	str	r0, [r2, #0]
 8009dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e04:	f380 8811 	msr	BASEPRI, r0
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f7ff fcb4 	bl	800977c <vTaskSwitchContext>
 8009e14:	f04f 0000 	mov.w	r0, #0
 8009e18:	f380 8811 	msr	BASEPRI, r0
 8009e1c:	bc09      	pop	{r0, r3}
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	6808      	ldr	r0, [r1, #0]
 8009e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e26:	f01e 0f10 	tst.w	lr, #16
 8009e2a:	bf08      	it	eq
 8009e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e30:	f380 8809 	msr	PSP, r0
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst>:
 8009e40:	24000654 	.word	0x24000654
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	607b      	str	r3, [r7, #4]
}
 8009e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e62:	f7ff fbd1 	bl	8009608 <xTaskIncrementTick>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6c:	4b06      	ldr	r3, [pc, #24]	@ (8009e88 <SysTick_Handler+0x40>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	2300      	movs	r3, #0
 8009e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	f383 8811 	msr	BASEPRI, r3
}
 8009e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e90:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec0 <vPortSetupTimerInterrupt+0x34>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e96:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec4 <vPortSetupTimerInterrupt+0x38>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec8 <vPortSetupTimerInterrupt+0x3c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8009ecc <vPortSetupTimerInterrupt+0x40>)
 8009ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea6:	099b      	lsrs	r3, r3, #6
 8009ea8:	4a09      	ldr	r2, [pc, #36]	@ (8009ed0 <vPortSetupTimerInterrupt+0x44>)
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eae:	4b04      	ldr	r3, [pc, #16]	@ (8009ec0 <vPortSetupTimerInterrupt+0x34>)
 8009eb0:	2207      	movs	r2, #7
 8009eb2:	601a      	str	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	e000e010 	.word	0xe000e010
 8009ec4:	e000e018 	.word	0xe000e018
 8009ec8:	24000000 	.word	0x24000000
 8009ecc:	10624dd3 	.word	0x10624dd3
 8009ed0:	e000e014 	.word	0xe000e014

08009ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ee4 <vPortEnableVFP+0x10>
 8009ed8:	6801      	ldr	r1, [r0, #0]
 8009eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009ede:	6001      	str	r1, [r0, #0]
 8009ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ee2:	bf00      	nop
 8009ee4:	e000ed88 	.word	0xe000ed88

08009ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08a      	sub	sp, #40	@ 0x28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef4:	f7ff fadc 	bl	80094b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800a06c <pvPortMalloc+0x184>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f00:	f000 f924 	bl	800a14c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f04:	4b5a      	ldr	r3, [pc, #360]	@ (800a070 <pvPortMalloc+0x188>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f040 8095 	bne.w	800a03c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01e      	beq.n	8009f56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f18:	2208      	movs	r2, #8
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d015      	beq.n	8009f56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f023 0307 	bic.w	r3, r3, #7
 8009f30:	3308      	adds	r3, #8
 8009f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00b      	beq.n	8009f56 <pvPortMalloc+0x6e>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	617b      	str	r3, [r7, #20]
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	e7fd      	b.n	8009f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d06f      	beq.n	800a03c <pvPortMalloc+0x154>
 8009f5c:	4b45      	ldr	r3, [pc, #276]	@ (800a074 <pvPortMalloc+0x18c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d86a      	bhi.n	800a03c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f66:	4b44      	ldr	r3, [pc, #272]	@ (800a078 <pvPortMalloc+0x190>)
 8009f68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f6a:	4b43      	ldr	r3, [pc, #268]	@ (800a078 <pvPortMalloc+0x190>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f70:	e004      	b.n	8009f7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d903      	bls.n	8009f8e <pvPortMalloc+0xa6>
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1f1      	bne.n	8009f72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f8e:	4b37      	ldr	r3, [pc, #220]	@ (800a06c <pvPortMalloc+0x184>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d051      	beq.n	800a03c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	4413      	add	r3, r2
 8009fa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	1ad2      	subs	r2, r2, r3
 8009fb2:	2308      	movs	r3, #8
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d920      	bls.n	8009ffc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f003 0307 	and.w	r3, r3, #7
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <pvPortMalloc+0xfc>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	613b      	str	r3, [r7, #16]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	1ad2      	subs	r2, r2, r3
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ff6:	69b8      	ldr	r0, [r7, #24]
 8009ff8:	f000 f90a 	bl	800a210 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ffc:	4b1d      	ldr	r3, [pc, #116]	@ (800a074 <pvPortMalloc+0x18c>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	4a1b      	ldr	r2, [pc, #108]	@ (800a074 <pvPortMalloc+0x18c>)
 800a008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a00a:	4b1a      	ldr	r3, [pc, #104]	@ (800a074 <pvPortMalloc+0x18c>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	4b1b      	ldr	r3, [pc, #108]	@ (800a07c <pvPortMalloc+0x194>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d203      	bcs.n	800a01e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a016:	4b17      	ldr	r3, [pc, #92]	@ (800a074 <pvPortMalloc+0x18c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a18      	ldr	r2, [pc, #96]	@ (800a07c <pvPortMalloc+0x194>)
 800a01c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	4b13      	ldr	r3, [pc, #76]	@ (800a070 <pvPortMalloc+0x188>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	431a      	orrs	r2, r3
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a032:	4b13      	ldr	r3, [pc, #76]	@ (800a080 <pvPortMalloc+0x198>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	4a11      	ldr	r2, [pc, #68]	@ (800a080 <pvPortMalloc+0x198>)
 800a03a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a03c:	f7ff fa46 	bl	80094cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00b      	beq.n	800a062 <pvPortMalloc+0x17a>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60fb      	str	r3, [r7, #12]
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	e7fd      	b.n	800a05e <pvPortMalloc+0x176>
	return pvReturn;
 800a062:	69fb      	ldr	r3, [r7, #28]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3728      	adds	r7, #40	@ 0x28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	24004390 	.word	0x24004390
 800a070:	240043a4 	.word	0x240043a4
 800a074:	24004394 	.word	0x24004394
 800a078:	24004388 	.word	0x24004388
 800a07c:	24004398 	.word	0x24004398
 800a080:	2400439c 	.word	0x2400439c

0800a084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d04f      	beq.n	800a136 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a096:	2308      	movs	r3, #8
 800a098:	425b      	negs	r3, r3
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	4413      	add	r3, r2
 800a09e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	4b25      	ldr	r3, [pc, #148]	@ (800a140 <vPortFree+0xbc>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <vPortFree+0x46>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60fb      	str	r3, [r7, #12]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00b      	beq.n	800a0ea <vPortFree+0x66>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60bb      	str	r3, [r7, #8]
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	e7fd      	b.n	800a0e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	4b14      	ldr	r3, [pc, #80]	@ (800a140 <vPortFree+0xbc>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01e      	beq.n	800a136 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d11a      	bne.n	800a136 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	4b0e      	ldr	r3, [pc, #56]	@ (800a140 <vPortFree+0xbc>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	43db      	mvns	r3, r3
 800a10a:	401a      	ands	r2, r3
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a110:	f7ff f9ce 	bl	80094b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	4b0a      	ldr	r3, [pc, #40]	@ (800a144 <vPortFree+0xc0>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4413      	add	r3, r2
 800a11e:	4a09      	ldr	r2, [pc, #36]	@ (800a144 <vPortFree+0xc0>)
 800a120:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a122:	6938      	ldr	r0, [r7, #16]
 800a124:	f000 f874 	bl	800a210 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a128:	4b07      	ldr	r3, [pc, #28]	@ (800a148 <vPortFree+0xc4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	4a06      	ldr	r2, [pc, #24]	@ (800a148 <vPortFree+0xc4>)
 800a130:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a132:	f7ff f9cb 	bl	80094cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a136:	bf00      	nop
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	240043a4 	.word	0x240043a4
 800a144:	24004394 	.word	0x24004394
 800a148:	240043a0 	.word	0x240043a0

0800a14c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a152:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a156:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a158:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <prvHeapInit+0xac>)
 800a15a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00c      	beq.n	800a180 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3307      	adds	r3, #7
 800a16a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0307 	bic.w	r3, r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1f8 <prvHeapInit+0xac>)
 800a17c:	4413      	add	r3, r2
 800a17e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a184:	4a1d      	ldr	r2, [pc, #116]	@ (800a1fc <prvHeapInit+0xb0>)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a18a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1fc <prvHeapInit+0xb0>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	4413      	add	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a198:	2208      	movs	r2, #8
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1a9b      	subs	r3, r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0307 	bic.w	r3, r3, #7
 800a1a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4a15      	ldr	r2, [pc, #84]	@ (800a200 <prvHeapInit+0xb4>)
 800a1ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1ae:	4b14      	ldr	r3, [pc, #80]	@ (800a200 <prvHeapInit+0xb4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1b6:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <prvHeapInit+0xb4>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <prvHeapInit+0xb4>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a204 <prvHeapInit+0xb8>)
 800a1da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4a09      	ldr	r2, [pc, #36]	@ (800a208 <prvHeapInit+0xbc>)
 800a1e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1e4:	4b09      	ldr	r3, [pc, #36]	@ (800a20c <prvHeapInit+0xc0>)
 800a1e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a1ea:	601a      	str	r2, [r3, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	24000788 	.word	0x24000788
 800a1fc:	24004388 	.word	0x24004388
 800a200:	24004390 	.word	0x24004390
 800a204:	24004398 	.word	0x24004398
 800a208:	24004394 	.word	0x24004394
 800a20c:	240043a4 	.word	0x240043a4

0800a210 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a218:	4b28      	ldr	r3, [pc, #160]	@ (800a2bc <prvInsertBlockIntoFreeList+0xac>)
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e002      	b.n	800a224 <prvInsertBlockIntoFreeList+0x14>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d8f7      	bhi.n	800a21e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	4413      	add	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d108      	bne.n	800a252 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	441a      	add	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	441a      	add	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d118      	bne.n	800a298 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	4b15      	ldr	r3, [pc, #84]	@ (800a2c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d00d      	beq.n	800a28e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	441a      	add	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	e008      	b.n	800a2a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a28e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e003      	b.n	800a2a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d002      	beq.n	800a2ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	24004388 	.word	0x24004388
 800a2c0:	24004390 	.word	0x24004390

0800a2c4 <sniprintf>:
 800a2c4:	b40c      	push	{r2, r3}
 800a2c6:	b530      	push	{r4, r5, lr}
 800a2c8:	4b17      	ldr	r3, [pc, #92]	@ (800a328 <sniprintf+0x64>)
 800a2ca:	1e0c      	subs	r4, r1, #0
 800a2cc:	681d      	ldr	r5, [r3, #0]
 800a2ce:	b09d      	sub	sp, #116	@ 0x74
 800a2d0:	da08      	bge.n	800a2e4 <sniprintf+0x20>
 800a2d2:	238b      	movs	r3, #139	@ 0x8b
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2da:	b01d      	add	sp, #116	@ 0x74
 800a2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2e0:	b002      	add	sp, #8
 800a2e2:	4770      	bx	lr
 800a2e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a2e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2ec:	bf14      	ite	ne
 800a2ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2f2:	4623      	moveq	r3, r4
 800a2f4:	9304      	str	r3, [sp, #16]
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2fc:	9002      	str	r0, [sp, #8]
 800a2fe:	9006      	str	r0, [sp, #24]
 800a300:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a304:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a306:	ab21      	add	r3, sp, #132	@ 0x84
 800a308:	a902      	add	r1, sp, #8
 800a30a:	4628      	mov	r0, r5
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	f000 f9f9 	bl	800a704 <_svfiprintf_r>
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	bfbc      	itt	lt
 800a316:	238b      	movlt	r3, #139	@ 0x8b
 800a318:	602b      	strlt	r3, [r5, #0]
 800a31a:	2c00      	cmp	r4, #0
 800a31c:	d0dd      	beq.n	800a2da <sniprintf+0x16>
 800a31e:	9b02      	ldr	r3, [sp, #8]
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	e7d9      	b.n	800a2da <sniprintf+0x16>
 800a326:	bf00      	nop
 800a328:	24000014 	.word	0x24000014

0800a32c <memset>:
 800a32c:	4402      	add	r2, r0
 800a32e:	4603      	mov	r3, r0
 800a330:	4293      	cmp	r3, r2
 800a332:	d100      	bne.n	800a336 <memset+0xa>
 800a334:	4770      	bx	lr
 800a336:	f803 1b01 	strb.w	r1, [r3], #1
 800a33a:	e7f9      	b.n	800a330 <memset+0x4>

0800a33c <_reclaim_reent>:
 800a33c:	4b29      	ldr	r3, [pc, #164]	@ (800a3e4 <_reclaim_reent+0xa8>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4283      	cmp	r3, r0
 800a342:	b570      	push	{r4, r5, r6, lr}
 800a344:	4604      	mov	r4, r0
 800a346:	d04b      	beq.n	800a3e0 <_reclaim_reent+0xa4>
 800a348:	69c3      	ldr	r3, [r0, #28]
 800a34a:	b1ab      	cbz	r3, 800a378 <_reclaim_reent+0x3c>
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	b16b      	cbz	r3, 800a36c <_reclaim_reent+0x30>
 800a350:	2500      	movs	r5, #0
 800a352:	69e3      	ldr	r3, [r4, #28]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	5959      	ldr	r1, [r3, r5]
 800a358:	2900      	cmp	r1, #0
 800a35a:	d13b      	bne.n	800a3d4 <_reclaim_reent+0x98>
 800a35c:	3504      	adds	r5, #4
 800a35e:	2d80      	cmp	r5, #128	@ 0x80
 800a360:	d1f7      	bne.n	800a352 <_reclaim_reent+0x16>
 800a362:	69e3      	ldr	r3, [r4, #28]
 800a364:	4620      	mov	r0, r4
 800a366:	68d9      	ldr	r1, [r3, #12]
 800a368:	f000 f878 	bl	800a45c <_free_r>
 800a36c:	69e3      	ldr	r3, [r4, #28]
 800a36e:	6819      	ldr	r1, [r3, #0]
 800a370:	b111      	cbz	r1, 800a378 <_reclaim_reent+0x3c>
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f872 	bl	800a45c <_free_r>
 800a378:	6961      	ldr	r1, [r4, #20]
 800a37a:	b111      	cbz	r1, 800a382 <_reclaim_reent+0x46>
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 f86d 	bl	800a45c <_free_r>
 800a382:	69e1      	ldr	r1, [r4, #28]
 800a384:	b111      	cbz	r1, 800a38c <_reclaim_reent+0x50>
 800a386:	4620      	mov	r0, r4
 800a388:	f000 f868 	bl	800a45c <_free_r>
 800a38c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a38e:	b111      	cbz	r1, 800a396 <_reclaim_reent+0x5a>
 800a390:	4620      	mov	r0, r4
 800a392:	f000 f863 	bl	800a45c <_free_r>
 800a396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a398:	b111      	cbz	r1, 800a3a0 <_reclaim_reent+0x64>
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f85e 	bl	800a45c <_free_r>
 800a3a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a3a2:	b111      	cbz	r1, 800a3aa <_reclaim_reent+0x6e>
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 f859 	bl	800a45c <_free_r>
 800a3aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a3ac:	b111      	cbz	r1, 800a3b4 <_reclaim_reent+0x78>
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 f854 	bl	800a45c <_free_r>
 800a3b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a3b6:	b111      	cbz	r1, 800a3be <_reclaim_reent+0x82>
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 f84f 	bl	800a45c <_free_r>
 800a3be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a3c0:	b111      	cbz	r1, 800a3c8 <_reclaim_reent+0x8c>
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 f84a 	bl	800a45c <_free_r>
 800a3c8:	6a23      	ldr	r3, [r4, #32]
 800a3ca:	b14b      	cbz	r3, 800a3e0 <_reclaim_reent+0xa4>
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3d2:	4718      	bx	r3
 800a3d4:	680e      	ldr	r6, [r1, #0]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f000 f840 	bl	800a45c <_free_r>
 800a3dc:	4631      	mov	r1, r6
 800a3de:	e7bb      	b.n	800a358 <_reclaim_reent+0x1c>
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
 800a3e2:	bf00      	nop
 800a3e4:	24000014 	.word	0x24000014

0800a3e8 <__errno>:
 800a3e8:	4b01      	ldr	r3, [pc, #4]	@ (800a3f0 <__errno+0x8>)
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	24000014 	.word	0x24000014

0800a3f4 <__libc_init_array>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a42c <__libc_init_array+0x38>)
 800a3f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a430 <__libc_init_array+0x3c>)
 800a3fa:	1b64      	subs	r4, r4, r5
 800a3fc:	10a4      	asrs	r4, r4, #2
 800a3fe:	2600      	movs	r6, #0
 800a400:	42a6      	cmp	r6, r4
 800a402:	d109      	bne.n	800a418 <__libc_init_array+0x24>
 800a404:	4d0b      	ldr	r5, [pc, #44]	@ (800a434 <__libc_init_array+0x40>)
 800a406:	4c0c      	ldr	r4, [pc, #48]	@ (800a438 <__libc_init_array+0x44>)
 800a408:	f000 fc66 	bl	800acd8 <_init>
 800a40c:	1b64      	subs	r4, r4, r5
 800a40e:	10a4      	asrs	r4, r4, #2
 800a410:	2600      	movs	r6, #0
 800a412:	42a6      	cmp	r6, r4
 800a414:	d105      	bne.n	800a422 <__libc_init_array+0x2e>
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	f855 3b04 	ldr.w	r3, [r5], #4
 800a41c:	4798      	blx	r3
 800a41e:	3601      	adds	r6, #1
 800a420:	e7ee      	b.n	800a400 <__libc_init_array+0xc>
 800a422:	f855 3b04 	ldr.w	r3, [r5], #4
 800a426:	4798      	blx	r3
 800a428:	3601      	adds	r6, #1
 800a42a:	e7f2      	b.n	800a412 <__libc_init_array+0x1e>
 800a42c:	0800adc4 	.word	0x0800adc4
 800a430:	0800adc4 	.word	0x0800adc4
 800a434:	0800adc4 	.word	0x0800adc4
 800a438:	0800adc8 	.word	0x0800adc8

0800a43c <__retarget_lock_acquire_recursive>:
 800a43c:	4770      	bx	lr

0800a43e <__retarget_lock_release_recursive>:
 800a43e:	4770      	bx	lr

0800a440 <memcpy>:
 800a440:	440a      	add	r2, r1
 800a442:	4291      	cmp	r1, r2
 800a444:	f100 33ff 	add.w	r3, r0, #4294967295
 800a448:	d100      	bne.n	800a44c <memcpy+0xc>
 800a44a:	4770      	bx	lr
 800a44c:	b510      	push	{r4, lr}
 800a44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a456:	4291      	cmp	r1, r2
 800a458:	d1f9      	bne.n	800a44e <memcpy+0xe>
 800a45a:	bd10      	pop	{r4, pc}

0800a45c <_free_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4605      	mov	r5, r0
 800a460:	2900      	cmp	r1, #0
 800a462:	d041      	beq.n	800a4e8 <_free_r+0x8c>
 800a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a468:	1f0c      	subs	r4, r1, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bfb8      	it	lt
 800a46e:	18e4      	addlt	r4, r4, r3
 800a470:	f000 f8e0 	bl	800a634 <__malloc_lock>
 800a474:	4a1d      	ldr	r2, [pc, #116]	@ (800a4ec <_free_r+0x90>)
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	b933      	cbnz	r3, 800a488 <_free_r+0x2c>
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6014      	str	r4, [r2, #0]
 800a47e:	4628      	mov	r0, r5
 800a480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a484:	f000 b8dc 	b.w	800a640 <__malloc_unlock>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d908      	bls.n	800a49e <_free_r+0x42>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	1821      	adds	r1, r4, r0
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1809      	addeq	r1, r1, r0
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	e7ed      	b.n	800a47a <_free_r+0x1e>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_free_r+0x4c>
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d9fa      	bls.n	800a49e <_free_r+0x42>
 800a4a8:	6811      	ldr	r1, [r2, #0]
 800a4aa:	1850      	adds	r0, r2, r1
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	d10b      	bne.n	800a4c8 <_free_r+0x6c>
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	4401      	add	r1, r0
 800a4b4:	1850      	adds	r0, r2, r1
 800a4b6:	4283      	cmp	r3, r0
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	d1e0      	bne.n	800a47e <_free_r+0x22>
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	4408      	add	r0, r1
 800a4c4:	6010      	str	r0, [r2, #0]
 800a4c6:	e7da      	b.n	800a47e <_free_r+0x22>
 800a4c8:	d902      	bls.n	800a4d0 <_free_r+0x74>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	e7d6      	b.n	800a47e <_free_r+0x22>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	1821      	adds	r1, r4, r0
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf04      	itt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	1809      	addeq	r1, r1, r0
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6054      	str	r4, [r2, #4]
 800a4e6:	e7ca      	b.n	800a47e <_free_r+0x22>
 800a4e8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ea:	bf00      	nop
 800a4ec:	240044ec 	.word	0x240044ec

0800a4f0 <sbrk_aligned>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4e0f      	ldr	r6, [pc, #60]	@ (800a530 <sbrk_aligned+0x40>)
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	6831      	ldr	r1, [r6, #0]
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	b911      	cbnz	r1, 800a502 <sbrk_aligned+0x12>
 800a4fc:	f000 fba6 	bl	800ac4c <_sbrk_r>
 800a500:	6030      	str	r0, [r6, #0]
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	f000 fba1 	bl	800ac4c <_sbrk_r>
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	d103      	bne.n	800a516 <sbrk_aligned+0x26>
 800a50e:	f04f 34ff 	mov.w	r4, #4294967295
 800a512:	4620      	mov	r0, r4
 800a514:	bd70      	pop	{r4, r5, r6, pc}
 800a516:	1cc4      	adds	r4, r0, #3
 800a518:	f024 0403 	bic.w	r4, r4, #3
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d0f8      	beq.n	800a512 <sbrk_aligned+0x22>
 800a520:	1a21      	subs	r1, r4, r0
 800a522:	4628      	mov	r0, r5
 800a524:	f000 fb92 	bl	800ac4c <_sbrk_r>
 800a528:	3001      	adds	r0, #1
 800a52a:	d1f2      	bne.n	800a512 <sbrk_aligned+0x22>
 800a52c:	e7ef      	b.n	800a50e <sbrk_aligned+0x1e>
 800a52e:	bf00      	nop
 800a530:	240044e8 	.word	0x240044e8

0800a534 <_malloc_r>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	1ccd      	adds	r5, r1, #3
 800a53a:	f025 0503 	bic.w	r5, r5, #3
 800a53e:	3508      	adds	r5, #8
 800a540:	2d0c      	cmp	r5, #12
 800a542:	bf38      	it	cc
 800a544:	250c      	movcc	r5, #12
 800a546:	2d00      	cmp	r5, #0
 800a548:	4606      	mov	r6, r0
 800a54a:	db01      	blt.n	800a550 <_malloc_r+0x1c>
 800a54c:	42a9      	cmp	r1, r5
 800a54e:	d904      	bls.n	800a55a <_malloc_r+0x26>
 800a550:	230c      	movs	r3, #12
 800a552:	6033      	str	r3, [r6, #0]
 800a554:	2000      	movs	r0, #0
 800a556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a630 <_malloc_r+0xfc>
 800a55e:	f000 f869 	bl	800a634 <__malloc_lock>
 800a562:	f8d8 3000 	ldr.w	r3, [r8]
 800a566:	461c      	mov	r4, r3
 800a568:	bb44      	cbnz	r4, 800a5bc <_malloc_r+0x88>
 800a56a:	4629      	mov	r1, r5
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7ff ffbf 	bl	800a4f0 <sbrk_aligned>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	4604      	mov	r4, r0
 800a576:	d158      	bne.n	800a62a <_malloc_r+0xf6>
 800a578:	f8d8 4000 	ldr.w	r4, [r8]
 800a57c:	4627      	mov	r7, r4
 800a57e:	2f00      	cmp	r7, #0
 800a580:	d143      	bne.n	800a60a <_malloc_r+0xd6>
 800a582:	2c00      	cmp	r4, #0
 800a584:	d04b      	beq.n	800a61e <_malloc_r+0xea>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	4639      	mov	r1, r7
 800a58a:	4630      	mov	r0, r6
 800a58c:	eb04 0903 	add.w	r9, r4, r3
 800a590:	f000 fb5c 	bl	800ac4c <_sbrk_r>
 800a594:	4581      	cmp	r9, r0
 800a596:	d142      	bne.n	800a61e <_malloc_r+0xea>
 800a598:	6821      	ldr	r1, [r4, #0]
 800a59a:	1a6d      	subs	r5, r5, r1
 800a59c:	4629      	mov	r1, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ffa6 	bl	800a4f0 <sbrk_aligned>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d03a      	beq.n	800a61e <_malloc_r+0xea>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	442b      	add	r3, r5
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	bb62      	cbnz	r2, 800a610 <_malloc_r+0xdc>
 800a5b6:	f8c8 7000 	str.w	r7, [r8]
 800a5ba:	e00f      	b.n	800a5dc <_malloc_r+0xa8>
 800a5bc:	6822      	ldr	r2, [r4, #0]
 800a5be:	1b52      	subs	r2, r2, r5
 800a5c0:	d420      	bmi.n	800a604 <_malloc_r+0xd0>
 800a5c2:	2a0b      	cmp	r2, #11
 800a5c4:	d917      	bls.n	800a5f6 <_malloc_r+0xc2>
 800a5c6:	1961      	adds	r1, r4, r5
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	6025      	str	r5, [r4, #0]
 800a5cc:	bf18      	it	ne
 800a5ce:	6059      	strne	r1, [r3, #4]
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	bf08      	it	eq
 800a5d4:	f8c8 1000 	streq.w	r1, [r8]
 800a5d8:	5162      	str	r2, [r4, r5]
 800a5da:	604b      	str	r3, [r1, #4]
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 f82f 	bl	800a640 <__malloc_unlock>
 800a5e2:	f104 000b 	add.w	r0, r4, #11
 800a5e6:	1d23      	adds	r3, r4, #4
 800a5e8:	f020 0007 	bic.w	r0, r0, #7
 800a5ec:	1ac2      	subs	r2, r0, r3
 800a5ee:	bf1c      	itt	ne
 800a5f0:	1a1b      	subne	r3, r3, r0
 800a5f2:	50a3      	strne	r3, [r4, r2]
 800a5f4:	e7af      	b.n	800a556 <_malloc_r+0x22>
 800a5f6:	6862      	ldr	r2, [r4, #4]
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	bf0c      	ite	eq
 800a5fc:	f8c8 2000 	streq.w	r2, [r8]
 800a600:	605a      	strne	r2, [r3, #4]
 800a602:	e7eb      	b.n	800a5dc <_malloc_r+0xa8>
 800a604:	4623      	mov	r3, r4
 800a606:	6864      	ldr	r4, [r4, #4]
 800a608:	e7ae      	b.n	800a568 <_malloc_r+0x34>
 800a60a:	463c      	mov	r4, r7
 800a60c:	687f      	ldr	r7, [r7, #4]
 800a60e:	e7b6      	b.n	800a57e <_malloc_r+0x4a>
 800a610:	461a      	mov	r2, r3
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	42a3      	cmp	r3, r4
 800a616:	d1fb      	bne.n	800a610 <_malloc_r+0xdc>
 800a618:	2300      	movs	r3, #0
 800a61a:	6053      	str	r3, [r2, #4]
 800a61c:	e7de      	b.n	800a5dc <_malloc_r+0xa8>
 800a61e:	230c      	movs	r3, #12
 800a620:	6033      	str	r3, [r6, #0]
 800a622:	4630      	mov	r0, r6
 800a624:	f000 f80c 	bl	800a640 <__malloc_unlock>
 800a628:	e794      	b.n	800a554 <_malloc_r+0x20>
 800a62a:	6005      	str	r5, [r0, #0]
 800a62c:	e7d6      	b.n	800a5dc <_malloc_r+0xa8>
 800a62e:	bf00      	nop
 800a630:	240044ec 	.word	0x240044ec

0800a634 <__malloc_lock>:
 800a634:	4801      	ldr	r0, [pc, #4]	@ (800a63c <__malloc_lock+0x8>)
 800a636:	f7ff bf01 	b.w	800a43c <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	240044e4 	.word	0x240044e4

0800a640 <__malloc_unlock>:
 800a640:	4801      	ldr	r0, [pc, #4]	@ (800a648 <__malloc_unlock+0x8>)
 800a642:	f7ff befc 	b.w	800a43e <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	240044e4 	.word	0x240044e4

0800a64c <__ssputs_r>:
 800a64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a650:	688e      	ldr	r6, [r1, #8]
 800a652:	461f      	mov	r7, r3
 800a654:	42be      	cmp	r6, r7
 800a656:	680b      	ldr	r3, [r1, #0]
 800a658:	4682      	mov	sl, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4690      	mov	r8, r2
 800a65e:	d82d      	bhi.n	800a6bc <__ssputs_r+0x70>
 800a660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a668:	d026      	beq.n	800a6b8 <__ssputs_r+0x6c>
 800a66a:	6965      	ldr	r5, [r4, #20]
 800a66c:	6909      	ldr	r1, [r1, #16]
 800a66e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a672:	eba3 0901 	sub.w	r9, r3, r1
 800a676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a67a:	1c7b      	adds	r3, r7, #1
 800a67c:	444b      	add	r3, r9
 800a67e:	106d      	asrs	r5, r5, #1
 800a680:	429d      	cmp	r5, r3
 800a682:	bf38      	it	cc
 800a684:	461d      	movcc	r5, r3
 800a686:	0553      	lsls	r3, r2, #21
 800a688:	d527      	bpl.n	800a6da <__ssputs_r+0x8e>
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7ff ff52 	bl	800a534 <_malloc_r>
 800a690:	4606      	mov	r6, r0
 800a692:	b360      	cbz	r0, 800a6ee <__ssputs_r+0xa2>
 800a694:	6921      	ldr	r1, [r4, #16]
 800a696:	464a      	mov	r2, r9
 800a698:	f7ff fed2 	bl	800a440 <memcpy>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6a6:	81a3      	strh	r3, [r4, #12]
 800a6a8:	6126      	str	r6, [r4, #16]
 800a6aa:	6165      	str	r5, [r4, #20]
 800a6ac:	444e      	add	r6, r9
 800a6ae:	eba5 0509 	sub.w	r5, r5, r9
 800a6b2:	6026      	str	r6, [r4, #0]
 800a6b4:	60a5      	str	r5, [r4, #8]
 800a6b6:	463e      	mov	r6, r7
 800a6b8:	42be      	cmp	r6, r7
 800a6ba:	d900      	bls.n	800a6be <__ssputs_r+0x72>
 800a6bc:	463e      	mov	r6, r7
 800a6be:	6820      	ldr	r0, [r4, #0]
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	4641      	mov	r1, r8
 800a6c4:	f000 faa8 	bl	800ac18 <memmove>
 800a6c8:	68a3      	ldr	r3, [r4, #8]
 800a6ca:	1b9b      	subs	r3, r3, r6
 800a6cc:	60a3      	str	r3, [r4, #8]
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	4433      	add	r3, r6
 800a6d2:	6023      	str	r3, [r4, #0]
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6da:	462a      	mov	r2, r5
 800a6dc:	f000 fac6 	bl	800ac6c <_realloc_r>
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d1e0      	bne.n	800a6a8 <__ssputs_r+0x5c>
 800a6e6:	6921      	ldr	r1, [r4, #16]
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	f7ff feb7 	bl	800a45c <_free_r>
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	f8ca 3000 	str.w	r3, [sl]
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	e7e9      	b.n	800a6d6 <__ssputs_r+0x8a>
	...

0800a704 <_svfiprintf_r>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4698      	mov	r8, r3
 800a70a:	898b      	ldrh	r3, [r1, #12]
 800a70c:	061b      	lsls	r3, r3, #24
 800a70e:	b09d      	sub	sp, #116	@ 0x74
 800a710:	4607      	mov	r7, r0
 800a712:	460d      	mov	r5, r1
 800a714:	4614      	mov	r4, r2
 800a716:	d510      	bpl.n	800a73a <_svfiprintf_r+0x36>
 800a718:	690b      	ldr	r3, [r1, #16]
 800a71a:	b973      	cbnz	r3, 800a73a <_svfiprintf_r+0x36>
 800a71c:	2140      	movs	r1, #64	@ 0x40
 800a71e:	f7ff ff09 	bl	800a534 <_malloc_r>
 800a722:	6028      	str	r0, [r5, #0]
 800a724:	6128      	str	r0, [r5, #16]
 800a726:	b930      	cbnz	r0, 800a736 <_svfiprintf_r+0x32>
 800a728:	230c      	movs	r3, #12
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	b01d      	add	sp, #116	@ 0x74
 800a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a736:	2340      	movs	r3, #64	@ 0x40
 800a738:	616b      	str	r3, [r5, #20]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73e:	2320      	movs	r3, #32
 800a740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a744:	f8cd 800c 	str.w	r8, [sp, #12]
 800a748:	2330      	movs	r3, #48	@ 0x30
 800a74a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a8e8 <_svfiprintf_r+0x1e4>
 800a74e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a752:	f04f 0901 	mov.w	r9, #1
 800a756:	4623      	mov	r3, r4
 800a758:	469a      	mov	sl, r3
 800a75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75e:	b10a      	cbz	r2, 800a764 <_svfiprintf_r+0x60>
 800a760:	2a25      	cmp	r2, #37	@ 0x25
 800a762:	d1f9      	bne.n	800a758 <_svfiprintf_r+0x54>
 800a764:	ebba 0b04 	subs.w	fp, sl, r4
 800a768:	d00b      	beq.n	800a782 <_svfiprintf_r+0x7e>
 800a76a:	465b      	mov	r3, fp
 800a76c:	4622      	mov	r2, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	4638      	mov	r0, r7
 800a772:	f7ff ff6b 	bl	800a64c <__ssputs_r>
 800a776:	3001      	adds	r0, #1
 800a778:	f000 80a7 	beq.w	800a8ca <_svfiprintf_r+0x1c6>
 800a77c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a77e:	445a      	add	r2, fp
 800a780:	9209      	str	r2, [sp, #36]	@ 0x24
 800a782:	f89a 3000 	ldrb.w	r3, [sl]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 809f 	beq.w	800a8ca <_svfiprintf_r+0x1c6>
 800a78c:	2300      	movs	r3, #0
 800a78e:	f04f 32ff 	mov.w	r2, #4294967295
 800a792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a796:	f10a 0a01 	add.w	sl, sl, #1
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	9307      	str	r3, [sp, #28]
 800a79e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7a4:	4654      	mov	r4, sl
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ac:	484e      	ldr	r0, [pc, #312]	@ (800a8e8 <_svfiprintf_r+0x1e4>)
 800a7ae:	f7f5 fdb7 	bl	8000320 <memchr>
 800a7b2:	9a04      	ldr	r2, [sp, #16]
 800a7b4:	b9d8      	cbnz	r0, 800a7ee <_svfiprintf_r+0xea>
 800a7b6:	06d0      	lsls	r0, r2, #27
 800a7b8:	bf44      	itt	mi
 800a7ba:	2320      	movmi	r3, #32
 800a7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7c0:	0711      	lsls	r1, r2, #28
 800a7c2:	bf44      	itt	mi
 800a7c4:	232b      	movmi	r3, #43	@ 0x2b
 800a7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7d0:	d015      	beq.n	800a7fe <_svfiprintf_r+0xfa>
 800a7d2:	9a07      	ldr	r2, [sp, #28]
 800a7d4:	4654      	mov	r4, sl
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f04f 0c0a 	mov.w	ip, #10
 800a7dc:	4621      	mov	r1, r4
 800a7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e2:	3b30      	subs	r3, #48	@ 0x30
 800a7e4:	2b09      	cmp	r3, #9
 800a7e6:	d94b      	bls.n	800a880 <_svfiprintf_r+0x17c>
 800a7e8:	b1b0      	cbz	r0, 800a818 <_svfiprintf_r+0x114>
 800a7ea:	9207      	str	r2, [sp, #28]
 800a7ec:	e014      	b.n	800a818 <_svfiprintf_r+0x114>
 800a7ee:	eba0 0308 	sub.w	r3, r0, r8
 800a7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	46a2      	mov	sl, r4
 800a7fc:	e7d2      	b.n	800a7a4 <_svfiprintf_r+0xa0>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	1d19      	adds	r1, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9103      	str	r1, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfbb      	ittet	lt
 800a80a:	425b      	neglt	r3, r3
 800a80c:	f042 0202 	orrlt.w	r2, r2, #2
 800a810:	9307      	strge	r3, [sp, #28]
 800a812:	9307      	strlt	r3, [sp, #28]
 800a814:	bfb8      	it	lt
 800a816:	9204      	strlt	r2, [sp, #16]
 800a818:	7823      	ldrb	r3, [r4, #0]
 800a81a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a81c:	d10a      	bne.n	800a834 <_svfiprintf_r+0x130>
 800a81e:	7863      	ldrb	r3, [r4, #1]
 800a820:	2b2a      	cmp	r3, #42	@ 0x2a
 800a822:	d132      	bne.n	800a88a <_svfiprintf_r+0x186>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	1d1a      	adds	r2, r3, #4
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	9203      	str	r2, [sp, #12]
 800a82c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a830:	3402      	adds	r4, #2
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8f8 <_svfiprintf_r+0x1f4>
 800a838:	7821      	ldrb	r1, [r4, #0]
 800a83a:	2203      	movs	r2, #3
 800a83c:	4650      	mov	r0, sl
 800a83e:	f7f5 fd6f 	bl	8000320 <memchr>
 800a842:	b138      	cbz	r0, 800a854 <_svfiprintf_r+0x150>
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	eba0 000a 	sub.w	r0, r0, sl
 800a84a:	2240      	movs	r2, #64	@ 0x40
 800a84c:	4082      	lsls	r2, r0
 800a84e:	4313      	orrs	r3, r2
 800a850:	3401      	adds	r4, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a858:	4824      	ldr	r0, [pc, #144]	@ (800a8ec <_svfiprintf_r+0x1e8>)
 800a85a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a85e:	2206      	movs	r2, #6
 800a860:	f7f5 fd5e 	bl	8000320 <memchr>
 800a864:	2800      	cmp	r0, #0
 800a866:	d036      	beq.n	800a8d6 <_svfiprintf_r+0x1d2>
 800a868:	4b21      	ldr	r3, [pc, #132]	@ (800a8f0 <_svfiprintf_r+0x1ec>)
 800a86a:	bb1b      	cbnz	r3, 800a8b4 <_svfiprintf_r+0x1b0>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	3307      	adds	r3, #7
 800a870:	f023 0307 	bic.w	r3, r3, #7
 800a874:	3308      	adds	r3, #8
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87a:	4433      	add	r3, r6
 800a87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a87e:	e76a      	b.n	800a756 <_svfiprintf_r+0x52>
 800a880:	fb0c 3202 	mla	r2, ip, r2, r3
 800a884:	460c      	mov	r4, r1
 800a886:	2001      	movs	r0, #1
 800a888:	e7a8      	b.n	800a7dc <_svfiprintf_r+0xd8>
 800a88a:	2300      	movs	r3, #0
 800a88c:	3401      	adds	r4, #1
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	4619      	mov	r1, r3
 800a892:	f04f 0c0a 	mov.w	ip, #10
 800a896:	4620      	mov	r0, r4
 800a898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89c:	3a30      	subs	r2, #48	@ 0x30
 800a89e:	2a09      	cmp	r2, #9
 800a8a0:	d903      	bls.n	800a8aa <_svfiprintf_r+0x1a6>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d0c6      	beq.n	800a834 <_svfiprintf_r+0x130>
 800a8a6:	9105      	str	r1, [sp, #20]
 800a8a8:	e7c4      	b.n	800a834 <_svfiprintf_r+0x130>
 800a8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e7f0      	b.n	800a896 <_svfiprintf_r+0x192>
 800a8b4:	ab03      	add	r3, sp, #12
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <_svfiprintf_r+0x1f0>)
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	4638      	mov	r0, r7
 800a8c0:	f3af 8000 	nop.w
 800a8c4:	1c42      	adds	r2, r0, #1
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	d1d6      	bne.n	800a878 <_svfiprintf_r+0x174>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	065b      	lsls	r3, r3, #25
 800a8ce:	f53f af2d 	bmi.w	800a72c <_svfiprintf_r+0x28>
 800a8d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8d4:	e72c      	b.n	800a730 <_svfiprintf_r+0x2c>
 800a8d6:	ab03      	add	r3, sp, #12
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	462a      	mov	r2, r5
 800a8dc:	4b05      	ldr	r3, [pc, #20]	@ (800a8f4 <_svfiprintf_r+0x1f0>)
 800a8de:	a904      	add	r1, sp, #16
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f000 f879 	bl	800a9d8 <_printf_i>
 800a8e6:	e7ed      	b.n	800a8c4 <_svfiprintf_r+0x1c0>
 800a8e8:	0800ad88 	.word	0x0800ad88
 800a8ec:	0800ad92 	.word	0x0800ad92
 800a8f0:	00000000 	.word	0x00000000
 800a8f4:	0800a64d 	.word	0x0800a64d
 800a8f8:	0800ad8e 	.word	0x0800ad8e

0800a8fc <_printf_common>:
 800a8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a900:	4616      	mov	r6, r2
 800a902:	4698      	mov	r8, r3
 800a904:	688a      	ldr	r2, [r1, #8]
 800a906:	690b      	ldr	r3, [r1, #16]
 800a908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	bfb8      	it	lt
 800a910:	4613      	movlt	r3, r2
 800a912:	6033      	str	r3, [r6, #0]
 800a914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a918:	4607      	mov	r7, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	b10a      	cbz	r2, 800a922 <_printf_common+0x26>
 800a91e:	3301      	adds	r3, #1
 800a920:	6033      	str	r3, [r6, #0]
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	0699      	lsls	r1, r3, #26
 800a926:	bf42      	ittt	mi
 800a928:	6833      	ldrmi	r3, [r6, #0]
 800a92a:	3302      	addmi	r3, #2
 800a92c:	6033      	strmi	r3, [r6, #0]
 800a92e:	6825      	ldr	r5, [r4, #0]
 800a930:	f015 0506 	ands.w	r5, r5, #6
 800a934:	d106      	bne.n	800a944 <_printf_common+0x48>
 800a936:	f104 0a19 	add.w	sl, r4, #25
 800a93a:	68e3      	ldr	r3, [r4, #12]
 800a93c:	6832      	ldr	r2, [r6, #0]
 800a93e:	1a9b      	subs	r3, r3, r2
 800a940:	42ab      	cmp	r3, r5
 800a942:	dc26      	bgt.n	800a992 <_printf_common+0x96>
 800a944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	3b00      	subs	r3, #0
 800a94c:	bf18      	it	ne
 800a94e:	2301      	movne	r3, #1
 800a950:	0692      	lsls	r2, r2, #26
 800a952:	d42b      	bmi.n	800a9ac <_printf_common+0xb0>
 800a954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a958:	4641      	mov	r1, r8
 800a95a:	4638      	mov	r0, r7
 800a95c:	47c8      	blx	r9
 800a95e:	3001      	adds	r0, #1
 800a960:	d01e      	beq.n	800a9a0 <_printf_common+0xa4>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	6922      	ldr	r2, [r4, #16]
 800a966:	f003 0306 	and.w	r3, r3, #6
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	bf02      	ittt	eq
 800a96e:	68e5      	ldreq	r5, [r4, #12]
 800a970:	6833      	ldreq	r3, [r6, #0]
 800a972:	1aed      	subeq	r5, r5, r3
 800a974:	68a3      	ldr	r3, [r4, #8]
 800a976:	bf0c      	ite	eq
 800a978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a97c:	2500      	movne	r5, #0
 800a97e:	4293      	cmp	r3, r2
 800a980:	bfc4      	itt	gt
 800a982:	1a9b      	subgt	r3, r3, r2
 800a984:	18ed      	addgt	r5, r5, r3
 800a986:	2600      	movs	r6, #0
 800a988:	341a      	adds	r4, #26
 800a98a:	42b5      	cmp	r5, r6
 800a98c:	d11a      	bne.n	800a9c4 <_printf_common+0xc8>
 800a98e:	2000      	movs	r0, #0
 800a990:	e008      	b.n	800a9a4 <_printf_common+0xa8>
 800a992:	2301      	movs	r3, #1
 800a994:	4652      	mov	r2, sl
 800a996:	4641      	mov	r1, r8
 800a998:	4638      	mov	r0, r7
 800a99a:	47c8      	blx	r9
 800a99c:	3001      	adds	r0, #1
 800a99e:	d103      	bne.n	800a9a8 <_printf_common+0xac>
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a8:	3501      	adds	r5, #1
 800a9aa:	e7c6      	b.n	800a93a <_printf_common+0x3e>
 800a9ac:	18e1      	adds	r1, r4, r3
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	2030      	movs	r0, #48	@ 0x30
 800a9b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9b6:	4422      	add	r2, r4
 800a9b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9c0:	3302      	adds	r3, #2
 800a9c2:	e7c7      	b.n	800a954 <_printf_common+0x58>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4622      	mov	r2, r4
 800a9c8:	4641      	mov	r1, r8
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c8      	blx	r9
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d0e6      	beq.n	800a9a0 <_printf_common+0xa4>
 800a9d2:	3601      	adds	r6, #1
 800a9d4:	e7d9      	b.n	800a98a <_printf_common+0x8e>
	...

0800a9d8 <_printf_i>:
 800a9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	7e0f      	ldrb	r7, [r1, #24]
 800a9de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9e0:	2f78      	cmp	r7, #120	@ 0x78
 800a9e2:	4691      	mov	r9, r2
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	469a      	mov	sl, r3
 800a9ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9ee:	d807      	bhi.n	800aa00 <_printf_i+0x28>
 800a9f0:	2f62      	cmp	r7, #98	@ 0x62
 800a9f2:	d80a      	bhi.n	800aa0a <_printf_i+0x32>
 800a9f4:	2f00      	cmp	r7, #0
 800a9f6:	f000 80d2 	beq.w	800ab9e <_printf_i+0x1c6>
 800a9fa:	2f58      	cmp	r7, #88	@ 0x58
 800a9fc:	f000 80b9 	beq.w	800ab72 <_printf_i+0x19a>
 800aa00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa08:	e03a      	b.n	800aa80 <_printf_i+0xa8>
 800aa0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa0e:	2b15      	cmp	r3, #21
 800aa10:	d8f6      	bhi.n	800aa00 <_printf_i+0x28>
 800aa12:	a101      	add	r1, pc, #4	@ (adr r1, 800aa18 <_printf_i+0x40>)
 800aa14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa18:	0800aa71 	.word	0x0800aa71
 800aa1c:	0800aa85 	.word	0x0800aa85
 800aa20:	0800aa01 	.word	0x0800aa01
 800aa24:	0800aa01 	.word	0x0800aa01
 800aa28:	0800aa01 	.word	0x0800aa01
 800aa2c:	0800aa01 	.word	0x0800aa01
 800aa30:	0800aa85 	.word	0x0800aa85
 800aa34:	0800aa01 	.word	0x0800aa01
 800aa38:	0800aa01 	.word	0x0800aa01
 800aa3c:	0800aa01 	.word	0x0800aa01
 800aa40:	0800aa01 	.word	0x0800aa01
 800aa44:	0800ab85 	.word	0x0800ab85
 800aa48:	0800aaaf 	.word	0x0800aaaf
 800aa4c:	0800ab3f 	.word	0x0800ab3f
 800aa50:	0800aa01 	.word	0x0800aa01
 800aa54:	0800aa01 	.word	0x0800aa01
 800aa58:	0800aba7 	.word	0x0800aba7
 800aa5c:	0800aa01 	.word	0x0800aa01
 800aa60:	0800aaaf 	.word	0x0800aaaf
 800aa64:	0800aa01 	.word	0x0800aa01
 800aa68:	0800aa01 	.word	0x0800aa01
 800aa6c:	0800ab47 	.word	0x0800ab47
 800aa70:	6833      	ldr	r3, [r6, #0]
 800aa72:	1d1a      	adds	r2, r3, #4
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6032      	str	r2, [r6, #0]
 800aa78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa80:	2301      	movs	r3, #1
 800aa82:	e09d      	b.n	800abc0 <_printf_i+0x1e8>
 800aa84:	6833      	ldr	r3, [r6, #0]
 800aa86:	6820      	ldr	r0, [r4, #0]
 800aa88:	1d19      	adds	r1, r3, #4
 800aa8a:	6031      	str	r1, [r6, #0]
 800aa8c:	0606      	lsls	r6, r0, #24
 800aa8e:	d501      	bpl.n	800aa94 <_printf_i+0xbc>
 800aa90:	681d      	ldr	r5, [r3, #0]
 800aa92:	e003      	b.n	800aa9c <_printf_i+0xc4>
 800aa94:	0645      	lsls	r5, r0, #25
 800aa96:	d5fb      	bpl.n	800aa90 <_printf_i+0xb8>
 800aa98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa9c:	2d00      	cmp	r5, #0
 800aa9e:	da03      	bge.n	800aaa8 <_printf_i+0xd0>
 800aaa0:	232d      	movs	r3, #45	@ 0x2d
 800aaa2:	426d      	negs	r5, r5
 800aaa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaa8:	4859      	ldr	r0, [pc, #356]	@ (800ac10 <_printf_i+0x238>)
 800aaaa:	230a      	movs	r3, #10
 800aaac:	e011      	b.n	800aad2 <_printf_i+0xfa>
 800aaae:	6821      	ldr	r1, [r4, #0]
 800aab0:	6833      	ldr	r3, [r6, #0]
 800aab2:	0608      	lsls	r0, r1, #24
 800aab4:	f853 5b04 	ldr.w	r5, [r3], #4
 800aab8:	d402      	bmi.n	800aac0 <_printf_i+0xe8>
 800aaba:	0649      	lsls	r1, r1, #25
 800aabc:	bf48      	it	mi
 800aabe:	b2ad      	uxthmi	r5, r5
 800aac0:	2f6f      	cmp	r7, #111	@ 0x6f
 800aac2:	4853      	ldr	r0, [pc, #332]	@ (800ac10 <_printf_i+0x238>)
 800aac4:	6033      	str	r3, [r6, #0]
 800aac6:	bf14      	ite	ne
 800aac8:	230a      	movne	r3, #10
 800aaca:	2308      	moveq	r3, #8
 800aacc:	2100      	movs	r1, #0
 800aace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aad2:	6866      	ldr	r6, [r4, #4]
 800aad4:	60a6      	str	r6, [r4, #8]
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	bfa2      	ittt	ge
 800aada:	6821      	ldrge	r1, [r4, #0]
 800aadc:	f021 0104 	bicge.w	r1, r1, #4
 800aae0:	6021      	strge	r1, [r4, #0]
 800aae2:	b90d      	cbnz	r5, 800aae8 <_printf_i+0x110>
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	d04b      	beq.n	800ab80 <_printf_i+0x1a8>
 800aae8:	4616      	mov	r6, r2
 800aaea:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaee:	fb03 5711 	mls	r7, r3, r1, r5
 800aaf2:	5dc7      	ldrb	r7, [r0, r7]
 800aaf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aaf8:	462f      	mov	r7, r5
 800aafa:	42bb      	cmp	r3, r7
 800aafc:	460d      	mov	r5, r1
 800aafe:	d9f4      	bls.n	800aaea <_printf_i+0x112>
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d10b      	bne.n	800ab1c <_printf_i+0x144>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	07df      	lsls	r7, r3, #31
 800ab08:	d508      	bpl.n	800ab1c <_printf_i+0x144>
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	bfde      	ittt	le
 800ab12:	2330      	movle	r3, #48	@ 0x30
 800ab14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab1c:	1b92      	subs	r2, r2, r6
 800ab1e:	6122      	str	r2, [r4, #16]
 800ab20:	f8cd a000 	str.w	sl, [sp]
 800ab24:	464b      	mov	r3, r9
 800ab26:	aa03      	add	r2, sp, #12
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	f7ff fee6 	bl	800a8fc <_printf_common>
 800ab30:	3001      	adds	r0, #1
 800ab32:	d14a      	bne.n	800abca <_printf_i+0x1f2>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b004      	add	sp, #16
 800ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f043 0320 	orr.w	r3, r3, #32
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	4833      	ldr	r0, [pc, #204]	@ (800ac14 <_printf_i+0x23c>)
 800ab48:	2778      	movs	r7, #120	@ 0x78
 800ab4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	6831      	ldr	r1, [r6, #0]
 800ab52:	061f      	lsls	r7, r3, #24
 800ab54:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab58:	d402      	bmi.n	800ab60 <_printf_i+0x188>
 800ab5a:	065f      	lsls	r7, r3, #25
 800ab5c:	bf48      	it	mi
 800ab5e:	b2ad      	uxthmi	r5, r5
 800ab60:	6031      	str	r1, [r6, #0]
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	bf44      	itt	mi
 800ab66:	f043 0320 	orrmi.w	r3, r3, #32
 800ab6a:	6023      	strmi	r3, [r4, #0]
 800ab6c:	b11d      	cbz	r5, 800ab76 <_printf_i+0x19e>
 800ab6e:	2310      	movs	r3, #16
 800ab70:	e7ac      	b.n	800aacc <_printf_i+0xf4>
 800ab72:	4827      	ldr	r0, [pc, #156]	@ (800ac10 <_printf_i+0x238>)
 800ab74:	e7e9      	b.n	800ab4a <_printf_i+0x172>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	f023 0320 	bic.w	r3, r3, #32
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	e7f6      	b.n	800ab6e <_printf_i+0x196>
 800ab80:	4616      	mov	r6, r2
 800ab82:	e7bd      	b.n	800ab00 <_printf_i+0x128>
 800ab84:	6833      	ldr	r3, [r6, #0]
 800ab86:	6825      	ldr	r5, [r4, #0]
 800ab88:	6961      	ldr	r1, [r4, #20]
 800ab8a:	1d18      	adds	r0, r3, #4
 800ab8c:	6030      	str	r0, [r6, #0]
 800ab8e:	062e      	lsls	r6, r5, #24
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	d501      	bpl.n	800ab98 <_printf_i+0x1c0>
 800ab94:	6019      	str	r1, [r3, #0]
 800ab96:	e002      	b.n	800ab9e <_printf_i+0x1c6>
 800ab98:	0668      	lsls	r0, r5, #25
 800ab9a:	d5fb      	bpl.n	800ab94 <_printf_i+0x1bc>
 800ab9c:	8019      	strh	r1, [r3, #0]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6123      	str	r3, [r4, #16]
 800aba2:	4616      	mov	r6, r2
 800aba4:	e7bc      	b.n	800ab20 <_printf_i+0x148>
 800aba6:	6833      	ldr	r3, [r6, #0]
 800aba8:	1d1a      	adds	r2, r3, #4
 800abaa:	6032      	str	r2, [r6, #0]
 800abac:	681e      	ldr	r6, [r3, #0]
 800abae:	6862      	ldr	r2, [r4, #4]
 800abb0:	2100      	movs	r1, #0
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7f5 fbb4 	bl	8000320 <memchr>
 800abb8:	b108      	cbz	r0, 800abbe <_printf_i+0x1e6>
 800abba:	1b80      	subs	r0, r0, r6
 800abbc:	6060      	str	r0, [r4, #4]
 800abbe:	6863      	ldr	r3, [r4, #4]
 800abc0:	6123      	str	r3, [r4, #16]
 800abc2:	2300      	movs	r3, #0
 800abc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abc8:	e7aa      	b.n	800ab20 <_printf_i+0x148>
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	4632      	mov	r2, r6
 800abce:	4649      	mov	r1, r9
 800abd0:	4640      	mov	r0, r8
 800abd2:	47d0      	blx	sl
 800abd4:	3001      	adds	r0, #1
 800abd6:	d0ad      	beq.n	800ab34 <_printf_i+0x15c>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	079b      	lsls	r3, r3, #30
 800abdc:	d413      	bmi.n	800ac06 <_printf_i+0x22e>
 800abde:	68e0      	ldr	r0, [r4, #12]
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	4298      	cmp	r0, r3
 800abe4:	bfb8      	it	lt
 800abe6:	4618      	movlt	r0, r3
 800abe8:	e7a6      	b.n	800ab38 <_printf_i+0x160>
 800abea:	2301      	movs	r3, #1
 800abec:	4632      	mov	r2, r6
 800abee:	4649      	mov	r1, r9
 800abf0:	4640      	mov	r0, r8
 800abf2:	47d0      	blx	sl
 800abf4:	3001      	adds	r0, #1
 800abf6:	d09d      	beq.n	800ab34 <_printf_i+0x15c>
 800abf8:	3501      	adds	r5, #1
 800abfa:	68e3      	ldr	r3, [r4, #12]
 800abfc:	9903      	ldr	r1, [sp, #12]
 800abfe:	1a5b      	subs	r3, r3, r1
 800ac00:	42ab      	cmp	r3, r5
 800ac02:	dcf2      	bgt.n	800abea <_printf_i+0x212>
 800ac04:	e7eb      	b.n	800abde <_printf_i+0x206>
 800ac06:	2500      	movs	r5, #0
 800ac08:	f104 0619 	add.w	r6, r4, #25
 800ac0c:	e7f5      	b.n	800abfa <_printf_i+0x222>
 800ac0e:	bf00      	nop
 800ac10:	0800ad99 	.word	0x0800ad99
 800ac14:	0800adaa 	.word	0x0800adaa

0800ac18 <memmove>:
 800ac18:	4288      	cmp	r0, r1
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	eb01 0402 	add.w	r4, r1, r2
 800ac20:	d902      	bls.n	800ac28 <memmove+0x10>
 800ac22:	4284      	cmp	r4, r0
 800ac24:	4623      	mov	r3, r4
 800ac26:	d807      	bhi.n	800ac38 <memmove+0x20>
 800ac28:	1e43      	subs	r3, r0, #1
 800ac2a:	42a1      	cmp	r1, r4
 800ac2c:	d008      	beq.n	800ac40 <memmove+0x28>
 800ac2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac36:	e7f8      	b.n	800ac2a <memmove+0x12>
 800ac38:	4402      	add	r2, r0
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	428a      	cmp	r2, r1
 800ac3e:	d100      	bne.n	800ac42 <memmove+0x2a>
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac4a:	e7f7      	b.n	800ac3c <memmove+0x24>

0800ac4c <_sbrk_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	@ (800ac68 <_sbrk_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f6 fa76 	bl	8001148 <_sbrk>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_sbrk_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_sbrk_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	240044e0 	.word	0x240044e0

0800ac6c <_realloc_r>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	4680      	mov	r8, r0
 800ac72:	4615      	mov	r5, r2
 800ac74:	460c      	mov	r4, r1
 800ac76:	b921      	cbnz	r1, 800ac82 <_realloc_r+0x16>
 800ac78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	f7ff bc59 	b.w	800a534 <_malloc_r>
 800ac82:	b92a      	cbnz	r2, 800ac90 <_realloc_r+0x24>
 800ac84:	f7ff fbea 	bl	800a45c <_free_r>
 800ac88:	2400      	movs	r4, #0
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac90:	f000 f81a 	bl	800acc8 <_malloc_usable_size_r>
 800ac94:	4285      	cmp	r5, r0
 800ac96:	4606      	mov	r6, r0
 800ac98:	d802      	bhi.n	800aca0 <_realloc_r+0x34>
 800ac9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ac9e:	d8f4      	bhi.n	800ac8a <_realloc_r+0x1e>
 800aca0:	4629      	mov	r1, r5
 800aca2:	4640      	mov	r0, r8
 800aca4:	f7ff fc46 	bl	800a534 <_malloc_r>
 800aca8:	4607      	mov	r7, r0
 800acaa:	2800      	cmp	r0, #0
 800acac:	d0ec      	beq.n	800ac88 <_realloc_r+0x1c>
 800acae:	42b5      	cmp	r5, r6
 800acb0:	462a      	mov	r2, r5
 800acb2:	4621      	mov	r1, r4
 800acb4:	bf28      	it	cs
 800acb6:	4632      	movcs	r2, r6
 800acb8:	f7ff fbc2 	bl	800a440 <memcpy>
 800acbc:	4621      	mov	r1, r4
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7ff fbcc 	bl	800a45c <_free_r>
 800acc4:	463c      	mov	r4, r7
 800acc6:	e7e0      	b.n	800ac8a <_realloc_r+0x1e>

0800acc8 <_malloc_usable_size_r>:
 800acc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800accc:	1f18      	subs	r0, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfbc      	itt	lt
 800acd2:	580b      	ldrlt	r3, [r1, r0]
 800acd4:	18c0      	addlt	r0, r0, r3
 800acd6:	4770      	bx	lr

0800acd8 <_init>:
 800acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acda:	bf00      	nop
 800acdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acde:	bc08      	pop	{r3}
 800ace0:	469e      	mov	lr, r3
 800ace2:	4770      	bx	lr

0800ace4 <_fini>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	bf00      	nop
 800ace8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acea:	bc08      	pop	{r3}
 800acec:	469e      	mov	lr, r3
 800acee:	4770      	bx	lr
